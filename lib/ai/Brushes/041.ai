%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8.0.1
%%For: (S ) ( )
%%Title: (041.ai)
%%CreationDate: (11/1/2005) (1:29 PM)
%%BoundingBox: 229 487 399 744
%%HiResBoundingBox: 229.5962 487.7476 398.1182 743.6816
%%DocumentProcessColors:
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%DocumentCustomColors: (Cert2.color1)
%%+ (Cert2.color2)
%%CMYKCustomColor: 1 0.55 1 0 (Cert2.color1)
%%+ 0 0 0 1 (Cert2.color2)
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%+ 1 0 0.55 0 (Aqua)
%%+ 0.5 0.4 0.3 0 (blue gray)
%%+ 0.8 0.05 0 0 (blue sky)
%%+ 0.5 0.85 1 0 (Brown)
%%+ 1 0.9 0.1 0 (Dark Blue)
%%+ 0.75 0.9 0 0 (dark violet)
%%+ 1 0.55 1 0 (Forest Green)
%%+ 0.75 0.05 1 0 (fresh green)
%%+ 0.4 0.4 0.4 0 (Gray)
%%+ 0.45 0 1 0 (Lime Green)
%%+ 1 0.75 0 0 (night blue)
%%+ 1 0.5 0 0 (ocean blue)
%%+ 0 0.5 1 0 (orange)
%%+ 0 0.7 1 0 (Orange Red)
%%+ 0 0.25 1 0 (Orange Yellow)
%%+ 0 0.45 0.6 0 (Peach)
%%+ 0.4 0.7 1 0 (Rusty Brown)
%%+ 0 0.9 1 0 (Saturn Red)
%%+ 1 0.4 0.15 0 (Turquoise)
%%+ 0.45 0.9 0 0 (violet)
%%+ 0.25 1 0.25 0 (Violet Red)
%%+ 0 0.1 1 0 (warm yellow)
%%+ 0.2 0 1 0 (Yellow Green)
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 297.5 420.5 297.5 420.5
%AI3_TileBox: 17 19 577 823
%AI3_DocumentPreview: None
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -335.3794 860.2759 0.87 1148 792 18 1 1 2 40 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:17 19
%%AI3_PaperRect:-16 824 579 -18
%%AI3_Margin:16 -20 -18 18
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 84 128 8
%%BeginData: 12724 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD05FF7D7DA8FFFF52F8F8277DFD04FF7D52F8F8F852A8FD07FF7D
%52F8F82752A8FD05FF5227F8F82752A8FD07FF5227F8F8277DA8FFFFFFA8
%27F8F827A8FFA85252FD07FF7DFFA87D5227A8FD04F827277DFFA8FD08F8
%52FD05FFFD08F827FFFF7DFD08F87DFD04FF7DFD08F87DFFA8F85227F8F8
%F87D52527DFD04A8FFFF7DF8F8F8FF7D5227F8F8F8A8FFFFF8A8FD0AF87D
%FFFFFF27FD09F852A8FD09F827A8FFFFFFFD0AF8A8277DFFFF52F8F8F87D
%27FF27F8F87DFFFFFFF827F827F852F8F8F8FFFFFF52F827F8F8FD04527D
%5227F827FFFF7DF8F827527D52525227F8F827F8F852527D525227F8F852
%FFFF27F8F8FD04527D27F8F852F8277DFFFF52FD06F852F8A8FFFF7DF827
%FFA8FF52F8F8FD04FFF8F852F8FD08FF52F8FFFF7DF8A8FD07FF7DF82727
%FD08FF2727FFFF5227FD08FF522727F87DFFFFFF52F852FFFFFF52F87DFF
%7D7DFFF8FFFFFF7DF87DFD04FF2752277DFD08FF7D27FFFF7D27FD09FF27
%F8FD09FF5252FFFF527DFD08FFA8F87D7D7DFFFFFFA8F827FFFFFFF8A8A8
%52527D7DF8FFFFFFA8277DFFFFA8A8FFFF7D52FF527DFD05FF7D27FFFFFF
%F8A8FD04FFA8527DFFF8F87DA852A8FD04FFA8277DFFFF7D27FD05FF7D52
%A87DF8FFFFFF7DA8A8FFF8A8FFFFFF5227A8277D272727527DA8FF7D2727
%5227FFFFFF7DFD04F87DFFFFA852F8F852FF27F8F87DFFFFFF27FD04F827
%FD04F8A8FFFF7D27F8277D7DF8F827A8FFFFA8FD04F852FFFFFF7DF8F8F8
%7DFFFF7D522752277DFFA827F8F8F827A8FFFFF8F8A8FD04FF27F8F8277D
%FF7D52FD08F82752A8FF52F8F8F852A8F8F8F827FFFF5227FD08F8277DFF
%FFFD04F8A8FD04FF27F87DFFFF27FD04F87DFFA8FD04F87D5227A87DF8F8
%FD05FFA827F8A8FD05FF52FD04F8277DFD05FF52F852FFFF7DF827A8FD04
%FFA827FD04F852A8FD05FFF8277DFD05FF27F852FF27527D27F8F8F87D27
%F8F827FFFFA8FD04F827FD10FF27F87DFD16FF7D27F8A8FD0FFF7DF8F8F8
%27FFFFFF52FD06F8FFFFFF7DF8F8FD0727F8FD0C27F8FD0C27F8FD0B27F8
%FD1127F827F8F8F8FD04FF52FD04F8FD04FF7D27A8FFFF2752FD36A87D7D
%527D52F8FFFFA8527DFD04FF27F8F852FFFF7DA8A8FD04FF2752A8587D52
%7D587D597D587D597D587D597D587D597D587D597D587D597D527D597D58
%7D597D587D597D587D597D587D597D587D597D587D597D7DFFF8FD04FFA8
%FD04FF52F87DF8FF27F852FD05FF277D59052D2D0B052D050B052D050B05
%2D050B052D050B052D050B052D050B052D050B052D050B052D050B052D05
%0B052D050B052D050B052D050B58FFF8FD05FF7DF827FF5227FF7DF8F8F8
%7DFD05FF27527D0B0404040B040B040B040B040B040B040B040B040B040B
%040B040B040B040B040B040B040B040B040B040B040B040B040B040B040B
%040B042DFFF8FD05FF7DF8F85227FD04FF277D27527DFFFFFF27A8340B2D
%2E2D0B2D052D0B2D052D0B2D052D0B2D052D0B2D052D0B2D052D0B2D052D
%0B2D052D0B2D052D0B2D052D0B2D052D0B2D052D0B2D052D2EFF27FFFFFF
%A8525227527DFFFFFFA8F8F8F87D52F8F8A8FF277D7D0B0458FD32FFA80B
%052DFFF8FFA827F8527D27F8F87DFFFFF8F8F8FFFFA8F8F827FF27A85905
%0B83FD32FFA8052D58FFF8FF7DF8F852FFFF27F8F87D52F8F852FFFF52F8
%F827FF277D7D0B0458FD32FFA80B042DFFF8FF52F8F827FFFF7DF8F82727
%F8F852FFFFFF2727FFFF27A859052D83FD32FFA80B2D58FFF8FFFF5227A8
%FFFFA8FD06F87DFD04FFA8FFFF277D7D0B0559FD32FFA80B042DFFF8FFFF
%FFA8FFFFFF7DFD06F852FD07FF27A859052D83FD32FFA8050B58FFF8FFFF
%A8FD04FFA8FD06F852FD04FF27FFFF277D7D0B0458FD32FFA80B042DFFF8
%FFFF7D7DFFFFFF7DF8F8F87DF8F827FFFFFF7D27FFFF27A8590B2D83FD32
%FFA8052D58FFF8FFFF5252FFFFFF7DF8F827FF27F8F87DFF7DF8F87DFF27
%7D7D0B0458FD32FFA80B052DFFF8FFA8F8F87DFFA8F8F8F8A8FFA852F8F8
%F827F8F8F8FF27A859050B83FD32FFA8052D58FFF8FF52FD06F827A8FD05
%FF7DFFFF52F8F827277D7D0B0458FD32FFA80B042DFFF87DF8F827FFFFA8
%A8FD0AFFA8FD04F8A859052D83FD32FFA80B2D58FFFD04F87DFD0AFFA852
%7DA827F8F852277D7D0B0559FD32FFA80B042DFFF8A8F8F8F8A87D7D7DFD
%04FFA827F8272727F8F827FF27A859052D83FD32FFA8050B58FFF8FF7DF8
%F8F82727F8F87DFFA8F8F8F8A8FFA827F8A8FF277D7D0B0458FD32FFA80B
%042DFFF8FFFF27F8A8FFFF27F8F87D7DF8F827FFFFFFA827FFFF27A8590B
%2D83FD32FFA8052D58FFF8FFFF527DFFFFFFA8FD06F87DFD04FF52FFFF27
%7D7D0B0458FD32FFA80B052DFFF8FFFFA87DFFFFFF7DFD06F852FD07FF27
%A859050B83FD32FFA8052D58FFF8FD07FFA8FD06F87DFD04FFA8FFFF277D
%7D0B0458FD32FFA80B042DFFF8FFFFFF7DFFFFFF7DF8F8F852F8F852FFFF
%FF2727A8FF27A859052D83FD32FFA80B2D58FFF8FFFF27F87DFFFFA8F8F8
%F87DF8F852FFFF52F8F8F8FF277D7D0B0559FD32FFA80B042DFFF8FF27F8
%F827FFFF52F8F852FF27F8F8A8FFFFF8F827FF27A859052D83FD32FFA805
%0B58FFF8FF7DF8F87DFFA827F827A8FFFF27F8F827F8F827FFFF277D7D0B
%0458FD32FFA80B042DFFF8FFFF52F8F82727F827A8FFFFFFA85227F85252
%A8FFFF27A82E0B2D58FD32FF7D052D2DFFF8FFFFA87D2727F8527DFFFFFF
%7DF8F827FF7DF8F87DFF277D7D0B0458FD32FFA80B052DFFF8FFA8F8F852
%A87DF8F852FFA8F8F8F8FFFFA8F8F8F8FF27A859050B83FD32FFA8052D58
%FFF8FF52F8F852FFFF52F8F85227F8F852FFFF52F8F852FF277D7D0B0458
%FD32FFA80B042DFFF8FF7DF8F827FFFF7DF8F82727F8F852FFFFFF7D52FF
%FF27A859052D83FD32FFA80B2D58FFF8FFFF7D52FFFFFFA8FD06F87DFD07
%FF277D7D0B0559FD32FFA80B042DFFF8FD07FF7DFD06F852FD04FFA8FFFF
%27A859052D83FD32FFA8050B58FFF8FFFFA8FD04FFA8F8F8F827F8F852FD
%04FF27FFFF277D7D0B0458FD32FFA80B042DFFF8FFFF7D7DFFFFFF7DF8F8
%F8A8F8F827FFFFFF52F8FFFF27A8590B2D83FD32FFA8052D58FFF8FFFF27
%27FFFFFF7DF8F852FF52F8F852A852F8F87DFF277D7D0B0458FD32FFA80B
%052DFFF8FF7DF8F8527D7DF8F827FFFFFF7D27F82752F8F8F8FF27A85905
%0B83FD32FFA8052D58FFF8FF27F8F85252F82752FD09FF7DF8F8F8277D7D
%0B0458FD32FFA80B042DFFF852F8F827FD0EFFA8F8F827F8A859052D83FD
%32FFA80B2D58FFF827F8F87DFD09FFA85227525227F8F87D277D7D0B0559
%FD32FFA80B042DFFF8FFF8F8F87D522752A8FFFFFF7DF8F8525227F8F852
%FF27A859052D83FD32FFA8050B58FFF8FFA8F8F8F87D52F8F852FFA8F8F8
%27A8FFFF52F8FFFF277D7D0B0458FD32FFA80B042DFFF8FFFF27F8FFFFFF
%27F8F85252F8F852FFFFFFA827FFFF27A8590B2D83FD32FFA8052D58FFF8
%FFFF7D7DFFFFFFA8FD06F87DFD04FF7DFFFF277D7D0B0458FD32FFA80B05
%2DFFF8FFFFA8A8FFFFFF7DFD06F852FD07FF27A859050B83FD32FFA8052D
%58FFF8FD07FFA8FD06F87DFFFFFFA87DFFFF277D7D0B0458FD32FFA80B04
%2DFFF8FFFFA852FFFFFF7DF8F8F852F8F852FFFFA8F8F87DFF27A859052D
%83FD32FFA80B2D58FFF8FFFFF8F852FFFFA8F8F8F87DF8F827FFFF7DF8F8
%F8FF277D7D0B0559FD32FFA80B042DFFF8FF27F8F852FFFF52F8F852FF52
%F8F87DFFA8F8F852FF27A859052D83FD32FFA8050B58FFF8FFA8F8F87DFF
%A827F827A8FFFF7D27F8F8F82752FFFF277D7D0B0452FD32FFA804040BFF
%F8FFFFA8FD05F852A8FFFFFF7DF8F827F8F87DFFFF27A8590B2D83FD32FF
%A8052D58FFF8FFFF7D27F827F82752FFFFFF52F8F852FFA8F8F852FF277D
%7D0B0458FD32FFA80B052DFFF8FF7DF8F87DFFA8F8F827FFA8F8F827FFFF
%7DF8F8F8FF27A859050B83FD32FFA8052D58FFF8FF52F8F827FFFF7DF8F8
%5227F8F852FFFF7DF8F87DFF277D7D0B0458FD32FFA80B042DFFF8FFA8F8
%F852FFFF7DF8F8F827F8F852FFFFFFA87DFFFF27A859052D83FD32FFA80B
%2D58FFF8FFFFA87DFFFFFFA8FD06F87DFD07FF277D7D0B0559FD32FFA80B
%042DFFF8FD07FF7DF8F8F827F8F852FD04FF7DFFFF27A859052D83FD32FF
%A8050B58FFF8FFFFA8A8FFFFFFA8F8F8F827F8F852FFFFFFA827FFFF277D
%7D0B0458FD32FFA80B042DFFF8FFFF7D52FFFFFF7DF8F8F8FFF8F8F8FFFF
%FF27F8A8FF27A8590B2D83FD32FFA8052D58FFF8FFFFF827FFFFFF52F8F8
%52FF7DF8F8277D27F8F852FF277D7D0B0458FD32FFA80B052DFFF8FF7DF8
%F8275252F8F852FD04FF5227527DF8F8F8A827A859050B83FD32FFA8052D
%58FFF8A827F8F87D7D27527DFD09FFA8FD04F87D7D0B0458FD32FFA80B04
%2DFFF827F8F852FD0EFF7DF8F82727A859052D83FD32FFA80B2D58FFF827
%F8F852FD09FF7D27F82727F8F8F8A8277D7D0B0559FD32FFA80B042DFFF8
%FFF8F8F85227F8F87DA8FFFF52F8F852A87DF8F852FF27A859052D83FD32
%FFA8050B58FFF8FFA8F8F827A87D27F827A87DF8F827FFFFFF52F8FFFF27
%7D7D0B0458FD32FFA80B042DFFF8FFFF2727FFFFFF52F8F85252F8F852FD
%04FF52FFFF27A8590B2D83FD32FFA8052D58FFF8FFFF7DA8FFFFFFA8FD06
%F87DFD04FF7DFFFF277D7D0B0458FD32FFA80B052DFFF8FFFFA8A8FFFFFF
%7DFD06F852FD07FF27A859050B83FD32FFA8052D58FFF8FD07FFA8FD06F8
%7DFFFFFF7D27FFFF277D7D0B0458FD32FFA80B042DFFF8FFFF7D27FFFFFF
%7DF8F8F852F8F852FFFF7DF8F852FF27A859052D83FD32FFA80B2D58FFF8
%FFA8F8F827FFFFA8F8F827A8F8F827FFFF7DF8F827FF277D7D0B0559FD32
%FFA80B042DFFF8FF27F8F852FFFF52F8F87DFF7DF8F852A87DF8F87DFF27
%A859052D83FD32FFA8050B58FFF8FFA8F8F852FF7DF8F852FFFFFFA827F8
%F8F8277DFFFF277D7D0B0452FD32FFA804040BFFF8FFFFA85227F827F8A8
%FD04FF52F8F85227F852FFFF27A8590B2D83FD32FFA8052D58FFF8FFFF52
%27F852F8F827A8FFFF27F8F8A8FFA8F8F852FF277D7D0B0458FD32FFA80B
%052DFFF8FF52F8F87DFFFFF8F8F8A87DF8F827FFFF7DF8F8F8FF27A85905
%0B83FD32FFA8052D58FFF8FF52F8F827FFFF7DF8F82727F8F87DFFFFA8F8
%F8A8FF277D7D0B0458FD32FFA80B042DFFF8FFA827F87DFFFF7DFD06F852
%FD04FFA8FFFF27A859052D83FD32FFA80B2D58FFF8FFFFFFA8FFFFFFA8FD
%06F87DFD07FF277D7D0B0559FD32FFA80B042DFFF8FD07FF7DF8F8F827F8
%F852FD04FF7DFFFF27A859052D83FD32FFA8050B58FFF8FFFF7DA8FFFFFF
%A8F8F8F852F8F852FFFFFFA8F8FFFF277D7D0B0458FD32FFA80B042DFFF8
%FFFF5252FFFFFF7DF8F827FFF8F8F8FFFFFF27F8A8FF27A8590B2D83FD32
%FFA8052D58FFF8FFFFF827A8FFFF52F8F87DFFA8F8F8F827F8F8F827FF27
%7D7D0B0458FD32FFA80B052DFFF8FF52F8F8F82727F8F87DFD04FF7D7D7D
%A827F8F87D27A859050B83FD32FFA8052D58FFF8A827F827A8A8527DA8FD
%09FFA8FD04F87D7D0B0458FD32FFA80B042DFFFD04F852FD0BFFA8FFFF52
%F8F85227A859052D83FD32FFA80B2D58FFF87DF8F827FFFFA8FD06FF52FD
%06F827A8277D7D0B0559FD32FFA80B042DFFF8FF27FD06F827A8FFFF27F8
%F87DFFA8F8F87DFF27A859052D83FD32FFA8050B58FFF8FFFFF8F87DFFA8
%27F827A87DF8F827FFFFFF7DF8FFFF277D7D0B0458FD32FFA80B042DFFF8
%FFFF5227FFFFFF52F8F82752F8F852FD04FF52FFFF27A8590B2D83FD32FF
%A8052D58FFF8FFFF7DA8FFFFFFA8FD06F87DFD04FFA8FFFF277D7D0B0458
%FD32FFA80B052DFFF8FFFFFFA8FFFFFF7DFD06F852FD07FF27A859050B83
%FD32FFA8052D58FFF8FD07FFA8F8F8F827F8F87DFFFFA85227FFFF277D7D
%0B0458FD32FFA80B042DFFF8FFFF52F8A8FFFF7DF8F8F852F8F852FFFF7D
%F8F827FF27A859052D83FD32FFA80B2D58FFF8FF7DF8F827FFFF7DF8F827
%A8F8F8F8A8FFA8F8F827FF277D7D0B0559FD32FFA80B042DFFF8FF52F8F8
%7DFFFF27F8F8A8FFA827F8277D52F827A8FF27A859052D83FD32FFA8050B
%58FFF8FFFF27F852A827F8F87DFFFFFF7D272727527DA8FFFF277D580405
%047D587D587D587D587D587D587D587D587D587D587D587D587D2D7D587D
%587D587D587D587D587D587D587D587D587D587D5858040505FFF8FFFFFF
%7D7D275227A8FFFFFF5227F8F827FD05FF27A8590B2D342D0B2D052D0B2D
%052D0B2D052D0B2D052D0B2D052D0B2D052D0B2D052D0B2D052D0B2D052D
%0B2D052D0B2D052D0B2D052D0B0B052D58FFF8FD05FFA8F8F82752FF7D27
%FF52F827FD05FF277D7D0B0404050B040B050B040B050B040B050B040B05
%0B040B050B040B050B040B050B040B050B040B050B040B050B040B050B04
%0B050B040B052DFFF8FD05FF7DF8F8FF52272727FD09FF27A859050B342D
%050B052D050B052D050B052D050B052D050B052D050B052D050B052D050B
%052D050B052D050B052D050B052D050B052D050B052D58FFF8FD04FFA8FF
%A8A8FFA8F8F8F8A8FFFFFFA8277DFFFF272752527D7DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA852A87DA87DA87DA87DA87DA87D
%A87DA87DA87DA87DA87DA87DA87DA87DA8F8FFFFFF2727FD04FF27F827F8
%27FD04FF27F8F852275227522752275227522752275227522727F8522752
%275227522752275227522752275227522752275227272752275227522752
%2752275227522752FD0427F8F852FFFFFF52F8F852F8F827A8FFFF52F8F8
%F827FD10FF27F852FD16FFA8F8F87DFD0FFF52FD04F87DFFFF52F8F8F8FF
%F8F8F8277D7DF8FF7DF8F8FD05FFA827F8A8FD05FF7DFD04F827A8FD05FF
%52F87DFFFF7D2727FD05FFA852FD04F852FD05FFA827F87DFD05FF52F852
%A85252A827F8F8F87DFFA8FD05F8A8FFFFF8F87DFFFFFFA827F8F8F8A8FF
%7D27FD09F827A8FF52F8F8F8527DF8F8F827A8FF5227FD08F82752FFA827
%F8F8F8A8FD04FFF8F87DFFA827FD04F87DFFA82752277D7DFFFFFF27F8F8
%52FFFFFFA8F827F8F87DFFFFFF52F8F87DA852F8277DFFFFFF27F8F827F8
%52FD04F8A8FFFFA827F827A8A827F852A8FFFFFFF8F8F82752FFFFFF5227
%52277DFFFFA8527D275252527D52F8FD04FFF87DA8A852FFFFFF5252A852
%52FD05FF5227FFFFA8F8A8FD04FFA8527DA8F8F8A87D527DFD05FFF87DFF
%FF5227FD05FF7D52A87D27FFFFFF7DFFFFA8F87DFFFFFF2727A8277D7DFF
%F8A8FFFF7DF87DFFFFFFA87D52277DFD08FFA8F8FFFFA827FD09FFF8F8FD
%09FF7D52FFFF5252FD08FFA8F85227A8FD04FFF852FFFFFF277DFF52FFA8
%F827A8FFFF7DF827A8FFFFA8F8F82727A8FD07FF52F8FFFF52F8A8FD07FF
%52F8F852A8FD07FF2727FFFF2727A8FD07FF2727F8F87DFFFFFF27F827FF
%A8A852F852FFFFFF272752F8F827F8F827FFFFA852F852F8F8277D527D52
%52F8F827FFFFFFF8F8277D527D527D27F8F852F827527D527D5252F8F852
%FFFF52F827277D527D5252F8F827F827FFFFFF52F8F852F8F82752F8FFFF
%FF7DF8F8F8FF5227F8F8F827A8FFA827A827FD09F87DFFFFFF27FD09F87D
%7DFD0AF8A8FFFFA8FD0AF8A827A8FFFF27F8F8F87D27A827F82727FFFFFF
%7DFFA87D7D27A8F8F8F82752277DFFA827FD07F852FD04FFA827FD07F852
%FFFF7DFD08F8A8FD04FF7D27FD07F87DFFA8F827FD04F87D7D527DA8FFFF
%A8FD06FF7D277DFFA827F8F8F852FFFFFFA87D27F8F8F827A8FD06FFA87D
%27F8F82727A8FD04FFA85227F8F82752A8FD06FFA852F8F8F82752FD04FF
%A827F8F852A8FFA87D27FD04FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(New Pattern 3)
0 A
u800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
-7894 8612 m
-7865.2222 8612 L
-7865.2222 8593.3203 L
-7894 8593.3203 L
-7894 8612 L
nu0 O
1 0.55 1 0 (Cert2.color1) 0 x
-7894 8612 m
-7894 8608.7578 L
-7865.2222 8608.7578 L
-7865.2222 8612 L
-7894 8612 L
f0 0 0 1 (Cert2.color2) 0 x
-7865.2222 8607.1221 m
-7894 8607.1221 L
-7894 8606.0967 L
-7879.8657 8606.0967 L
-7881.166 8603.9629 -7884.5586 8603.0205 -7886.2544 8602.6602 C
-7886.2544 8602.6045 L
-7884.5874 8602.4102 -7882.438 8601.5234 -7882.269 8599.667 C
-7882.0142 8596.8125 -7885.8594 8597.0059 -7887.8086 8596.9785 C
-7890.3818 8596.9229 -7892.8975 8597.1445 -7893.1519 8600.1104 C
-7893.209 8600.6094 -7893.0674 8601.7451 -7892.333 8601.7451 C
-7892.1064 8601.7451 -7891.8799 8601.4404 -7891.5977 8601.1641 C
-7891.2866 8600.8584 -7890.8911 8600.5811 -7890.2407 8600.5811 C
-7889.1094 8600.5811 -7888.4878 8601.4688 -7888.4878 8602.4941 C
-7888.4878 8603.5742 -7889.4775 8604.3789 -7890.5791 8604.3789 C
-7893.2368 8604.3789 -7894 8601.3301 -7894 8599.3066 C
-7894 8595.7314 -7891.3154 8593.3203 -7887.272 8593.3477 C
-7884.0786 8593.375 -7881.4487 8595.3154 -7881.166 8598.4199 C
-7881.0815 8599.251 -7881.251 8600.1934 -7881.7041 8601.2744 C
-7879.6113 8602.5488 L
-7877.5479 8601.2744 L
-7878 8600.1934 -7878.1694 8599.251 -7878.085 8598.4199 C
-7877.8022 8595.3154 -7875.145 8593.375 -7871.9502 8593.3203 C
-7867.936 8593.3203 -7865.2222 8595.7314 -7865.2222 8599.3066 C
-7865.2222 8601.3574 -7866.042 8604.3789 -7868.6714 8604.3789 C
-7869.7734 8604.3789 -7870.791 8603.5742 -7870.791 8602.4941 C
-7870.791 8601.4688 -7870.1406 8600.5811 -7869.0103 8600.5811 C
-7868.3882 8600.5811 -7867.9648 8600.8584 -7867.6538 8601.1641 C
-7867.3706 8601.4404 -7867.145 8601.7451 -7866.8906 8601.7451 C
-7866.2119 8601.7451 -7866.042 8600.5811 -7866.042 8600.1104 C
-7866.042 8597.1445 -7869.293 8596.9229 -7871.583 8596.9785 C
-7873.5327 8597.0059 -7877.2368 8596.8672 -7876.9824 8599.667 C
-7876.813 8601.5234 -7874.665 8602.4102 -7872.9678 8602.6045 C
-7872.9678 8602.6602 L
-7874.749 8603.0205 -7878 8603.9346 -7879.3857 8606.0967 C
-7865.2222 8606.0967 L
-7865.2222 8607.1221 L
fUU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 4)
0 A
u800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
-7894 8612 m
-7874.981 8612 L
-7874.981 8593.3418 L
-7894 8593.3418 L
-7894 8612 L
nu0 O
0 0 0 1 (Cert2.color2) 0 x
-7878.9976 8600.8145 m
-7879.0288 8600.7842 L
-7880.0801 8601.5996 -7881.7754 8602.2773 -7882.9209 8601.3379 C
-7884.6479 8599.9219 -7882.5127 8597.9834 -7881.4458 8596.9063 C
-7880.2065 8595.6289 -7878.2754 8593.9824 -7876.5962 8595.6289 C
-7876.3286 8595.8906 -7875.7642 8596.6289 -7876.1406 8596.998 C
-7876.2822 8597.1367 -7876.5801 8597.0908 -7876.894 8597.0908 C
-7877.2402 8597.0908 -7877.6318 8597.168 -7877.9766 8597.5059 C
-7878.605 8598.1221 -7878.4634 8598.9688 -7877.8833 8599.5371 C
-7877.2705 8600.1377 -7876.2505 8600.0303 -7875.6382 8599.4297 C
-7874.9482 8598.7148 -7874.9258 8597.8262 -7875.1343 8596.9736 C
-7875.4111 8596.1211 -7876.0151 8595.3066 -7876.5962 8594.7363 C
-7878.6206 8592.752 -7881.4927 8592.8906 -7883.7217 8595.0752 C
-7885.4639 8596.8447 -7885.8398 8599.3691 -7884.2402 8601.2461 C
-7883.8159 8601.7539 -7883.188 8602.1846 -7882.3247 8602.5381 C
-7882.749 8604.3691 L
-7884.6318 8604.7998 L
-7884.9927 8603.9531 -7885.4326 8603.3379 -7885.9502 8602.9229 C
-7887.8657 8601.3535 -7890.4238 8601.707 -7892.2129 8603.4307 C
-7894.4727 8605.6152 -7894.5986 8608.416 -7892.5737 8610.4014 C
-7892.001 8610.9629 -7891.1777 8611.5625 -7890.311 8611.8418 C
-7889.4463 8612.0537 -7888.54 8612.0352 -7887.8022 8611.3555 C
-7887.1904 8610.7549 -7887.0962 8609.7705 -7887.708 8609.1699 C
-7888.2886 8608.6016 -7889.1367 8608.4473 -7889.7642 8609.0625 C
-7890.125 8609.416 -7890.188 8609.7852 -7890.188 8610.124 C
-7890.188 8610.4316 -7890.1406 8610.7246 -7890.2666 8610.8477 C
-7890.6753 8611.248 -7891.397 8610.6934 -7891.6479 8610.3857 C
-7893.186 8608.6016 -7891.9146 8607.1084 -7890.4546 8605.7383 C
-7889.3569 8604.6924 -7887.3311 8602.4922 -7885.856 8604.2148 C
-7884.8994 8605.3389 -7885.5898 8607 -7886.4058 8608.0156 C
-7886.374 8608.0469 L
-7885.2529 8607.3389 -7882.9121 8606.0566 -7881.0034 8606.4512 C
-7881.0015 8612 L
-7879.9551 8612 L
-7879.9551 8607.1211 L
-7874.9814 8607.1211 L
-7874.9814 8606.0957 L
-7880.6382 8606.0957 L
-7881.0161 8604.1689 -7879.7666 8601.9609 -7878.9976 8600.8145 C
f1 0.55 1 0 (Cert2.color1) 0 x
-7874.981 8612 m
-7874.981 8608.7578 L
-7878.2881 8608.7578 L
-7878.2881 8612 L
-7874.981 8612 L
f0 0 0 1 (Cert2.color2) 0 x
-7885.3218 8594.1338 m
-7885.8882 8593.5781 -7886.9526 8592.9453 -7887.6826 8593.6621 C
-7887.9858 8593.959 -7888.0327 8594.4463 -7887.7295 8594.7432 C
-7887.4414 8595.0254 -7887.0225 8595.1016 -7886.7119 8594.7969 C
-7886.5327 8594.6211 -7886.502 8594.4385 -7886.502 8594.2715 C
-7886.502 8594.1191 -7886.5254 8593.9736 -7886.4634 8593.9131 C
-7886.2607 8593.7148 -7885.9038 8593.9893 -7885.7793 8594.1416 C
-7885.0186 8595.0254 -7885.647 8595.7637 -7886.3706 8596.4414 C
-7886.9136 8596.959 -7887.916 8598.0488 -7888.646 8597.1953 C
-7889.1201 8596.6396 -7888.7783 8595.8164 -7888.374 8595.3145 C
-7888.3896 8595.2988 L
-7888.9102 8595.627 -7889.959 8596.2051 -7890.8662 8596.1162 C
-7890.8105 8596.0137 -7890.7793 8595.8975 -7890.7793 8595.7734 C
-7890.7793 8595.373 -7891.1104 8595.0479 -7891.519 8595.0479 C
-7891.9282 8595.0479 -7892.2593 8595.373 -7892.2593 8595.7734 C
-7892.2593 8596.1748 -7891.9282 8596.5 -7891.519 8596.5 C
-7891.4063 8596.5 -7891.2998 8596.4746 -7891.2041 8596.4297 C
-7891.1118 8597.3418 -7891.6826 8598.3438 -7892.041 8598.8789 C
-7892.0249 8598.8936 L
-7891.5049 8598.4902 -7890.666 8598.1553 -7890.0986 8598.6191 C
-7889.2441 8599.3203 -7890.3008 8600.2803 -7890.8286 8600.8125 C
-7891.4424 8601.4453 -7892.3984 8602.2598 -7893.2295 8601.4453 C
-7893.3618 8601.3154 -7893.6406 8600.9502 -7893.4546 8600.7676 C
-7893.3848 8600.6992 -7893.2368 8600.7217 -7893.082 8600.7217 C
-7892.9111 8600.7217 -7892.7168 8600.6836 -7892.5454 8600.5156 C
-7892.2354 8600.2109 -7892.3047 8599.793 -7892.5918 8599.5107 C
-7892.895 8599.2139 -7893.3999 8599.2676 -7893.7031 8599.5645 C
-7894.4258 8600.2725 -7893.8042 8601.3232 -7893.2295 8601.8867 C
-7892.2271 8602.8691 -7890.8057 8602.8008 -7889.7026 8601.7188 C
-7888.8398 8600.8438 -7888.6538 8599.5947 -7889.4463 8598.665 C
-7889.6558 8598.4141 -7889.9663 8598.2012 -7890.394 8598.0254 C
-7890.1841 8597.1191 L
-7889.252 8596.9063 L
-7889.0737 8597.3242 -7888.856 8597.6299 -7888.6001 8597.835 C
-7887.6519 8598.6113 -7886.3857 8598.4365 -7885.5 8597.584 C
-7884.3818 8596.502 -7884.3193 8595.1162 -7885.3218 8594.1338 C
fUU%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
0 0 0 0 k
(white) Pc
0 0 0 1 k
(black) Pc
1 0 0 0 k
(cyan) Pc
0 1 0 0 k
(magenta) Pc
0 0 1 0 k
(yellow) Pc
0 1 1 0 k
(red) Pc
1 0 1 0 k
(green) Pc
1 1 0 0 k
(blue) Pc
0.5 0.4 0.3 0 (blue gray) 0 0 Xk
(blue gray) Pc
0.4 0.4 0.4 0 (Gray) 0 0 Xk
(Gray) Pc
0 0.1 1 0 (warm yellow) 0 0 Xk
(warm yellow) Pc
0.4 0.7 1 0 (Rusty Brown) 0 0 Xk
(Rusty Brown) Pc
0.5 0.85 1 0 (Brown) 0 0 Xk
(Brown) Pc
1 0.55 1 0 (Forest Green) 0 0 Xk
(Forest Green) Pc
1 0 0.55 0 (Aqua) 0 0 Xk
(Aqua) Pc
0.75 0.05 1 0 (fresh green) 0 0 Xk
(fresh green) Pc
0.45 0 1 0 (Lime Green) 0 0 Xk
(Lime Green) Pc
0.2 0 1 0 (Yellow Green) 0 0 Xk
(Yellow Green) Pc
0 0.25 1 0 (Orange Yellow) 0 0 Xk
(Orange Yellow) Pc
0 0.5 1 0 (orange) 0 0 Xk
(orange) Pc
0 0.45 0.6 0 (Peach) 0 0 Xk
(Peach) Pc
0 0.7 1 0 (Orange Red) 0 0 Xk
(Orange Red) Pc
0 0.9 1 0 (Saturn Red) 0 0 Xk
(Saturn Red) Pc
0.25 1 0.25 0 (Violet Red) 0 0 Xk
(Violet Red) Pc
0.45 0.9 0 0 (violet) 0 0 Xk
(violet) Pc
0.75 0.9 0 0 (dark violet) 0 0 Xk
(dark violet) Pc
1 0.9 0.1 0 (Dark Blue) 0 0 Xk
(Dark Blue) Pc
1 0.75 0 0 (night blue) 0 0 Xk
(night blue) Pc
1 0.5 0 0 (ocean blue) 0 0 Xk
(ocean blue) Pc
1 0.4 0.15 0 (Turquoise) 0 0 Xk
(Turquoise) Pc
0.8 0.05 0 0 (blue sky) 0 0 Xk
(blue sky) Pc
1 0.55 1 0 (Cert2.color1) 0 x
(Cert2.color1) Pc
0 0 0 1 (Cert2.color2) 0 x
(Cert2.color2) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Pattern Brush 1)
(1 / New Pattern 3/ / New Pattern 4/ / / 5 0.14902 0.133333 0.121569 / ) -
( 1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe PatternOnPath Brush Tool/ Pattern Brush 1/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
%_u%_1 Ap
%_0 R
%_0 0 0 1 (Cert2.color2) 0 X
%_800 Ar
%_0 J 0 j 1.7474 w 1 M []0 d%_%AI3_Note:%_0 D
%_0 XR
%_381.501 504.3647 m
%_246.2134 504.3647 L
%_246.2134 727.0645 L
%_381.501 727.0645 L
%_381.501 504.3647 L
%_s%_U%_0 Ap
0 A
u1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
381.501 504.3647 m
246.2134 504.3647 L
246.2134 727.0645 L
381.501 727.0645 L
381.501 504.3647 L
nu0 Ap
0 O
1 0.55 1 0 (Cert2.color1) 0 x
262.5337 520.6851 m
256.8682 520.6851 L
256.8682 568.1997 L
262.5337 568.1997 L
262.5337 520.6851 L
f0 0 0 1 (Cert2.color2) 0 x
254.0103 568.1997 m
254.0103 520.6851 L
252.2183 520.6851 L
252.2183 544.022 L
248.4897 541.875 246.8433 536.2734 246.2134 533.4736 C
246.1162 533.4736 L
245.7764 536.2261 244.2271 539.7749 240.9834 540.0537 C
235.9951 540.4746 236.333 534.126 236.2852 530.9077 C
236.188 526.6592 236.5752 522.5054 241.7578 522.0854 C
242.6299 521.9912 244.6143 522.2251 244.6143 523.4375 C
244.6143 523.8115 244.082 524.1855 243.5991 524.6514 C
243.0649 525.165 242.5806 525.8184 242.5806 526.8921 C
242.5806 528.7598 244.1313 529.7861 245.9233 529.7861 C
247.8105 529.7861 249.2168 528.1523 249.2168 526.3335 C
249.2168 521.9453 243.8892 520.6851 240.3535 520.6851 C
234.1064 520.6851 229.8931 525.1177 229.9409 531.7939 C
229.9888 537.0664 233.3794 541.4082 238.8042 541.875 C
240.2563 542.0146 241.9028 541.7349 243.792 540.9868 C
246.019 544.4419 L
243.792 547.8491 L
241.9028 547.1025 240.2563 546.8228 238.8042 546.9624 C
233.3794 547.4292 229.9888 551.8164 229.8931 557.0913 C
229.8931 563.7188 234.1064 568.1997 240.3535 568.1997 C
243.937 568.1997 249.2168 566.8462 249.2168 562.5049 C
249.2168 560.6855 247.8105 559.0054 245.9233 559.0054 C
244.1313 559.0054 242.5806 560.0791 242.5806 561.9453 C
242.5806 562.9727 243.0649 563.6714 243.5991 564.1851 C
244.082 564.6523 244.6143 565.0249 244.6143 565.4453 C
244.6143 566.5654 242.5806 566.8462 241.7578 566.8462 C
236.5752 566.8462 236.188 561.4785 236.2852 557.6978 C
236.333 554.4785 236.0908 548.3628 240.9834 548.7827 C
244.2271 549.0625 245.7764 552.6089 246.1162 555.4111 C
246.2134 555.4111 L
246.8433 552.4702 248.4404 547.1025 252.2183 544.8145 C
252.2183 568.1997 L
254.0103 568.1997 L
fUu1 0.55 1 0 (Cert2.color1) 0 x
262.5337 568.1997 m
256.8682 568.1997 L
256.8682 615.7148 L
262.5337 615.7148 L
262.5337 568.1997 L
f0 0 0 1 (Cert2.color2) 0 x
254.0103 615.7148 m
254.0103 568.1997 L
252.2183 568.1997 L
252.2183 591.5366 L
248.4897 589.3896 246.8433 583.7886 246.2134 580.9883 C
246.1162 580.9883 L
245.7764 583.7407 244.2271 587.2896 240.9834 587.5688 C
235.9951 587.9897 236.333 581.6406 236.2852 578.4224 C
236.188 574.1738 236.5752 570.0205 241.7578 569.6001 C
242.6299 569.5059 244.6143 569.7397 244.6143 570.9521 C
244.6143 571.3262 244.082 571.7002 243.5991 572.1665 C
243.0649 572.6797 242.5806 573.333 242.5806 574.4067 C
242.5806 576.2749 244.1313 577.3008 245.9233 577.3008 C
247.8105 577.3008 249.2168 575.667 249.2168 573.8481 C
249.2168 569.46 243.8892 568.1997 240.3535 568.1997 C
234.1064 568.1997 229.8931 572.6323 229.9409 579.3086 C
229.9888 584.5811 233.3794 588.9229 238.8042 589.3896 C
240.2563 589.5293 241.9028 589.2495 243.792 588.5015 C
246.019 591.957 L
243.792 595.3638 L
241.9028 594.6172 240.2563 594.3374 238.8042 594.4771 C
233.3794 594.9438 229.9888 599.3311 229.8931 604.606 C
229.8931 611.2339 234.1064 615.7148 240.3535 615.7148 C
243.937 615.7148 249.2168 614.3608 249.2168 610.0195 C
249.2168 608.2002 247.8105 606.52 245.9233 606.52 C
244.1313 606.52 242.5806 607.5938 242.5806 609.46 C
242.5806 610.4873 243.0649 611.186 243.5991 611.6997 C
244.082 612.1675 244.6143 612.54 244.6143 612.96 C
244.6143 614.0806 242.5806 614.3608 241.7578 614.3608 C
236.5752 614.3608 236.188 608.9932 236.2852 605.2124 C
236.333 601.9932 236.0908 595.8774 240.9834 596.2974 C
244.2271 596.5771 245.7764 600.1235 246.1162 602.9258 C
246.2134 602.9258 L
246.8433 599.9849 248.4404 594.6172 252.2183 592.3291 C
252.2183 615.7148 L
254.0103 615.7148 L
fUu1 0.55 1 0 (Cert2.color1) 0 x
262.5337 615.7148 m
256.8682 615.7148 L
256.8682 663.2295 L
262.5337 663.2295 L
262.5337 615.7148 L
f0 0 0 1 (Cert2.color2) 0 x
254.0103 663.2295 m
254.0103 615.7148 L
252.2183 615.7148 L
252.2183 639.0518 L
248.4897 636.9048 246.8433 631.3032 246.2134 628.5034 C
246.1162 628.5034 L
245.7764 631.2559 244.2271 634.8047 240.9834 635.0835 C
235.9951 635.5044 236.333 629.1553 236.2852 625.937 C
236.188 621.6885 236.5752 617.5352 241.7578 617.1152 C
242.6299 617.0205 244.6143 617.2544 244.6143 618.4668 C
244.6143 618.8408 244.082 619.2148 243.5991 619.6812 C
243.0649 620.1948 242.5806 620.8477 242.5806 621.9214 C
242.5806 623.7896 244.1313 624.8159 245.9233 624.8159 C
247.8105 624.8159 249.2168 623.1816 249.2168 621.3628 C
249.2168 616.9746 243.8892 615.7148 240.3535 615.7148 C
234.1064 615.7148 229.8931 620.147 229.9409 626.8232 C
229.9888 632.0957 233.3794 636.438 238.8042 636.9048 C
240.2563 637.0439 241.9028 636.7642 243.792 636.0161 C
246.019 639.4717 L
243.792 642.8784 L
241.9028 642.1318 240.2563 641.8525 238.8042 641.9917 C
233.3794 642.4585 229.9888 646.8457 229.8931 652.1206 C
229.8931 658.7485 234.1064 663.2295 240.3535 663.2295 C
243.937 663.2295 249.2168 661.876 249.2168 657.5342 C
249.2168 655.7148 247.8105 654.0347 245.9233 654.0347 C
244.1313 654.0347 242.5806 655.1084 242.5806 656.9746 C
242.5806 658.002 243.0649 658.7012 243.5991 659.2144 C
244.082 659.6821 244.6143 660.0547 244.6143 660.4746 C
244.6143 661.5952 242.5806 661.876 241.7578 661.876 C
236.5752 661.876 236.188 656.5083 236.2852 652.7271 C
236.333 649.5078 236.0908 643.3921 240.9834 643.812 C
244.2271 644.0918 245.7764 647.6382 246.1162 650.4404 C
246.2134 650.4404 L
246.8433 647.4995 248.4404 642.1318 252.2183 639.8442 C
252.2183 663.2295 L
254.0103 663.2295 L
fUu1 0.55 1 0 (Cert2.color1) 0 x
262.5337 663.2295 m
256.8682 663.2295 L
256.8682 710.7441 L
262.5337 710.7441 L
262.5337 663.2295 L
f0 0 0 1 (Cert2.color2) 0 x
254.0103 710.7441 m
254.0103 663.2295 L
252.2183 663.2295 L
252.2183 686.5664 L
248.4897 684.4194 246.8433 678.8179 246.2134 676.0181 C
246.1162 676.0181 L
245.7764 678.7705 244.2271 682.3193 240.9834 682.5981 C
235.9951 683.019 236.333 676.6704 236.2852 673.4521 C
236.188 669.2031 236.5752 665.0498 241.7578 664.6299 C
242.6299 664.5352 244.6143 664.769 244.6143 665.9814 C
244.6143 666.356 244.082 666.73 243.5991 667.1958 C
243.0649 667.7095 242.5806 668.3623 242.5806 669.436 C
242.5806 671.3042 244.1313 672.3306 245.9233 672.3306 C
247.8105 672.3306 249.2168 670.6963 249.2168 668.8774 C
249.2168 664.4893 243.8892 663.2295 240.3535 663.2295 C
234.1064 663.2295 229.8931 667.6616 229.9409 674.3379 C
229.9888 679.6104 233.3794 683.9526 238.8042 684.4194 C
240.2563 684.5586 241.9028 684.2793 243.792 683.5308 C
246.019 686.9863 L
243.792 690.3936 L
241.9028 689.647 240.2563 689.3672 238.8042 689.5063 C
233.3794 689.9731 229.9888 694.3604 229.8931 699.6357 C
229.8931 706.2632 234.1064 710.7441 240.3535 710.7441 C
243.937 710.7441 249.2168 709.3906 249.2168 705.0493 C
249.2168 703.2295 247.8105 701.5493 245.9233 701.5493 C
244.1313 701.5493 242.5806 702.623 242.5806 704.4897 C
242.5806 705.5166 243.0649 706.2158 243.5991 706.7295 C
244.082 707.1968 244.6143 707.5693 244.6143 707.9893 C
244.6143 709.1099 242.5806 709.3906 241.7578 709.3906 C
236.5752 709.3906 236.188 704.0229 236.2852 700.2417 C
236.333 697.0225 236.0908 690.9067 240.9834 691.3267 C
244.2271 691.6064 245.7764 695.1533 246.1162 697.9556 C
246.2134 697.9556 L
246.8433 695.0146 248.4404 689.647 252.2183 687.3589 C
252.2183 710.7441 L
254.0103 710.7441 L
fUu1 0.55 1 0 (Cert2.color1) 0 x
262.5337 710.7441 m
262.5337 716.4097 L
313.8574 716.4097 L
313.8574 710.7441 L
262.5337 710.7441 L
f0 0 0 1 (Cert2.color2) 0 x
313.8574 719.2676 m
262.5337 719.2676 L
262.5337 721.0596 L
287.7412 721.0596 L
285.4224 724.7881 279.3721 726.4346 276.3477 727.0645 C
276.3477 727.1616 L
279.3203 727.5015 283.1538 729.0508 283.4551 732.2949 C
283.9097 737.2827 277.0522 736.9448 273.5757 736.9927 C
268.9863 737.0898 264.5 736.7021 264.0464 731.52 C
263.9443 730.6479 264.1968 728.6636 265.5068 728.6636 C
265.9106 728.6636 266.3149 729.1958 266.8184 729.6787 C
267.373 730.2129 268.0781 730.6973 269.2383 730.6973 C
271.2559 730.6973 272.3643 729.1465 272.3643 727.3545 C
272.3643 725.4673 270.5991 724.061 268.6348 724.061 C
263.895 724.061 262.5337 729.3887 262.5337 732.9243 C
262.5337 739.1719 267.3213 743.3848 274.5327 743.3369 C
280.228 743.2891 284.918 739.8984 285.4224 734.4736 C
285.5732 733.0215 285.271 731.375 284.4629 729.4858 C
288.1948 727.2588 L
291.875 729.4858 L
291.0688 731.375 290.7666 733.0215 290.917 734.4736 C
291.4214 739.8984 296.1602 743.2891 301.8584 743.3848 C
309.0176 743.3848 313.8574 739.1719 313.8574 732.9243 C
313.8574 729.3408 312.3955 724.061 307.7061 724.061 C
305.7402 724.061 303.9258 725.4673 303.9258 727.3545 C
303.9258 729.1465 305.085 730.6973 307.1016 730.6973 C
308.2109 730.6973 308.9658 730.2129 309.5205 729.6787 C
310.0254 729.1958 310.4277 728.6636 310.8818 728.6636 C
312.0918 728.6636 312.3955 730.6973 312.3955 731.52 C
312.3955 736.7021 306.5977 737.0898 302.5127 736.9927 C
299.0361 736.9448 292.4297 737.187 292.8833 732.2949 C
293.1855 729.0508 297.0166 727.5015 300.043 727.1616 C
300.043 727.0645 L
296.8667 726.4346 291.0688 724.8374 288.5972 721.0596 C
313.8574 721.0596 L
313.8574 719.2676 L
fUu1 0.55 1 0 (Cert2.color1) 0 x
313.8574 710.7441 m
313.8574 716.4097 L
365.1807 716.4097 L
365.1807 710.7441 L
313.8574 710.7441 L
f0 0 0 1 (Cert2.color2) 0 x
365.1807 719.2676 m
313.8574 719.2676 L
313.8574 721.0596 L
339.0645 721.0596 L
336.7461 724.7881 330.6953 726.4346 327.6709 727.0645 C
327.6709 727.1616 L
330.6436 727.5015 334.4775 729.0508 334.7783 732.2949 C
335.2334 737.2827 328.375 736.9448 324.8994 736.9927 C
320.3096 737.0898 315.8232 736.7021 315.3701 731.52 C
315.2676 730.6479 315.5205 728.6636 316.8301 728.6636 C
317.2344 728.6636 317.6387 729.1958 318.1416 729.6787 C
318.6963 730.2129 319.4014 730.6973 320.5615 730.6973 C
322.5791 730.6973 323.6875 729.1465 323.6875 727.3545 C
323.6875 725.4673 321.9229 724.061 319.958 724.061 C
315.2188 724.061 313.8574 729.3887 313.8574 732.9243 C
313.8574 739.1719 318.6445 743.3848 325.8564 743.3369 C
331.5518 743.2891 336.2412 739.8984 336.7461 734.4736 C
336.8965 733.0215 336.5938 731.375 335.7861 729.4858 C
339.5186 727.2588 L
343.1982 729.4858 L
342.3926 731.375 342.0898 733.0215 342.2402 734.4736 C
342.7451 739.8984 347.4834 743.2891 353.1816 743.3848 C
360.3408 743.3848 365.1807 739.1719 365.1807 732.9243 C
365.1807 729.3408 363.7188 724.061 359.0293 724.061 C
357.0635 724.061 355.249 725.4673 355.249 727.3545 C
355.249 729.1465 356.4092 730.6973 358.4248 730.6973 C
359.5342 730.6973 360.2891 730.2129 360.8438 729.6787 C
361.3486 729.1958 361.751 728.6636 362.2051 728.6636 C
363.415 728.6636 363.7188 730.6973 363.7188 731.52 C
363.7188 736.7021 357.9209 737.0898 353.8369 736.9927 C
350.3594 736.9448 343.7529 737.187 344.207 732.2949 C
344.5088 729.0508 348.3398 727.5015 351.3672 727.1616 C
351.3672 727.0645 L
348.1904 726.4346 342.3926 724.8374 339.9209 721.0596 C
365.1807 721.0596 L
365.1807 719.2676 L
fUu1 0.55 1 0 (Cert2.color1) 0 x
365.1807 710.7441 m
370.8457 710.7441 L
370.8457 663.2295 L
365.1807 663.2295 L
365.1807 710.7441 L
f0 0 0 1 (Cert2.color2) 0 x
373.7041 663.2295 m
373.7041 710.7441 L
375.4961 710.7441 L
375.4961 687.4072 L
379.2246 689.5542 380.8711 695.1553 381.501 697.9556 C
381.5986 697.9556 L
381.9375 695.2031 383.4873 691.6543 386.7314 691.375 C
391.7188 690.9546 391.3809 697.3032 391.4287 700.5215 C
391.5264 704.77 391.1387 708.9238 385.9561 709.3438 C
385.085 709.438 383.0996 709.2041 383.0996 707.9917 C
383.0996 707.6177 383.6328 707.2437 384.1152 706.7773 C
384.6494 706.2642 385.1338 705.6108 385.1338 704.5371 C
385.1338 702.6694 383.583 701.6431 381.791 701.6431 C
379.9033 701.6431 378.498 703.2773 378.498 705.0957 C
378.498 709.4839 383.8252 710.7441 387.3613 710.7441 C
393.6084 710.7441 397.8213 706.3115 397.7734 699.6357 C
397.7256 694.3628 394.335 690.021 388.9102 689.5542 C
387.458 689.4146 385.8115 689.6943 383.9229 690.4424 C
381.6953 686.9873 L
383.9229 683.5801 L
385.8115 684.3267 387.458 684.6064 388.9102 684.4668 C
394.335 684 397.7256 679.6128 397.8213 674.3379 C
397.8213 667.71 393.6084 663.2295 387.3613 663.2295 C
383.7773 663.2295 378.498 664.583 378.498 668.9243 C
378.498 670.7441 379.9033 672.4238 381.791 672.4238 C
383.583 672.4238 385.1338 671.3501 385.1338 669.4839 C
385.1338 668.4565 384.6494 667.7578 384.1152 667.2441 C
383.6328 666.7764 383.0996 666.4043 383.0996 665.9844 C
383.0996 664.8633 385.1338 664.583 385.9561 664.583 C
391.1387 664.583 391.5264 669.9507 391.4287 673.7314 C
391.3809 676.9507 391.624 683.0664 386.7314 682.6465 C
383.4873 682.3667 381.9375 678.8203 381.5986 676.0181 C
381.501 676.0181 L
380.8711 678.959 379.2744 684.3267 375.4961 686.6147 C
375.4961 663.2295 L
373.7041 663.2295 L
fUu1 0.55 1 0 (Cert2.color1) 0 x
365.1807 663.2295 m
370.8457 663.2295 L
370.8457 615.7148 L
365.1807 615.7148 L
365.1807 663.2295 L
f0 0 0 1 (Cert2.color2) 0 x
373.7041 615.7148 m
373.7041 663.2295 L
375.4961 663.2295 L
375.4961 639.8926 L
379.2246 642.0391 380.8711 647.6406 381.501 650.4404 C
381.5986 650.4404 L
381.9375 647.6885 383.4873 644.1396 386.7314 643.8604 C
391.7188 643.4395 391.3809 649.7886 391.4287 653.0068 C
391.5264 657.2554 391.1387 661.4092 385.9561 661.8291 C
385.085 661.9233 383.0996 661.6895 383.0996 660.4771 C
383.0996 660.103 383.6328 659.729 384.1152 659.2627 C
384.6494 658.7495 385.1338 658.0962 385.1338 657.0225 C
385.1338 655.1543 383.583 654.1284 381.791 654.1284 C
379.9033 654.1284 378.498 655.7622 378.498 657.5811 C
378.498 661.9692 383.8252 663.2295 387.3613 663.2295 C
393.6084 663.2295 397.8213 658.7969 397.7734 652.1206 C
397.7256 646.8481 394.335 642.5059 388.9102 642.0391 C
387.458 641.8999 385.8115 642.1797 383.9229 642.9277 C
381.6953 639.4722 L
383.9229 636.0654 L
385.8115 636.812 387.458 637.0918 388.9102 636.9521 C
394.335 636.4854 397.7256 632.0981 397.8213 626.8232 C
397.8213 620.1953 393.6084 615.7148 387.3613 615.7148 C
383.7773 615.7148 378.498 617.0684 378.498 621.4097 C
378.498 623.229 379.9033 624.9092 381.791 624.9092 C
383.583 624.9092 385.1338 623.8354 385.1338 621.9692 C
385.1338 620.9419 384.6494 620.2432 384.1152 619.7295 C
383.6328 619.2617 383.0996 618.8896 383.0996 618.4692 C
383.0996 617.3486 385.1338 617.0684 385.9561 617.0684 C
391.1387 617.0684 391.5264 622.436 391.4287 626.2168 C
391.3809 629.436 391.624 635.5518 386.7314 635.1318 C
383.4873 634.8521 381.9375 631.3057 381.5986 628.5034 C
381.501 628.5034 L
380.8711 631.4443 379.2744 636.812 375.4961 639.1001 C
375.4961 615.7148 L
373.7041 615.7148 L
fUu1 0.55 1 0 (Cert2.color1) 0 x
365.1807 615.7148 m
370.8457 615.7148 L
370.8457 568.1997 L
365.1807 568.1997 L
365.1807 615.7148 L
f0 0 0 1 (Cert2.color2) 0 x
373.7041 568.1997 m
373.7041 615.7148 L
375.4961 615.7148 L
375.4961 592.3779 L
379.2246 594.5244 380.8711 600.126 381.501 602.9258 C
381.5986 602.9258 L
381.9375 600.1738 383.4873 596.6245 386.7314 596.3457 C
391.7188 595.9248 391.3809 602.2734 391.4287 605.4922 C
391.5264 609.7407 391.1387 613.894 385.9561 614.3145 C
385.085 614.4087 383.0996 614.1748 383.0996 612.9624 C
383.0996 612.5884 383.6328 612.2139 384.1152 611.748 C
384.6494 611.2344 385.1338 610.5815 385.1338 609.5078 C
385.1338 607.6396 383.583 606.6133 381.791 606.6133 C
379.9033 606.6133 378.498 608.2476 378.498 610.0664 C
378.498 614.4546 383.8252 615.7148 387.3613 615.7148 C
393.6084 615.7148 397.8213 611.2822 397.7734 604.606 C
397.7256 599.3335 394.335 594.9912 388.9102 594.5244 C
387.458 594.3853 385.8115 594.665 383.9229 595.4131 C
381.6953 591.9575 L
383.9229 588.5508 L
385.8115 589.2974 387.458 589.5771 388.9102 589.4375 C
394.335 588.9707 397.7256 584.5835 397.8213 579.3086 C
397.8213 572.6807 393.6084 568.1997 387.3613 568.1997 C
383.7773 568.1997 378.498 569.5537 378.498 573.895 C
378.498 575.7144 379.9033 577.3945 381.791 577.3945 C
383.583 577.3945 385.1338 576.3208 385.1338 574.4541 C
385.1338 573.4272 384.6494 572.7285 384.1152 572.2148 C
383.6328 571.7471 383.0996 571.3745 383.0996 570.9546 C
383.0996 569.834 385.1338 569.5537 385.9561 569.5537 C
391.1387 569.5537 391.5264 574.9209 391.4287 578.7021 C
391.3809 581.9214 391.624 588.0371 386.7314 587.6172 C
383.4873 587.3374 381.9375 583.791 381.5986 580.9883 C
381.501 580.9883 L
380.8711 583.9297 379.2744 589.2974 375.4961 591.585 C
375.4961 568.1997 L
373.7041 568.1997 L
fUu1 0.55 1 0 (Cert2.color1) 0 x
365.1807 568.1997 m
370.8457 568.1997 L
370.8457 520.6851 L
365.1807 520.6851 L
365.1807 568.1997 L
f0 0 0 1 (Cert2.color2) 0 x
373.7041 520.6851 m
373.7041 568.1997 L
375.4961 568.1997 L
375.4961 544.8628 L
379.2246 547.0098 380.8711 552.6113 381.501 555.4111 C
381.5986 555.4111 L
381.9375 552.6587 383.4873 549.1099 386.7314 548.8311 C
391.7188 548.4102 391.3809 554.7588 391.4287 557.9775 C
391.5264 562.2261 391.1387 566.3794 385.9561 566.7993 C
385.085 566.8936 383.0996 566.6602 383.0996 565.4473 C
383.0996 565.0732 383.6328 564.6992 384.1152 564.2334 C
384.6494 563.7197 385.1338 563.0669 385.1338 561.9932 C
385.1338 560.125 383.583 559.0986 381.791 559.0986 C
379.9033 559.0986 378.498 560.7329 378.498 562.5518 C
378.498 566.9399 383.8252 568.1997 387.3613 568.1997 C
393.6084 568.1997 397.8213 563.7676 397.7734 557.0913 C
397.7256 551.8188 394.335 547.4766 388.9102 547.0098 C
387.458 546.8701 385.8115 547.1499 383.9229 547.8984 C
381.6953 544.4429 L
383.9229 541.0361 L
385.8115 541.7822 387.458 542.062 388.9102 541.9229 C
394.335 541.4561 397.7256 537.0684 397.8213 531.7939 C
397.8213 525.166 393.6084 520.6851 387.3613 520.6851 C
383.7773 520.6851 378.498 522.0386 378.498 526.3799 C
378.498 528.1997 379.9033 529.8799 381.791 529.8799 C
383.583 529.8799 385.1338 528.8057 385.1338 526.9395 C
385.1338 525.9126 384.6494 525.2134 384.1152 524.7002 C
383.6328 524.2324 383.0996 523.8599 383.0996 523.4399 C
383.0996 522.3193 385.1338 522.0386 385.9561 522.0386 C
391.1387 522.0386 391.5264 527.4063 391.4287 531.1875 C
391.3809 534.4067 391.624 540.5225 386.7314 540.1025 C
383.4873 539.8228 381.9375 536.2764 381.5986 533.4736 C
381.501 533.4736 L
380.8711 536.415 379.2744 541.7822 375.4961 544.0703 C
375.4961 520.6851 L
373.7041 520.6851 L
fUu1 0.55 1 0 (Cert2.color1) 0 x
365.1807 520.6851 m
365.1807 515.0195 L
313.8574 515.0195 L
313.8574 520.6851 L
365.1807 520.6851 L
f0 0 0 1 (Cert2.color2) 0 x
313.8574 512.1616 m
365.1807 512.1616 L
365.1807 510.3696 L
339.9727 510.3696 L
342.292 506.6411 348.3428 504.9946 351.3672 504.3647 C
351.3672 504.2676 L
348.3936 503.9277 344.5605 502.3784 344.2588 499.1348 C
343.8047 494.1465 350.6621 494.4844 354.1387 494.4365 C
358.7275 494.3394 363.2139 494.7266 363.668 499.9092 C
363.7695 500.7813 363.5176 502.7656 362.208 502.7656 C
361.8037 502.7656 361.3994 502.2334 360.8965 501.7505 C
360.3418 501.2163 359.6357 500.7319 358.4766 500.7319 C
356.459 500.7319 355.3496 502.2827 355.3496 504.0747 C
355.3496 505.9619 357.1152 507.3682 359.0801 507.3682 C
363.8193 507.3682 365.1807 502.0405 365.1807 498.5049 C
365.1807 492.2578 360.3926 488.0444 353.1816 488.0923 C
347.4863 488.1401 342.7959 491.5308 342.292 496.9556 C
342.1416 498.4077 342.4434 500.0542 343.252 501.9434 C
339.5195 504.1704 L
335.8389 501.9434 L
336.6455 500.0542 336.9482 498.4077 336.7969 496.9556 C
336.293 491.5308 331.5537 488.1401 325.8564 488.0444 C
318.6973 488.0444 313.8574 492.2578 313.8574 498.5049 C
313.8574 502.0884 315.3193 507.3682 320.0088 507.3682 C
321.9736 507.3682 323.7891 505.9619 323.7891 504.0747 C
323.7891 502.2827 322.6289 500.7319 320.6133 500.7319 C
319.5039 500.7319 318.749 501.2163 318.1934 501.7505 C
317.6885 502.2334 317.2861 502.7656 316.833 502.7656 C
315.6221 502.7656 315.3193 500.7319 315.3193 499.9092 C
315.3193 494.7266 321.1172 494.3394 325.2012 494.4365 C
328.6787 494.4844 335.2842 494.2422 334.8311 499.1348 C
334.5283 502.3784 330.6982 503.9277 327.6709 504.2676 C
327.6709 504.3647 L
330.8477 504.9946 336.6455 506.5918 339.1172 510.3696 C
313.8574 510.3696 L
313.8574 512.1616 L
fUu1 0.55 1 0 (Cert2.color1) 0 x
313.8574 520.6851 m
313.8574 515.0195 L
262.5337 515.0195 L
262.5337 520.6851 L
313.8574 520.6851 L
f0 0 0 1 (Cert2.color2) 0 x
262.5337 512.1616 m
313.8574 512.1616 L
313.8574 510.3696 L
288.6494 510.3696 L
290.9688 506.6411 297.019 504.9946 300.043 504.3647 C
300.043 504.2676 L
297.0703 503.9277 293.2373 502.3784 292.9355 499.1348 C
292.4814 494.1465 299.3389 494.4844 302.8154 494.4365 C
307.4043 494.3394 311.8906 494.7266 312.3447 499.9092 C
312.4463 500.7813 312.1943 502.7656 310.8838 502.7656 C
310.4805 502.7656 310.0762 502.2334 309.5723 501.7505 C
309.0176 501.2163 308.3125 500.7319 307.1523 500.7319 C
305.1348 500.7319 304.0264 502.2827 304.0264 504.0747 C
304.0264 505.9619 305.792 507.3682 307.7559 507.3682 C
312.4961 507.3682 313.8574 502.0405 313.8574 498.5049 C
313.8574 492.2578 309.0693 488.0444 301.8584 488.0923 C
296.1631 488.1401 291.4727 491.5308 290.9688 496.9556 C
290.8179 498.4077 291.1201 500.0542 291.9282 501.9434 C
288.1958 504.1704 L
284.5156 501.9434 L
285.3223 500.0542 285.6245 498.4077 285.4736 496.9556 C
284.9697 491.5308 280.2305 488.1401 274.5327 488.0444 C
267.3735 488.0444 262.5337 492.2578 262.5337 498.5049 C
262.5337 502.0884 263.9961 507.3682 268.6851 507.3682 C
270.6504 507.3682 272.4653 505.9619 272.4653 504.0747 C
272.4653 502.2827 271.3057 500.7319 269.2896 500.7319 C
268.1802 500.7319 267.4253 501.2163 266.8706 501.7505 C
266.3652 502.2334 265.9629 502.7656 265.5093 502.7656 C
264.2988 502.7656 263.9961 500.7319 263.9961 499.9092 C
263.9961 494.7266 269.7939 494.3394 273.8779 494.4365 C
277.355 494.4844 283.9609 494.2422 283.5073 499.1348 C
283.2051 502.3784 279.3745 503.9277 276.3477 504.2676 C
276.3477 504.3647 L
279.5244 504.9946 285.3223 506.5918 287.7935 510.3696 C
262.5337 510.3696 L
262.5337 512.1616 L
fUu255.8115 730.3086 m
255.7568 730.3613 L
253.9199 728.9365 250.9575 727.752 248.9561 729.3936 C
245.938 731.8682 249.6694 735.2554 251.5337 737.1377 C
253.6992 739.3696 257.0737 742.2466 260.0078 739.3696 C
260.4756 738.9121 261.4619 737.6221 260.8037 736.9771 C
260.5566 736.7349 260.0361 736.8149 259.4873 736.8149 C
258.8823 736.8149 258.1982 736.6802 257.5957 736.0898 C
256.4976 735.0132 256.7451 733.5337 257.7588 732.5405 C
258.8296 731.4912 260.6118 731.6787 261.6816 732.728 C
262.8872 733.9771 262.9268 735.5303 262.5625 737.0195 C
262.0786 738.5098 261.0229 739.9326 260.0078 740.9292 C
256.4702 744.3965 251.4517 744.1543 247.5566 740.3369 C
244.5127 737.2451 243.8555 732.834 246.6509 729.5542 C
247.3921 728.667 248.4893 727.9141 249.998 727.2964 C
249.2563 724.0972 L
245.9663 723.3442 L
245.3359 724.8237 244.5669 725.8989 243.6626 726.624 C
240.3154 729.3662 235.8457 728.7485 232.7192 725.7368 C
228.7705 721.9194 228.5503 717.0254 232.0889 713.5562 C
233.0898 712.5752 234.5283 711.5273 236.0425 711.0391 C
237.5537 710.6689 239.1372 710.7012 240.4263 711.8892 C
241.4956 712.9385 241.6602 714.6587 240.5913 715.708 C
239.5767 716.7012 238.0947 716.9707 236.998 715.896 C
236.3677 715.2783 236.2578 714.6328 236.2578 714.041 C
236.2578 713.5034 236.3403 712.9912 236.1201 712.7764 C
235.4063 712.0767 234.145 713.0459 233.7065 713.5835 C
231.019 716.7012 233.2407 719.3105 235.792 721.7046 C
237.71 723.5322 241.25 727.377 243.8271 724.3667 C
245.499 722.4023 244.2925 719.5 242.8667 717.7251 C
242.9219 717.6704 L
244.8809 718.9077 248.9712 721.1484 252.3066 720.459 C
252.3101 710.7627 L
254.1387 710.7627 L
254.1387 719.2881 L
262.8296 719.2881 L
262.8296 721.0801 L
252.9448 721.0801 L
252.2847 724.4468 254.4678 728.3052 255.8115 730.3086 C
f1 0.55 1 0 (Cert2.color1) 0 x
262.8301 710.7627 m
262.8301 716.4282 L
257.0513 716.4282 L
257.0513 710.7627 L
262.8301 710.7627 L
f0 0 0 1 (Cert2.color2) 0 x
244.7607 741.9819 m
243.771 742.9531 241.9111 744.0586 240.6353 742.8062 C
240.1055 742.2876 240.0239 741.436 240.5537 740.9175 C
241.0571 740.4243 241.7891 740.291 242.3315 740.8232 C
242.645 741.1309 242.6987 741.4497 242.6987 741.7417 C
242.6987 742.0078 242.6577 742.2617 242.7661 742.3677 C
243.1201 742.7144 243.7437 742.2349 243.9614 741.9683 C
245.2905 740.4243 244.1924 739.1343 242.9282 737.9497 C
241.9795 737.0454 240.2275 735.1411 238.9521 736.6323 C
238.1235 737.6035 238.7207 739.042 239.4272 739.9189 C
239.3999 739.9463 L
238.4902 739.373 236.6577 738.3628 235.0723 738.5181 C
235.1699 738.6973 235.2241 738.9004 235.2241 739.1172 C
235.2241 739.8164 234.646 740.3848 233.9316 740.3848 C
233.2168 740.3848 232.6382 739.8164 232.6382 739.1172 C
232.6382 738.4155 233.2168 737.8477 233.9316 737.8477 C
234.1289 737.8477 234.3149 737.8916 234.4819 737.9702 C
234.6436 736.3765 233.646 734.6255 233.0195 733.6904 C
233.0479 733.665 L
233.9565 734.3696 235.4224 734.9551 236.4136 734.1445 C
237.9067 732.9194 236.0605 731.2417 235.1382 730.312 C
234.0659 729.2061 232.395 727.7827 230.9429 729.2061 C
230.7119 729.4331 230.2246 730.0713 230.5498 730.3901 C
230.6714 730.5098 230.9302 730.4707 231.2007 730.4707 C
231.499 730.4707 231.8389 730.5371 232.1382 730.8306 C
232.6802 731.3628 232.5591 732.0933 232.0571 732.5864 C
231.5273 733.1055 230.645 733.0112 230.1152 732.4927 C
228.8525 731.2554 229.9385 729.4194 230.9429 728.4346 C
232.6943 726.7178 235.1782 726.8374 237.1055 728.728 C
238.6133 730.2573 238.9385 732.4399 237.5537 734.0645 C
237.1875 734.5029 236.645 734.875 235.8975 735.1821 C
236.2646 736.7656 L
237.8931 737.1377 L
238.2046 736.4072 238.585 735.873 239.0322 735.5146 C
240.6895 734.1582 242.9014 734.4634 244.4492 735.9531 C
246.4033 737.8438 246.5122 740.2656 244.7607 741.9819 C
fUu384.7451 717.4663 m
384.7979 717.5205 L
383.373 719.3579 382.1885 722.3203 383.8301 724.3218 C
386.3047 727.3398 389.6914 723.6084 391.5742 721.7441 C
393.8057 719.5786 396.6836 716.2041 393.8057 713.27 C
393.3486 712.8027 392.0586 711.8164 391.4141 712.4741 C
391.1709 712.7217 391.252 713.2417 391.252 713.7905 C
391.252 714.3955 391.1172 715.0796 390.5264 715.6821 C
389.4492 716.7803 387.9697 716.5327 386.9766 715.519 C
385.9277 714.4482 386.1152 712.666 387.165 711.5962 C
388.4141 710.3906 389.9668 710.3511 391.4561 710.7153 C
392.9463 711.1992 394.3691 712.2549 395.3662 713.27 C
398.833 716.8076 398.5908 721.8262 394.7734 725.7212 C
391.6816 728.7651 387.2705 729.4224 383.9902 726.627 C
383.1035 725.8857 382.3506 724.7886 381.7334 723.2803 C
378.5332 724.0215 L
377.7813 727.3115 L
379.2607 727.9419 380.3359 728.7109 381.0605 729.6152 C
383.8027 732.9624 383.1855 737.4321 380.1738 740.5586 C
376.3564 744.5073 371.4619 744.7275 367.9932 741.189 C
367.0117 740.1885 365.9639 738.7495 365.4756 737.2354 C
365.1055 735.7241 365.1377 734.1406 366.3252 732.8516 C
367.375 731.7822 369.0947 731.6177 370.1445 732.6865 C
371.1377 733.7012 371.4072 735.1831 370.332 736.2798 C
369.7148 736.9102 369.0693 737.02 368.4775 737.02 C
367.9395 737.02 367.4277 736.9375 367.2129 737.1577 C
366.5137 737.8716 367.4824 739.1328 368.0205 739.5713 C
371.1377 742.2588 373.7471 740.0371 376.1406 737.4863 C
377.9688 735.5679 381.8135 732.0283 378.8027 729.4507 C
376.8389 727.7793 373.9365 728.9854 372.1621 730.4111 C
372.1074 730.3555 L
373.3438 728.3965 375.585 724.3066 374.8955 720.9712 C
365.1992 720.9678 L
365.1992 719.1392 L
373.7246 719.1392 L
373.7246 710.4482 L
375.5166 710.4482 L
375.5166 720.333 L
378.8828 720.9932 382.7412 718.8101 384.7451 717.4663 C
f1 0.55 1 0 (Cert2.color1) 0 x
365.1992 710.4478 m
370.8652 710.4478 L
370.8652 716.2266 L
365.1992 716.2266 L
365.1992 710.4478 L
f0 0 0 1 (Cert2.color2) 0 x
396.4189 728.5171 m
397.3896 729.5068 398.4951 731.3667 397.2432 732.6426 C
396.7236 733.1724 395.873 733.2539 395.3535 732.7241 C
394.8604 732.2207 394.7275 731.4888 395.2598 730.9463 C
395.5674 730.6328 395.8867 730.5791 396.1777 730.5791 C
396.4443 730.5791 396.6982 730.6201 396.8047 730.5117 C
397.1504 730.1577 396.6709 729.5342 396.4053 729.3164 C
394.8604 727.9873 393.5703 729.0854 392.3867 730.3496 C
391.4824 731.2983 389.5771 733.0503 391.0693 734.3257 C
392.04 735.1543 393.4785 734.5571 394.3555 733.8506 C
394.3828 733.8779 L
393.8096 734.7871 392.7988 736.6201 392.9551 738.2051 C
393.1338 738.1079 393.3369 738.0537 393.5537 738.0537 C
394.2529 738.0537 394.8213 738.6318 394.8213 739.3462 C
394.8213 740.061 394.2529 740.6396 393.5537 740.6396 C
392.8525 740.6396 392.2842 740.061 392.2842 739.3462 C
392.2842 739.1489 392.3281 738.9629 392.4072 738.7959 C
390.8125 738.6348 389.0625 739.6318 388.127 740.2583 C
388.1016 740.23 L
388.8066 739.3213 389.3916 737.8555 388.5811 736.8643 C
387.3555 735.3711 385.6787 737.2173 384.748 738.1396 C
383.6426 739.2119 382.2197 740.8828 383.6426 742.335 C
383.8691 742.5664 384.5078 743.0532 384.8271 742.7285 C
384.9463 742.6064 384.9072 742.3477 384.9072 742.0771 C
384.9072 741.7788 384.9736 741.439 385.2676 741.1396 C
385.7998 740.5977 386.5303 740.7188 387.0234 741.2207 C
387.542 741.7505 387.4482 742.6328 386.9287 743.1626 C
385.6924 744.4253 383.8555 743.3394 382.8711 742.335 C
381.1543 740.583 381.2744 738.0996 383.165 736.1719 C
384.6934 734.6646 386.876 734.3394 388.501 735.7241 C
388.9395 736.0903 389.3115 736.6328 389.6182 737.3804 C
391.2021 737.0137 L
391.5742 735.3848 L
390.8438 735.0732 390.3096 734.6924 389.9512 734.2456 C
388.5947 732.5889 388.9004 730.376 390.3896 728.8286 C
392.2803 726.8745 394.7021 726.7656 396.4189 728.5171 C
fUu371.9023 501.1206 m
371.957 501.0679 L
373.7939 502.4927 376.7568 503.6772 378.7578 502.0356 C
381.7764 499.561 378.0449 496.1738 376.1807 494.2915 C
374.0156 492.0596 370.6406 489.1826 367.707 492.0596 C
367.2393 492.5171 366.2529 493.8071 366.9102 494.4521 C
367.1582 494.6943 367.6787 494.6143 368.2266 494.6143 C
368.832 494.6143 369.5166 494.749 370.1182 495.3394 C
371.2168 496.416 370.9697 497.8955 369.9561 498.8887 C
368.8848 499.9385 367.1025 499.7505 366.0322 498.7012 C
364.8271 497.4521 364.7881 495.8989 365.1523 494.4092 C
365.6357 492.9199 366.6914 491.4966 367.707 490.5 C
371.2441 487.0322 376.2627 487.2749 380.1572 491.0923 C
383.2021 494.1841 383.8584 498.5952 381.0635 501.875 C
380.3223 502.7622 379.2246 503.5151 377.7168 504.1328 C
378.458 507.332 L
381.748 508.085 L
382.3789 506.6055 383.1475 505.5303 384.0518 504.8052 C
387.3984 502.063 391.8691 502.6807 394.9951 505.6924 C
398.9434 509.5098 399.1641 514.4038 395.626 517.873 C
394.625 518.854 393.1865 519.9019 391.6719 520.3896 C
390.1611 520.7603 388.5771 520.7275 387.2881 519.54 C
386.2188 518.4907 386.0537 516.7705 387.123 515.7212 C
388.1377 514.728 389.6201 514.4585 390.7158 515.5332 C
391.3467 516.1514 391.457 516.7959 391.457 517.3882 C
391.457 517.9258 391.374 518.4375 391.5938 518.6528 C
392.3086 519.3525 393.5693 518.3833 394.0078 517.8457 C
396.6953 514.728 394.4736 512.1187 391.9229 509.7246 C
390.0049 507.897 386.4648 504.0522 383.8867 507.0625 C
382.2158 509.0269 383.4219 511.9292 384.8477 513.7041 C
384.792 513.7588 L
382.833 512.5215 378.7432 510.2808 375.4082 510.9702 C
375.4043 520.6665 L
373.5762 520.6665 L
373.5762 512.1411 L
364.8848 512.1411 L
364.8848 510.3491 L
374.7695 510.3491 L
375.4297 506.9824 373.2461 503.124 371.9023 501.1206 C
f1 0.55 1 0 (Cert2.color1) 0 x
364.8838 520.6665 m
364.8838 515.001 L
370.6631 515.001 L
370.6631 520.6665 L
364.8838 520.6665 L
f0 0 0 1 (Cert2.color2) 0 x
382.9531 489.4473 m
383.9434 488.4761 385.8037 487.3701 387.0791 488.623 C
387.6084 489.1416 387.6904 489.9932 387.1611 490.5117 C
386.6572 491.0049 385.9258 491.1382 385.3828 490.606 C
385.0693 490.2988 385.0156 489.9795 385.0156 489.6875 C
385.0156 489.4214 385.0566 489.167 384.9482 489.0615 C
384.5947 488.7148 383.9707 489.1943 383.7529 489.4609 C
382.4238 491.0049 383.5215 492.2949 384.7861 493.4795 C
385.7354 494.3838 387.4863 496.2881 388.7627 494.7969 C
389.5908 493.8257 388.9932 492.3872 388.2871 491.5103 C
388.3145 491.4829 L
389.2236 492.0562 391.0566 493.0664 392.6416 492.9111 C
392.5449 492.7319 392.4902 492.5288 392.4902 492.312 C
392.4902 491.6123 393.0684 491.0444 393.7822 491.0444 C
394.498 491.0444 395.0762 491.6123 395.0762 492.312 C
395.0762 493.0137 394.498 493.582 393.7822 493.582 C
393.5859 493.582 393.3994 493.5376 393.2324 493.459 C
393.0713 495.0527 394.0684 496.8037 394.6943 497.7388 C
394.667 497.7642 L
393.7578 497.0596 392.292 496.4741 391.3008 497.2847 C
389.8076 498.5098 391.6543 500.1875 392.5762 501.1172 C
393.6484 502.2231 395.3193 503.6465 396.7715 502.2231 C
397.0029 501.9961 397.4902 501.3579 397.165 501.0391 C
397.043 500.9194 396.7842 500.9585 396.5137 500.9585 C
396.2148 500.9585 395.876 500.8921 395.5762 500.5986 C
395.0342 500.0664 395.1553 499.3359 395.6572 498.8428 C
396.1875 498.3242 397.0693 498.418 397.5986 498.9365 C
398.8623 500.1738 397.7754 502.0098 396.7715 502.9946 C
395.0195 504.7109 392.5361 504.5918 390.6084 502.7012 C
389.1006 501.1719 388.7764 498.9893 390.1611 497.3647 C
390.5264 496.9263 391.0693 496.5542 391.8164 496.2471 C
391.4502 494.6636 L
389.8213 494.2915 L
389.5098 495.022 389.1289 495.5562 388.6816 495.9146 C
387.0254 497.271 384.8125 496.9658 383.2646 495.4761 C
381.3115 493.585 381.2021 491.1636 382.9531 489.4473 C
fUu242.9692 513.9629 m
242.9165 513.9082 L
244.3413 512.0713 245.5259 509.1089 243.8843 507.1074 C
241.4097 504.0894 238.0225 507.8208 236.1401 509.6851 C
233.9082 511.8506 231.0313 515.2251 233.9082 518.1592 C
234.3657 518.627 235.6558 519.6133 236.3008 518.9551 C
236.543 518.708 236.4629 518.1875 236.4629 517.6387 C
236.4629 517.0337 236.5977 516.3496 237.188 515.7471 C
238.2646 514.6489 239.7441 514.8965 240.7373 515.9102 C
241.7871 516.981 241.5991 518.7632 240.5498 519.833 C
239.3008 521.0386 237.7476 521.0781 236.2578 520.7139 C
234.7686 520.23 233.3452 519.1743 232.3486 518.1592 C
228.8809 514.6216 229.1235 509.603 232.9409 505.708 C
236.0327 502.6641 240.4438 502.0068 243.7236 504.8022 C
244.6108 505.5435 245.3638 506.6406 245.9814 508.1494 C
249.1807 507.4077 L
249.9336 504.1177 L
248.4541 503.4873 247.3789 502.7183 246.6538 501.814 C
243.9116 498.4668 244.5293 493.9971 247.541 490.8706 C
251.3584 486.9219 256.2524 486.7017 259.7217 490.2402 C
260.7026 491.2412 261.7505 492.6797 262.2383 494.1938 C
262.6089 495.7051 262.5762 497.2886 261.3887 498.5776 C
260.3394 499.647 258.6191 499.8115 257.5698 498.7427 C
256.5767 497.728 256.3071 496.2461 257.3818 495.1494 C
257.9995 494.519 258.6445 494.4092 259.2368 494.4092 C
259.7744 494.4092 260.2861 494.4917 260.5015 494.2715 C
261.2012 493.5576 260.2319 492.2964 259.6943 491.8579 C
256.5767 489.1704 253.9673 491.3921 251.5732 493.9434 C
249.7456 495.8613 245.9009 499.4014 248.9111 501.9785 C
250.8755 503.6504 253.7778 502.4438 255.5527 501.0181 C
255.6074 501.0732 L
254.3701 503.0322 252.1294 507.1226 252.8188 510.458 C
262.5151 510.4614 L
262.5151 512.29 L
253.9897 512.29 L
253.9897 520.981 L
252.1978 520.981 L
252.1978 511.0962 L
248.8311 510.436 244.9727 512.6191 242.9692 513.9629 C
f1 0.55 1 0 (Cert2.color1) 0 x
262.5151 520.9814 m
256.8496 520.9814 L
256.8496 515.2026 L
262.5151 515.2026 L
262.5151 520.9814 L
f0 0 0 1 (Cert2.color2) 0 x
231.2959 502.9121 m
230.3247 501.9224 229.2188 500.0625 230.4717 498.7866 C
230.9902 498.2568 231.8418 498.1753 232.3604 498.7051 C
232.8535 499.2085 232.9868 499.9404 232.4546 500.4829 C
232.1475 500.7964 231.8281 500.8501 231.5361 500.8501 C
231.27 500.8501 231.0156 500.8091 230.9102 500.9175 C
230.5635 501.2715 231.043 501.895 231.3096 502.1128 C
232.8535 503.4419 234.1436 502.3438 235.3281 501.0796 C
236.2324 500.1309 238.1367 498.3789 236.6455 497.1035 C
235.6743 496.2749 234.2358 496.8721 233.3589 497.5786 C
233.3315 497.5513 L
233.9048 496.6416 234.915 494.8091 234.7598 493.2236 C
234.5806 493.3213 234.3774 493.376 234.1606 493.376 C
233.4609 493.376 232.8931 492.7974 232.8931 492.083 C
232.8931 491.3682 233.4609 490.7896 234.1606 490.7896 C
234.8623 490.7896 235.4302 491.3682 235.4302 492.083 C
235.4302 492.2803 235.3862 492.4663 235.3076 492.6333 C
236.9014 492.7949 238.6523 491.7974 239.5874 491.1709 C
239.6128 491.1992 L
238.9082 492.1079 238.3228 493.5737 239.1333 494.5649 C
240.3584 496.0581 242.0361 494.2119 242.9658 493.2896 C
244.0718 492.2168 245.4951 490.5464 244.0718 489.0942 C
243.8447 488.8633 243.2065 488.376 242.8877 488.7012 C
242.7681 488.8228 242.8071 489.0815 242.8071 489.3521 C
242.8071 489.6504 242.7407 489.9902 242.4473 490.2896 C
241.915 490.8315 241.1846 490.7104 240.6914 490.2085 C
240.1724 489.6787 240.2666 488.7964 240.7852 488.2666 C
242.0225 487.0039 243.8584 488.0898 244.8433 489.0942 C
246.5596 490.8457 246.4404 493.3296 244.5498 495.2568 C
243.0205 496.7646 240.8379 497.0898 239.2134 495.7051 C
238.7749 495.3389 238.4028 494.7964 238.0957 494.0488 C
236.5122 494.416 L
236.1401 496.0444 L
236.8706 496.356 237.4048 496.7363 237.7632 497.1836 C
239.1196 498.8408 238.8145 501.0527 237.3247 502.6006 C
235.4336 504.5547 233.0122 504.6636 231.2959 502.9121 C
fUU(Adobe PatternOnPath Brush Tool) 1 0 35 XP
%040302010000803F0000000000000001000000005061747465726E204272
%7573682031
/Adobe_Brushed_Path () XT
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
