%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8.0.1
%%For: (S ) ( )
%%Title: (050.ai)
%%CreationDate: (11/1/2005) (3:37 PM)
%%BoundingBox: 187 334 422 494
%%HiResBoundingBox: 187.4492 334.9385 421.1006 493.6499
%%DocumentProcessColors:
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%+ 1 0.15 0.5 0 (GOLDA)
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 297.5 420.5 297.5 420.5
%AI3_TileBox: 17 19 577 823
%AI3_DocumentPreview: None
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -238 764 1 1144 769 18 1 1 6 63 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:17 19
%%AI3_PaperRect:-16 824 579 -18
%%AI3_Margin:16 -20 -18 18
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 128 88 8
%%BeginData: 13316 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C450C131284FFA835A8FF5960FFFF3512130C1312130C131235FFFF84
%35FFFF84130C131213AEFF8435FFFFAF0C0C1312130C1312130C13AFFFFF
%3584FFFF3512130C131284FF845FFFFFA835130C1312130C13121335A8FF
%FF3584FFFF351312355F5FFFFF6059FFFF601312130C1312130C1335A8FF
%5935FFFF5FAFFFAE1312131335350C59130C13350C135912135984598459
%84598459131284130C12841359598459351360133512AF0C355984598459
%84598459351384120C1384120C59845984350C350C133584133584598459
%8459845984121359130C0C60350C603584590C5959130C59591360598459
%84598459843513350C1359350C0C841335350C0C35FF350C35FF130C5984
%1335A8FD09FFA8351360A8130C60FD05FF351360A8130C35FD0AFFAF350C
%35A860133584FD05FF130C35AF121335FD0BFF351313FF350C12AFFD04FF
%84131384590C1384FD0AFF130C5984131384601335A86013840C0C350C0C
%350C0C130C131359FD09FF8413130C8413130CFD04FF60133513840C130C
%AFFD09FFAF0C1313840C131359FD04FF350C0C0C590C0C35A8FD09FFA813
%0C0C59350C0C59FD04FF59130C35590C0C35FD09FF350C0C35350C133513
%350C351384FF5F0C35FF350C84FF353584601335355959FF8459355F1360
%A8351360A835355935351360FF601360A8351359355F84FF845F35590C35
%FF600C35A86013FD04350C59FF350C59AF0C35355935AEFF84355F353535
%FF59130CFF5912355F353513AE841212AE5912355F3584FF351312130C84
%FF350C60841335AF3513AEFFA8130C0C35AF84FF35351213A8603535350C
%590C35353560FF84131335FFA8FD043560FF8413601359A8353535120C59
%0C0C353559A8AF0C131284FF60FD043559FF840C350C84AFFD0435136013
%FD0435FFA8130C0C84FF593512353584FF60130C35FF5935353513350C84
%598484FF350C2E13A884A83513350CAF841384350C84FF590C60841384FD
%04FF590C35FD05FF1335840C60FD07FF1335AF3513AFFD04FF350C35FD05
%FF350CA83513FD07FFA80C12FF0C0CA8FD04FF3C1335FD05FF3513AF130C
%A8FD06FF841360590C84FFFFFFAF3512A8FD04FF840C59AF1359FFA81359
%FF3512FF600C0C84AF35FF350C3559A85935350C0C35130C353559A88413
%1335FF84FD043560FFA80C13138484FD04350C12130C353535A8FF0C3513
%84FF6035350C3559FF840C0C0C8484FD043513590CFD0435AFA8350C1384
%FF593513353584FF590C0C84FF0C0C130C0C84136059845FFF350C0C35A8
%84A88413130CAFFF591213AE131235AE351284601359355F5FFFA85F3559
%1335843513608412355F35591360FF351335A812135F355959FFA859355F
%1335A835133584601359355F351259FF351313AE1335355F3560FFFF3559
%353513AF353535AF590C355935351384600C1384350C5F8460FFFF60355F
%351259FF131284601335FF351360FF120C8459133C84131360590C1384FD
%09FF84131259840C0C59FD04FF8413130C8B0C1312FD0AFFAF13130CAF35
%0C1384FD04FF840C0C137D130C35AFFD09FFA8130C1384350C0C84FD04FF
%60130C84600C0C84FD09FF600C0C353535138412350C8413596013841335
%136013353560130C84FD09FF840C1360840C0C60FD04FFA8351335A8130C
%35A8FD09FFA83512138460130C84FD04FFAF120C35AF12130CAFFD09FFAF
%123512AF130C1384FD04FF59131384350C1384FD09FFAF120C3560133584
%351260600C59FF35133584351360A8131384350CFD09350C3584130C3584
%13FD0435130C84130C35AF0C13FD0935130CAF350C1384350C353534350C
%13590C133584130CFD09350C137D35130C846013350C35350C8460130C84
%6013FD09350C35590C0C84350C0C8B0C0C35FFAF0C351384FF84FF601335
%35FF595F3559355F3559355F5FFFFFAE59FFFFAE3559355F35AFFFFF35FF
%FFFF3559355F3559355F355935FFFFFF35AFFFFF595F3535355FA8FF845F
%FFFFFF603559355F3559355F3560FFFFFF59A8FFFF60355F355984FFFF60
%84FFFF60355F3559355F35593560FF60130C35FF59FF59120C35FF0C35A8
%601384FF841384A81335FD66FF601384840C35FF590C59AF0C350C60FFFF
%0C60FF5935FFFF3559FD66FF3559FFFF3559FF3535FFFF84131384FFFF13
%84FF6035FFFF3535FD66FF3535FFFF3535FF3535FFFF590C0C60FFFF0C60
%FF595FFFFF355FFD66FF355FFFFF3535FF5935FFFF84131384FFFF121359
%0C59FFFF3535FD66FF3535FFFF6013601360FFFF590C0C59FFFFFF35353C
%FFFFFF3535FD66FF3535FFFFFF601360FFFFFF84131360FFFF840C0C13A8
%FFFF3535FD66FF3535FFFFAF0C351384FFFF590C1260FFFF5935FF1384FF
%FF3559FD66FF3559FFFF3535FF3535FFFF84131384FFFF3535FF0C59FFFF
%3535FD66FF3535FFFF3535FF3535FFFF590C0C59FFFF3535FF1384FFFF35
%59FD66FF3559FFFF3559FF3535FFFF8413350C84591360FF351384840C59
%FD66FF601384840C35FF590C84AF0C35FF59131360FFAFFF35131259FD68
%FF60131235FFAFFF590C1335FFFF60130C8460138460131384FD68FF840C
%0C84840C84AF0C0C60FF60136059131360130C59601384FD66FF840C5960
%120C120C1235350C84350C8460130C350C1384840C35FD66FF601384840C
%0C840C0C59AF1335FF590C1384590C5960130C59FD11FF595F3584FFFF35
%AFFFAE5FFFFF843559355F3559355F3560FFFFA860FFFFA85935AEFFFFFF
%AE355959FFFF60A8FFFF60355F3559355F35593584FFFF8484FFFF845F35
%AFFD13FF6013135960133559120C35FFFF590C0C84FF84FF840C0C84FD11
%FF350C351384120C0C84130C595913FD09350C357D1313358413123584FF
%FFFF8435350C35590C137D3513FD09351360840C1360840C1235A8FD13FF
%840C1384FF84A8AF0C0C60FF841384590C84FF590C59601384FD10FF3535
%A835133584351360840C1384FD09FFAF121313AF121335FD09FF840C0CAF
%35131384FD09FF84130C5984131359FD15FF840C59601384FFAF0C35590C
%843560FFFF0C35FF350CFFFF3535FD10FF8413350C13135913130C600C0C
%35FD09FFA8130C357D130C35A8FD07FFA8350C0C35350C13A8FD09FF840C
%0C60840C1360FD15FF350CFFFF3535FF3535A8FF350C5F60FFFF5F35FF35
%5FFFFF355FFD11FF84133584351360FF350CAE5F12355F3560FFFF355935
%3535AF0C3535AF0C353584FFFFFF8435351384840C35841335355935AFFF
%84355F351259AE131259AE133535FD13FF355FFFFF355FFF5935FFFF8413
%1284FFFF1235FF3512FFFF3512FD11FF35351335A859FF600C350CAF5935
%353513840CFD0435FFA8130C35AFAF353584FFFFFF84353584AF352E0C59
%AFFD043513601335353559FF840C0C59FF843535A8FD12FF3512FFFF3512
%FF1335FFFF350C3535AF843559FF353584AF125FFD10FF590C60601384FF
%841360A80C35FD04FF8B1235AFFD04FF3512AF1360FD0BFF601384590C84
%FD04FF601335FD04FFA80C35841384FD16FF3535A8AF125FFF601284FF60
%13A8590C0C59FF59FF590C0C60FD12FF350C1359A860A859133535FF8435
%353513350CFD0435FF840C0C13A8AF353584FFFFFF843535AFA8350C0C0C
%FFFD043513350C35353559FF35350C35A8843535A8FD12FFAF35131360A8
%84A88413130CA8AF13351360130C35350C3535AFFD11FFAE131384351335
%A8601384840C35593560FFAF355F351235FF351235FF133535AEFFFFFFAE
%35350CFF84120CFF3535355F3560FFAE3559350C59AF0C3584AF133535AF
%FD12FFA8350C133535133560121235A8350C84600C13593C0C84590C59FD
%10FF841360590C2E840C130C60130C35FD09FF840C0C13590C0C13A8FD07
%FFAF350C0C13350C13A8FD09FF350C0C35590C0C35A8FD14FF6013845913
%0C840C1335840C59FF590C0CAF60358484121360FD11FF590C6059350C59
%351235600C1384FD0AFF350C35FF131335FD09FF84130CAF590C0CAFFD09
%FFAF0C0C60AF0C1359FD16FFAF0C136060133560350C84FF591313350CAE
%FF840C35131384FD11FF350C0C84350C0CAF0C0C35601360598459605984
%59600C13590C0C13590C358484FFFFFF8460590C3535130C59350C845960
%5984596059840C35350C0C35590C3560A8FD12FFA80C35350C59AF84130C
%350C840C59FFFF3535FF3535FFFF355FFD11FF35120C84FF59FF84120C35
%FF60130C1312130C13121335FFFF8435A8FF840C1384FFFFFF84130C35FF
%FF3584FFFF351312130C1312130C1335FFFF5935FFFF841213AFFD12FF35
%35FFFF355FFF5935FFFF60131384FFFF3535FF3535FFFF3535FD10FF6013
%84350C84FF840C35AF0C35FD49FF3535FFFF3535FF3535FFFF590C0C59FF
%FF6013841360FFFF3535FD10FF3559FFFF3559FF8413FFFF8413FD49FF35
%35FFFF3535593535FFFF84131360FFFFA8351235A8FFFF3535FD10FF3535
%FFFF3535FF590CFFFF590CFD49FF3535FFFFFF120C2EFFFFFF590C1260FF
%FF600CAF1359FFFF3559FD10FF355FFFFF355FFF8413FFFF8413FD49FF35
%59FFFF5F35593535FFFF84131384FFFF3535FF3535FFFF3535FD10FF3535
%FFFF590CAF0C35FFFF590CFD49FF3535FFFF3535FF3535FFFF590C0C35FF
%FF3535FF3535FFFF3559FD10FF3535FFFFFF350C60FFFFFF8413FD49FF35
%35FFFF3559FF3512FFFF5F13841313350CA884840C350C35A8FD10FF3535
%FFFFAF0C350CAFFFFF590CFD49FFAF0C350C1384FFA8350C350C84FF6012
%0CAF35123584131384FD11FF3559FFFF6012FF3535FFFF8413FD4AFF8413
%358484136084351384FF2E35845913357D130C84840C35FD10FF3535FFFF
%8413FF3535FFFF590CFD49FF59138484130C840C0C34A81335AF35351284
%350C3560133535FD11FF3559FFFF590CFF3535FFFF8413FD49FFAF350C35
%35351335350C0C35A884130C0C59FF84FF350C0C35A8FD10FF601384840C
%0CFF350C84AF0C35FD4AFF590C1360A884A884131312FF1235FF843535FF
%3535A8FF3559FD11FF60131235FFAFFF350C1335FD4AFF3535A8FF1360FF
%6013AFAE35131384FFFF1335FF3513FFFF3513FD11FF840C0C84840C84AF
%0C0C60FD4AFF3513FFFF3513FF1235FFFF350C0C60FFFF5935FF3559FFFF
%3559FD10FF840C3560130C350C1235350C84FD49FF3559FFFF3559FF3535
%FFFF84351359FFFF0C35FF350CFFA83535FD10FF601384840C0C600C0C59
%AF1335FD49FF350CFFFF3535FF3535A8FF5935AE13603535A8FF840C3535
%0CFD12FF6013135960133560120C35FD4AFF840C596013AEFF8413358412
%59FF840C13A8FF59FF840C0CAFFD12FF840C1384FF84A8AF0C0C60FD4BFF
%84121384FF84FF84131359FFFF35351360350C35600C3535FD11FF840C59
%601384FFAF0C35590C84FD4AFF60131359601360840C1335FF350CA88413
%1384130CAFA80C35FD10FF350CFFFF3535FF3535A8FF350CFD49FF351384
%840C0C600C0C3584133584136035351335123535351384FD10FF355FFFFF
%355FFF5935FFFF8413FD49FF841235601312350C1360590C59FF841313A8
%8413AF84131384FD11FFAFA8FFFFAFA8FFA8AFFFFFA8A8FD4AFF840C0C84
%840C35A80C0C35FFFF35351360FFFFAF35133535FD68FF60131335FFA8FF
%590C1360FF0C13A8841360FF591384A81335FD66FF601384A8130CFF590C
%598413590C60FFFF5F35FF355FFFFF355FFD66FF355FFFFF600CFF5935FF
%FF60131384FFFF3535FF3535FFFF3535FD66FF3535FFFF8413FF3535FFFF
%590C0C59FFFF3535FF1335FFFF3535FD66FF3535FFFF600CAF3535FFFF84
%131360FFFF840C0C13A8FFFF3535FD66FF3535FFFFAF0C351384FFFF590C
%1260FFFFFF590C59FFFFFF3559FD66FF3559FFFFFF600C35FFFFFF841313
%84FFFF350C590C59FFFF3535FD66FF3535FFFF6013840C35FFFF590C0C60
%FFFF5935FF3559FFFF3559FD66FF3559FFFF3584FF8413FFFF84131384FF
%FF3535FF3535FFFF3535FD66FF3535FFFF3559FF590CFFFF590C0C5FFFFF
%3535FF355FFFFF355FFD66FF355FFFFF3584FF8413FFFF8413120C845913
%60FF601384840C59FD66FF590CAF590C59FF840C35AF0C35FF35351384A8
%84FF60131359FF3559353535593535355959FFFF8435FFFF60130C135959
%FFFF8435FFFFAF3535355935353559353535AFFFFF3584FFAF3559353535
%84FFFF8435FFFFA8593535355935353559355FA8FFFF3584FFA835355935
%3584FFFF3584FFFF5F35593535355935353584FF350C0C59FF84FF840C0C
%35FFFF5913137D131360840C138435135984596059845960590C3584130C
%355913605960590C3584130C35AF0C13596059845960598459130CAF350C
%13840C13598435601360840C133584130C8459605984596059840C137D35
%130C59130C602E84350C5935130C59350C6059845960598459601360590C
%0CAF350C0CAF0C0C0CFF6013AE59353584351259601335A8FD09FF841213
%60841212AEFD04FF84121360A8350C35FD0AFFAE351235A8601335A8FD04
%FFAE131259FF121335FD0AFFAF133512AF350C13AFFD04FF591312AF590C
%13AFFD09FFAE131259351312590C3535590C35590C59131213590C355912
%131359FD09FF84130C3560130C35FD04FF84131312AF0C130CAFFD0AFF0C
%130C840C351384FD04FF840C0C3560130C13A8FD09FFAF350C13590C0C0C
%84FFFFFFAF35130C60350C0C84FD09FF840C0C35350C0C842E0C35841360
%FF350C13FF350C59841335A860130C130C35FF8459353513358413138484
%0C355935351360A8350C35A8350C59353584FF59353559133584351335AF
%6013353559350C59AF350C35AF1235355935AFAF84FD043512AF130C13FF
%590CFD04351384350C12AF590C35353584FF603559350C59841335603513
%3559131360FFA8130C0C59FF5FFF0C131359FF84596059FD040C353559A8
%60130C35FF84FD043560FF8413350CAFA83535350C130C0CFD0435848413
%131384FF6035350C3559FF840C0C35A8AFFD04350C3513FD0435AF840C0C
%0C84FF593513353584A8350C0C84FFFD043513601335353559FF35351335
%7D59A884131335FF3513FF350C84FF350C846013AEFD04FF591235FD04FF
%AE1360590C84FD07FF1335A80C35FD05FF350C35FD05FF1335FF3513FD07
%FFAE0C35841335FD05FF351360FD04FFAF120CFF1312AEFD06FF6013AE35
%12AEFD04FF601384FD04FF600C60841360FF84135FA81235A813130C12FF
%84AF0C601359FF845984590C350C12353560FF60130C35FF84FD043560FF
%8413130CAFAF593535120C590C12353535A88413351384FF603535123559
%FF840C0C35A8AFFD0435136013FD0435AF840C350C84FF593513353584AF
%350C0C84FF5935353513601335353559FF12130C35A884A83513600CAFFF
%590C13FF350C84841360A884130C130C35FF84353559136084131384840C
%FD04351360A8351235AF351235355984FF845935351235A8601335FF6013
%FD04350C59AF0C1359AF0CFD043584FF84355935350CAF590C35FF590C35
%59353513AF590C0CAF590C35593584FF843535350C59AF1235FF841335AF
%351384FF840C35350C13350C0C590C131359FD09FF84130C35600C0C35FD
%04FF8413130C8413130CAFFD0AFF0C130C8413131360FD04FF590C0C3559
%0C0C13A8FD09FFA8350C13590C0C0C84FFFFFFA8350C0C59350C0C84FD09
%FF840C0C590C35133513130C5913841235FF35123584131284AE1335A8FD
%09FF84131360841212AEFD04FF84351360A8350C35FD0BFF351235A86013
%35FD05FFAE131259FF121335FD0BFF353512AF350C13FD05FF591312AF59
%0C13AFFD09FFAF131284AE1335AE351335FF60131335120C59131360590C
%13600C135984598459845984590C5959130C595913605984590C3584130C
%35AF0C35598459845984598459350CAF353513601335598435601335600C
%13358413128459845984598459840C138435130C350C35843584350C6035
%130C59350C8459845984598459601335350C1360350C0C841335350C0C13
%0C84FFA860FFFF5960FFFF3535355935353559353559FFFF6059FFFF6035
%59130C35FFFFAF35FFFFAF0C0C130C130C130C130C12AFFFFF3584FFAF12
%0C130C1335AFFF8435AFFFA835130C130C130C130C1335A8FFAF5FA8FF84
%0C130C130C84FFAF3584FFAF35130C130C130C130C1335AFFF5960FFFF35
%AFFFAF120C13FD7FFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(New Pattern 6)
0 A
u800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
-7894 8612 m
-7855.7378 8612 L
-7855.7378 8569.1934 L
-7894 8569.1934 L
-7894 8612 L
nu0 O
1 0.15 0.5 0 (GOLDA) 0 0 Xk
-7886.2202 8571.0254 m
-7891.2642 8576.2383 l
-7894 8576.2383 l
-7894 8574.6133 l
-7891.75 8574.6133 l
-7886.2202 8569.1934 L
F-7885.6001 8573.7451 m
-7881.1377 8569.1934 l
-7868.562 8569.1934 l
-7860.4575 8577.3516 L
-7868.562 8585.4082 l
-7881.1377 8585.4082 l
-7889.2617 8577.3516 L
-7887.2593 8575.3506 l
-7886.2383 8576.3711 l
-7887.2407 8577.3516 L
-7880.6318 8583.9316 l
-7869.0479 8583.9316 l
-7862.3618 8577.3516 L
-7869.0479 8570.7734 l
-7880.6318 8570.7734 l
-7884.645 8574.7686 L
-7885.6001 8573.7451 L
f-7862.2969 8579.6924 m
-7857.9888 8583.9316 l
-7855.7378 8583.9316 l
-7855.7378 8585.4082 l
-7858.4746 8585.4082 l
-7863.2583 8580.6543 L
-7862.2969 8579.6924 L
f-7864.8154 8579.1553 m
-7866.5791 8577.3516 L
-7858.4746 8569.1934 l
-7855.7378 8569.1934 l
-7855.7378 8570.7734 l
-7857.9888 8570.7734 l
-7864.6753 8577.3516 L
-7863.8306 8578.168 l
-7864.8154 8579.1553 l
f-7894 8569.1934 m
-7890.6616 8569.1934 l
-7882.645 8577.3516 L
-7890.7305 8585.4082 l
-7894 8585.4082 l
-7894 8583.9316 l
-7891.416 8583.9316 l
-7884.73 8577.3516 L
-7891.147 8570.7734 l
-7894 8570.7734 l
-7894 8569.1934 l
f-7881.4702 8578.4668 m
-7876.9263 8578.4668 l
-7872.8833 8574.6133 l
-7869.0479 8574.6133 l
-7863.5186 8569.1934 L
-7857.9888 8574.6133 l
-7855.7378 8574.6133 l
-7855.7378 8576.2383 l
-7858.4746 8576.2383 l
-7863.5186 8571.0254 L
-7868.562 8576.2383 l
-7872.3135 8576.2383 l
-7876.2847 8580.0898 l
-7880.96 8580.0898 L
-7886.2202 8585.623 L
-7891.75 8580.0898 l
-7894 8580.0898 l
-7894 8578.4668 l
-7891.2642 8578.4668 l
-7886.2202 8583.6797 L
-7881.4702 8578.4668 L
f-7873.2729 8577.7188 m
-7872.521 8578.4668 l
-7868.562 8578.4668 l
-7863.5186 8583.6797 L
-7858.4746 8578.4668 l
-7855.7378 8578.4668 l
-7855.7378 8580.0898 l
-7857.9888 8580.0898 l
-7863.5186 8585.623 L
-7869.0479 8580.0898 l
-7872.8833 8580.0898 l
-7874.2769 8578.7227 l
-7873.2729 8577.7188 l
f-7886.2246 8571.0586 m
-7881.4487 8576.2383 l
-7877.2378 8576.2383 l
-7876.0625 8577.1836 l
-7875.0342 8576.1895 l
-7876.8042 8574.6133 l
-7880.9434 8574.6133 l
-7886.2246 8569.1934 l
FU1 Ap
-7855.7378 8612 m
-7894 8612 L
-7894 8569.1934 L
-7855.7378 8569.1934 L
-7855.7378 8612 L
nU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 8)
0 A
u0 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
-7894 8612 m
-7850.7744 8612 L
-7850.7744 8569.1934 L
-7894 8569.1934 L
-7894 8612 L
nu0 O
1 0.15 0.5 0 (GOLDA) 0 0 Xk
-7880.5322 8573.6416 m
-7876.1738 8569.1934 l
-7863.5986 8569.1934 l
-7855.4946 8577.3516 L
-7863.5986 8585.4082 l
-7876.1738 8585.4082 l
-7884.2993 8577.3516 L
-7882.1406 8575.2129 l
-7881.1191 8576.2324 l
-7882.2778 8577.3516 L
-7875.668 8583.9316 l
-7864.084 8583.9316 l
-7857.3984 8577.3516 L
-7864.084 8570.7734 l
-7875.668 8570.7734 l
-7879.5786 8574.665 L
-7880.5322 8573.6416 L
f-7889.3823 8582.0879 m
-7893.6895 8586.5469 l
-7893.6895 8599.123 l
-7885.6328 8607.2266 L
-7877.5786 8599.123 l
-7877.5786 8586.5469 l
-7885.6328 8578.4229 L
-7887.5527 8580.3604 l
-7886.5322 8581.3809 l
-7885.6328 8580.4443 L
-7879.0542 8587.0527 l
-7879.0542 8598.6367 l
-7885.6328 8605.3223 L
-7892.2119 8598.6367 l
-7892.2119 8587.0527 l
-7888.3198 8583.1436 L
-7889.3823 8582.0879 L
f-7891.6182 8575.2305 m
-7893.6138 8577.168 L
-7885.624 8585.1836 L
-7881.3135 8580.8594 L
-7882.355 8579.8438 L
-7885.624 8583.1016 L
-7891.6206 8577.168 L
-7890.6602 8576.1641 L
-7891.6182 8575.2305 L
f-7890.0513 8573.543 m
-7885.624 8569.1934 L
-7877.6353 8577.168 L
-7879.7222 8579.2617 L
-7880.7153 8578.2441 L
-7879.626 8577.168 L
-7885.624 8570.9805 L
-7889.0786 8574.5156 L
-7890.0513 8573.543 L
f-7850.7744 8569.1934 m
-7853.5122 8569.1934 l
-7861.6162 8577.3516 L
-7853.5122 8585.4082 l
-7850.7744 8585.4082 l
-7850.7744 8583.9316 l
-7853.0254 8583.9316 l
-7859.7114 8577.3516 L
-7853.0254 8570.7734 l
-7850.7744 8570.7734 l
-7850.7744 8569.1934 l
f-7885.373 8592.127 m
-7884.229 8590.9824 l
-7884.229 8586.7715 l
-7876.1738 8578.4668 l
-7871.9634 8578.4668 l
-7867.9199 8574.6133 l
-7864.084 8574.6133 l
-7858.5542 8569.1934 L
-7853.0254 8574.6133 l
-7850.7744 8574.6133 l
-7850.7744 8576.2383 l
-7853.5122 8576.2383 l
-7858.5542 8571.0254 L
-7863.5986 8576.2383 l
-7867.5566 8576.2383 l
-7871.5298 8580.0898 l
-7875.668 8580.0898 l
-7882.6543 8587.2764 l
-7882.6543 8591.416 l
-7884.3496 8593.1387 l
-7885.373 8592.127 l
f-7868.2886 8577.6211 m
-7867.5566 8578.4668 l
-7863.5986 8578.4668 l
-7858.5542 8583.6797 L
-7853.5122 8578.4668 l
-7850.7744 8578.4668 l
-7850.7744 8580.0898 l
-7853.0254 8580.0898 l
-7858.5542 8585.623 L
-7864.084 8580.0898 l
-7867.9199 8580.0898 l
-7869.293 8578.626 l
-7868.2886 8577.6211 l
f-7877.4609 8612 m
-7877.4609 8609.3164 l
-7885.6094 8601.1465 L
-7893.666 8609.251 l
-7893.666 8612 l
-7892.209 8612 l
-7892.209 8609.7363 l
-7885.6094 8603.0508 L
-7879.0313 8609.7363 l
-7879.0313 8612 l
-7877.4609 8612 l
f-7879.3984 8604.3848 m
-7884.5122 8609.2656 l
-7884.5122 8612 l
-7882.8848 8612 l
-7882.8848 8609.752 l
-7877.3359 8604.3779 L
-7882.9766 8598.8604 l
-7882.9766 8595.0244 l
-7887.019 8590.9824 l
-7887.019 8586.7715 l
-7891.918 8581.9941 l
-7886.9414 8577.168 l
-7892.1802 8572.0859 l
-7892.1802 8570.7734 L
-7890.8936 8570.7734 l
-7885.7778 8576.0342 l
-7880.9502 8571.0586 l
-7876.1738 8576.2383 l
-7871.9634 8576.2383 l
-7871.1343 8576.9629 l
-7870.125 8575.9131 l
-7871.5298 8574.6133 l
-7875.668 8574.6133 l
-7880.9502 8569.1934 l
-7885.7778 8573.8574 l
-7890.4673 8569.1934 l
-7893.8506 8569.1934 L
-7893.8618 8572.4785 l
-7889.1191 8577.168 l
-7894 8581.9941 l
-7888.5938 8587.2764 l
-7888.5938 8591.416 l
-7884.6226 8595.3877 l
-7884.6226 8599.3457 l
-7879.3984 8604.3848 L
f-7885.8794 8594.4727 m
-7886.6113 8595.2051 l
-7886.6113 8599.1641 l
-7891.7466 8604.207 L
-7886.7402 8609.251 l
-7886.7402 8612 l
-7888.3599 8612 l
-7888.3599 8609.7363 l
-7893.8809 8604.207 L
-7888.2568 8598.6777 l
-7888.2568 8594.8418 l
-7886.8833 8593.4688 l
-7885.8794 8594.4727 l
fU1 Ap
-7850.7744 8612 m
-7893.8506 8612 L
-7893.8506 8569.1934 L
-7850.7744 8569.1934 L
-7850.7744 8612 L
nU%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
0 0 0 1 k
(black) Pc
0 0 0 0 k
(white) Pc
1 0 0 0 k
(cyan) Pc
0 1 0 0 k
(magenta) Pc
0 0 1 0 k
(yellow) Pc
1 0.15 0.5 0 (GOLDA) 0 0 Xk
(GOLDA) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Pattern Brush 1)
(1 / New Pattern 6/ / New Pattern 8/ / / 5 0.960784 0.772549 0.419608 /) -
(  1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe PatternOnPath Brush Tool/ Pattern Brush 1/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u0 Ap
0 O
1 0.15 0.5 0 (GOLDA) 0 0 Xk
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
259.5254 435.7471 m
265.6348 441.9814 l
283.2617 441.9814 l
294.6221 430.5459 L
283.2617 419.2529 l
265.6348 419.2529 l
254.2456 430.5459 L
257.271 433.5449 l
258.7026 432.1147 l
257.0796 430.5459 L
266.3438 421.3232 l
282.5815 421.3232 l
291.9526 430.5459 L
282.5815 439.7676 l
266.3438 439.7676 l
260.8628 434.3125 L
259.5254 435.7471 L
f247.1196 423.9082 m
241.0825 417.6572 l
241.0825 400.0293 l
252.376 388.6699 L
263.6665 400.0293 l
263.6665 417.6572 l
252.376 429.0449 L
249.6846 426.3291 l
251.1152 424.8984 l
252.376 426.2114 L
261.5967 416.9482 l
261.5967 400.7109 l
252.376 391.3389 L
243.1538 400.7109 l
243.1538 416.9482 l
248.6089 422.4277 L
247.1196 423.9082 L
f243.9863 433.519 m
241.1895 430.8047 L
252.3882 419.5684 L
258.4307 425.6304 L
256.9697 427.0532 L
252.3882 422.4858 L
243.9819 430.8047 L
245.3291 432.2109 L
243.9863 433.519 L
f246.1831 435.8853 m
252.3882 441.9814 L
263.5869 430.8047 L
260.6602 427.8682 L
259.2695 429.2949 L
260.7959 430.8047 L
252.3882 439.4766 L
247.5464 434.522 L
246.1831 435.8853 L
f301.2383 441.9814 m
297.4009 441.9814 l
286.0405 430.5459 L
297.4009 419.2529 l
301.2383 419.2529 l
301.2383 421.3232 l
298.083 421.3232 l
288.7114 430.5459 L
298.083 439.7676 l
301.2383 439.7676 l
301.2383 441.9814 l
f252.7402 409.8359 m
254.3442 411.4395 l
254.3442 417.3428 l
265.6348 428.9839 l
271.5376 428.9839 l
277.2046 434.3857 l
282.5815 434.3857 l
290.332 441.9814 L
298.083 434.3857 l
301.2383 434.3857 l
301.2383 432.1069 l
297.4009 432.1069 l
290.332 439.4141 L
283.2617 432.1069 l
277.7139 432.1069 l
272.145 426.7075 l
266.3438 426.7075 l
256.5508 416.6348 l
256.5508 410.832 l
254.1748 408.417 l
252.7402 409.8359 l
f276.687 430.168 m
277.7139 428.9839 l
283.2617 428.9839 l
290.332 421.6763 L
297.4009 428.9839 l
301.2383 428.9839 l
301.2383 426.7075 l
298.083 426.7075 l
290.332 418.9521 L
282.5815 426.7075 l
277.2046 426.7075 l
275.2798 428.7603 l
276.687 430.168 l
f263.8306 381.9785 m
263.8306 385.7402 l
252.4087 397.1924 L
241.1157 385.832 l
241.1157 381.9785 l
243.1577 381.9785 l
243.1577 385.1523 l
252.4087 394.5234 L
261.6294 385.1523 l
261.6294 381.9785 l
263.8306 381.9785 l
f261.1147 392.6533 m
253.9473 385.8115 l
253.9473 381.9785 l
256.228 381.9785 l
256.228 385.1299 l
264.0059 392.6631 L
256.0991 400.3975 l
256.0991 405.7744 l
250.4321 411.4395 l
250.4321 417.3428 l
243.5659 424.0381 l
250.5415 430.8047 l
243.1992 437.9268 l
243.1992 439.7676 L
245.002 439.7676 l
252.1733 432.3931 l
258.9395 439.3677 l
265.6348 432.1069 l
271.5376 432.1069 l
272.6982 431.0913 l
274.1138 432.563 l
272.145 434.3857 l
266.3438 434.3857 l
258.9395 441.9814 l
252.1733 435.4443 l
245.6001 441.9814 l
240.8569 441.9814 L
240.8418 437.3765 l
247.4893 430.8047 l
240.6475 424.0381 l
248.2256 416.6348 l
248.2256 410.832 l
253.7925 405.2646 l
253.7925 399.7168 l
261.1147 392.6533 L
f252.0308 406.5479 m
251.0044 405.5205 l
251.0044 399.9717 l
243.8066 392.9023 L
250.8237 385.832 l
250.8237 381.9785 l
248.5527 381.9785 l
248.5527 385.1523 l
240.8145 392.9023 L
248.6978 400.6533 l
248.6978 406.0303 l
250.6235 407.9551 l
252.0308 406.5479 l
fUu320.1924 439.4141 m
313.1221 432.1069 l
309.2871 432.1069 l
309.2871 434.3857 l
312.4404 434.3857 l
320.1924 441.9814 L
F321.0615 435.6021 m
327.3164 441.9814 l
344.9443 441.9814 l
356.3037 430.5459 L
344.9443 419.2529 l
327.3164 419.2529 l
315.9287 430.5459 L
318.7363 433.3516 l
320.167 431.9204 l
318.7607 430.5459 L
328.0254 421.3232 l
344.2627 421.3232 l
353.6338 430.5459 L
344.2627 439.7676 l
328.0254 439.7676 l
322.3994 434.1675 L
321.0615 435.6021 L
f353.7256 427.2656 m
359.7637 421.3232 l
362.9209 421.3232 l
362.9209 419.2529 l
359.084 419.2529 l
352.3779 425.918 L
353.7256 427.2656 L
f350.1953 428.0181 m
347.7236 430.5459 L
359.084 441.9814 l
362.9209 441.9814 l
362.9209 439.7676 l
359.7637 439.7676 l
350.3926 430.5459 L
351.5752 429.4023 l
350.1953 428.0181 l
f309.2871 441.9814 m
313.9668 441.9814 l
325.2031 430.5459 L
313.8701 419.2529 l
309.2871 419.2529 l
309.2871 421.3232 l
312.9092 421.3232 l
322.2813 430.5459 L
313.2852 439.7676 l
309.2871 439.7676 l
309.2871 441.9814 l
f326.8506 428.9839 m
333.2188 428.9839 l
338.8857 434.3857 l
344.2627 434.3857 l
352.0137 441.9814 L
359.7637 434.3857 l
362.9209 434.3857 l
362.9209 432.1069 l
359.084 432.1069 l
352.0137 439.4141 L
344.9443 432.1069 l
339.6855 432.1069 l
334.1191 426.7075 l
327.5654 426.7075 L
320.1924 418.9521 L
312.4404 426.7075 l
309.2871 426.7075 l
309.2871 428.9839 l
313.1221 428.9839 l
320.1924 421.6763 L
326.8506 428.9839 L
f338.3408 430.0317 m
339.3955 428.9839 l
344.9443 428.9839 l
352.0137 421.6763 L
359.084 428.9839 l
362.9209 428.9839 l
362.9209 426.7075 l
359.7637 426.7075 l
352.0137 418.9521 L
344.2627 426.7075 l
338.8857 426.7075 l
336.9336 428.624 l
338.3408 430.0317 l
f320.1846 439.3677 m
326.8809 432.1069 l
332.7832 432.1069 l
334.4307 430.7827 l
335.8721 432.1748 l
333.3916 434.3857 l
327.5889 434.3857 l
320.1846 441.9814 l
FUu%_1 Ap
%_0 R
%_1 0.15 0.5 0 (GOLDA) 0 0 XK
%_1.4017 w 1 M%_390.8057 365.2334 m
%_217.7446 365.2334 L
%_217.7446 463.3545 L
%_390.8057 463.3545 L
%_390.8057 365.2334 L
%_s%_U%_0 Ap
0 A
u1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
390.8057 365.2334 m
217.7446 365.2334 L
217.7446 463.3545 L
390.8057 463.3545 L
390.8057 365.2334 L
nu0 Ap
0 O
1 0.15 0.5 0 (GOLDA) 0 0 Xk
190.311 402.9854 m
197.6182 397.9609 L
197.6182 395.2354 L
195.3403 395.2354 L
195.3403 397.4766 L
187.7432 402.9854 L
F194.1235 403.6035 m
187.7432 408.0488 L
187.7432 420.5771 L
199.1787 428.6509 L
210.4717 420.5771 L
210.4717 408.0488 L
199.1787 399.9551 L
196.374 401.9502 L
197.8042 402.9678 L
199.1787 401.9688 L
208.4019 408.5527 L
208.4019 420.0933 L
199.1787 426.7539 L
189.958 420.0933 L
189.958 408.5527 L
195.5581 404.5547 L
194.1235 403.6035 L
f202.46 426.8184 m
208.4019 431.1104 L
208.4019 433.353 L
210.4717 433.353 L
210.4717 430.6265 L
203.8081 425.8608 L
202.46 426.8184 L
f201.707 424.3096 m
199.1787 422.5527 L
187.7432 430.6265 L
187.7432 433.353 L
189.958 433.353 L
189.958 431.1104 L
199.1787 424.4492 L
200.3228 425.2905 L
201.707 424.3096 L
f187.7432 395.2354 m
187.7432 398.5605 L
199.1787 406.5469 L
210.4717 398.4922 L
210.4717 395.2354 L
208.4019 395.2354 L
208.4019 397.8096 L
199.1787 404.4697 L
189.958 398.0771 L
189.958 395.2354 L
187.7432 395.2354 L
f200.7417 407.7178 m
200.7417 412.2441 L
195.3403 416.2725 L
195.3403 420.0933 L
187.7432 425.6016 L
195.3403 431.1104 L
195.3403 433.353 L
197.6182 433.353 L
197.6182 430.6265 L
190.311 425.6016 L
197.6182 420.5771 L
197.6182 416.8398 L
203.0171 412.8838 L
203.0171 408.2256 L
210.7729 402.9854 L
203.0171 397.4766 L
203.0171 395.2354 L
200.7417 395.2354 L
200.7417 397.9609 L
208.0488 402.9854 L
200.7417 407.7178 L
f199.6934 415.8838 m
200.7417 416.6328 L
200.7417 420.5771 L
208.0488 425.6016 L
200.7417 430.6265 L
200.7417 433.353 L
203.0171 433.353 L
203.0171 431.1104 L
210.7729 425.6016 L
203.0171 420.0933 L
203.0171 416.2725 L
201.1006 414.8838 L
199.6934 415.8838 L
f190.3574 402.9814 m
197.6182 407.7393 L
197.6182 411.9336 L
198.9434 413.1045 L
197.5498 414.1289 L
195.3403 412.3662 L
195.3403 408.2422 L
187.7432 402.9814 L
FUu259.2402 490.7881 m
251.7881 483.481 L
247.7461 483.481 L
247.7461 485.7588 L
251.0703 485.7588 L
259.2402 493.356 L
F260.1563 486.9756 m
266.749 493.356 L
285.3286 493.356 L
297.3022 481.9204 L
285.3286 470.6274 L
266.749 470.6274 L
254.7466 481.9204 L
257.7051 484.7256 L
259.2134 483.2949 L
257.7324 481.9204 L
267.4966 472.6973 L
284.6108 472.6973 L
294.4888 481.9204 L
284.6108 491.1411 L
267.4966 491.1411 L
261.5674 485.541 L
260.1563 486.9756 L
f294.5845 478.6392 m
300.9492 472.6973 L
304.2754 472.6973 L
304.2754 470.6274 L
300.2314 470.6274 L
293.1641 477.291 L
294.5845 478.6392 L
f290.8638 479.3921 m
288.2583 481.9204 L
300.2314 493.356 L
304.2754 493.356 L
304.2754 491.1411 L
300.9492 491.1411 L
291.0708 481.9204 L
292.3188 480.7764 L
290.8638 479.3921 L
f247.7461 493.356 m
252.6782 493.356 L
264.522 481.9204 L
252.5767 470.6274 L
247.7461 470.6274 L
247.7461 472.6973 L
251.564 472.6973 L
261.4419 481.9204 L
251.9614 491.1411 L
247.7461 491.1411 L
247.7461 493.356 L
f266.2578 480.3574 m
272.9712 480.3574 L
278.9443 485.7588 L
284.6108 485.7588 L
292.7798 493.356 L
300.9492 485.7588 L
304.2754 485.7588 L
304.2754 483.481 L
300.2314 483.481 L
292.7798 490.7881 L
285.3286 483.481 L
279.7861 483.481 L
273.9189 478.082 L
267.0117 478.082 L
259.2402 470.3262 L
251.0703 478.082 L
247.7461 478.082 L
247.7461 480.3574 L
251.7881 480.3574 L
259.2402 473.0503 L
266.2578 480.3574 L
f278.3687 481.4058 m
279.4795 480.3574 L
285.3286 480.3574 L
292.7798 473.0503 L
300.2314 480.3574 L
304.2754 480.3574 L
304.2754 478.082 L
300.9492 478.082 L
292.7798 470.3262 L
284.6108 478.082 L
278.9443 478.082 L
276.8853 479.9985 L
278.3687 481.4058 L
f259.2334 490.7417 m
266.2896 483.481 L
272.5107 483.481 L
274.2471 482.1558 L
275.7666 483.5493 L
273.1514 485.7588 L
267.0361 485.7588 L
259.2334 493.356 L
FUu315.7695 490.7881 m
308.3174 483.481 L
304.2754 483.481 L
304.2754 485.7588 L
307.5996 485.7588 L
315.7695 493.356 L
F316.6855 486.9756 m
323.2783 493.356 L
341.8574 493.356 L
353.8311 481.9204 L
341.8574 470.6274 L
323.2783 470.6274 L
311.2754 481.9204 L
314.2344 484.7256 L
315.7422 483.2949 L
314.2617 481.9204 L
324.0254 472.6973 L
341.1396 472.6973 L
351.0176 481.9204 L
341.1396 491.1411 L
324.0254 491.1411 L
318.0967 485.541 L
316.6855 486.9756 L
f351.1133 478.6392 m
357.4785 472.6973 L
360.8037 472.6973 L
360.8037 470.6274 L
356.7607 470.6274 L
349.6934 477.291 L
351.1133 478.6392 L
f347.3926 479.3921 m
344.7871 481.9204 L
356.7607 493.356 L
360.8037 493.356 L
360.8037 491.1411 L
357.4785 491.1411 L
347.5996 481.9204 L
348.8477 480.7764 L
347.3926 479.3921 L
f304.2754 493.356 m
309.207 493.356 L
321.0508 481.9204 L
309.1055 470.6274 L
304.2754 470.6274 L
304.2754 472.6973 L
308.0928 472.6973 L
317.9707 481.9204 L
308.4902 491.1411 L
304.2754 491.1411 L
304.2754 493.356 L
f322.7871 480.3574 m
329.5 480.3574 L
335.4727 485.7588 L
341.1396 485.7588 L
349.3086 493.356 L
357.4785 485.7588 L
360.8037 485.7588 L
360.8037 483.481 L
356.7607 483.481 L
349.3086 490.7881 L
341.8574 483.481 L
336.3154 483.481 L
330.4482 478.082 L
323.541 478.082 L
315.7695 470.3262 L
307.5996 478.082 L
304.2754 478.082 L
304.2754 480.3574 L
308.3174 480.3574 L
315.7695 473.0503 L
322.7871 480.3574 L
f334.8975 481.4058 m
336.0088 480.3574 L
341.8574 480.3574 L
349.3086 473.0503 L
356.7607 480.3574 L
360.8037 480.3574 L
360.8037 478.082 L
357.4785 478.082 L
349.3086 470.3262 L
341.1396 478.082 L
335.4727 478.082 L
333.4141 479.9985 L
334.8975 481.4058 L
f315.7627 490.7417 m
322.8184 483.481 L
329.04 483.481 L
330.7764 482.1558 L
332.2949 483.5493 L
329.6807 485.7588 L
323.5654 485.7588 L
315.7627 493.356 L
FUu418.2393 425.6025 m
410.9326 430.6274 L
410.9326 433.353 L
413.21 433.353 L
413.21 431.1113 L
420.8076 425.6025 L
F414.4268 424.9849 m
420.8076 420.5391 L
420.8076 408.0107 L
409.3721 399.9365 L
398.0781 408.0107 L
398.0781 420.5391 L
409.3721 428.6323 L
412.1768 426.6377 L
410.7461 425.6206 L
409.3721 426.6191 L
400.1484 420.0352 L
400.1484 408.4951 L
409.3721 401.834 L
418.5928 408.4951 L
418.5928 420.0352 L
412.9922 424.0332 L
414.4268 424.9849 L
f406.0908 401.7695 m
400.1484 397.4775 L
400.1484 395.2354 L
398.0781 395.2354 L
398.0781 397.9619 L
404.7422 402.7275 L
406.0908 401.7695 L
f406.8438 404.2783 m
409.3721 406.0352 L
420.8076 397.9619 L
420.8076 395.2354 L
418.5928 395.2354 L
418.5928 397.4775 L
409.3721 404.1387 L
408.2275 403.2969 L
406.8438 404.2783 L
f420.8076 433.353 m
420.8076 430.0273 L
409.3721 422.0405 L
398.0781 430.0957 L
398.0781 433.353 L
400.1484 433.353 L
400.1484 430.7788 L
409.3721 424.1177 L
418.5928 430.5107 L
418.5928 433.353 L
420.8076 433.353 L
f407.8086 420.8701 m
407.8086 416.3438 L
413.21 412.3154 L
413.21 408.4951 L
420.8076 402.9863 L
413.21 397.4775 L
413.21 395.2354 L
410.9326 395.2354 L
410.9326 397.9619 L
418.2393 402.9863 L
410.9326 408.0107 L
410.9326 411.748 L
405.5332 415.7041 L
405.5332 420.3618 L
397.7773 425.6025 L
405.5332 431.1113 L
405.5332 433.353 L
407.8086 433.353 L
407.8086 430.6274 L
400.501 425.6025 L
407.8086 420.8701 L
f408.8574 412.7041 m
407.8086 411.9551 L
407.8086 408.0107 L
400.501 402.9863 L
407.8086 397.9619 L
407.8086 395.2354 L
405.5332 395.2354 L
405.5332 397.4775 L
397.7773 402.9863 L
405.5332 408.4951 L
405.5332 412.3154 L
407.4502 413.7041 L
408.8574 412.7041 L
f418.1924 425.6069 m
410.9326 420.8491 L
410.9326 416.6543 L
409.6074 415.4834 L
411.001 414.459 L
413.21 416.2217 L
413.21 420.3457 L
420.8076 425.6069 L
FUu349.3105 337.7998 m
356.7617 345.1064 L
360.8037 345.1064 L
360.8037 342.8291 L
357.4795 342.8291 L
349.3105 335.2314 L
F348.3936 341.6123 m
341.8008 335.2314 L
323.2217 335.2314 L
311.248 346.667 L
323.2217 357.9609 L
341.8008 357.9609 L
353.8037 346.667 L
350.8457 343.8623 L
349.3369 345.293 L
350.8174 346.667 L
341.0537 355.8906 L
323.9395 355.8906 L
314.0615 346.667 L
323.9395 337.4463 L
341.0537 337.4463 L
346.9834 343.0469 L
348.3936 341.6123 L
f313.9658 349.9482 m
307.6006 355.8906 L
304.2754 355.8906 L
304.2754 357.9609 L
308.3184 357.9609 L
315.3857 351.2969 L
313.9658 349.9482 L
f317.6865 349.1953 m
320.292 346.667 L
308.3184 335.2314 L
304.2754 335.2314 L
304.2754 337.4463 L
307.6006 337.4463 L
317.4795 346.667 L
316.2314 347.8115 L
317.6865 349.1953 L
f360.8037 335.2314 m
355.8721 335.2314 L
344.0283 346.667 L
355.9736 357.9609 L
360.8037 357.9609 L
360.8037 355.8906 L
356.9863 355.8906 L
347.1084 346.667 L
356.5889 337.4463 L
360.8037 337.4463 L
360.8037 335.2314 L
f342.292 348.2305 m
335.5791 348.2305 L
329.6064 342.8291 L
323.9395 342.8291 L
315.7705 335.2314 L
307.6006 342.8291 L
304.2754 342.8291 L
304.2754 345.1064 L
308.3184 345.1064 L
315.7705 337.7998 L
323.2217 345.1064 L
328.7646 345.1064 L
334.6309 350.5059 L
341.5391 350.5059 L
349.3105 358.2617 L
357.4795 350.5059 L
360.8037 350.5059 L
360.8037 348.2305 L
356.7617 348.2305 L
349.3105 355.5381 L
342.292 348.2305 L
f330.1816 347.1816 m
329.0703 348.2305 L
323.2217 348.2305 L
315.7705 355.5381 L
308.3184 348.2305 L
304.2754 348.2305 L
304.2754 350.5059 L
307.6006 350.5059 L
315.7705 358.2617 L
323.9395 350.5059 L
329.6064 350.5059 L
331.665 348.5889 L
330.1816 347.1816 L
f349.3164 337.8467 m
342.2607 345.1064 L
336.0391 345.1064 L
334.3027 346.4316 L
332.7842 345.0381 L
335.3984 342.8291 L
341.5137 342.8291 L
349.3164 335.2314 L
FUu292.7813 337.7998 m
300.2334 345.1064 L
304.2754 345.1064 L
304.2754 342.8291 L
300.9512 342.8291 L
292.7813 335.2314 L
F291.8652 341.6123 m
285.2725 335.2314 L
266.6929 335.2314 L
254.7192 346.667 L
266.6929 357.9609 L
285.2725 357.9609 L
297.2749 346.667 L
294.3164 343.8623 L
292.8081 345.293 L
294.2891 346.667 L
284.5249 355.8906 L
267.4106 355.8906 L
257.5327 346.667 L
267.4106 337.4463 L
284.5249 337.4463 L
290.4541 343.0469 L
291.8652 341.6123 L
f257.4365 349.9482 m
251.0718 355.8906 L
247.7461 355.8906 L
247.7461 357.9609 L
251.7896 357.9609 L
258.8569 351.2969 L
257.4365 349.9482 L
f261.1577 349.1953 m
263.7632 346.667 L
251.7896 335.2314 L
247.7461 335.2314 L
247.7461 337.4463 L
251.0718 337.4463 L
260.9507 346.667 L
259.7026 347.8115 L
261.1577 349.1953 L
f304.2754 335.2314 m
299.3428 335.2314 L
287.499 346.667 L
299.4443 357.9609 L
304.2754 357.9609 L
304.2754 355.8906 L
300.458 355.8906 L
290.5796 346.667 L
300.0605 337.4463 L
304.2754 337.4463 L
304.2754 335.2314 L
f285.7637 348.2305 m
279.0503 348.2305 L
273.0771 342.8291 L
267.4106 342.8291 L
259.2417 335.2314 L
251.0718 342.8291 L
247.7461 342.8291 L
247.7461 345.1064 L
251.7896 345.1064 L
259.2417 337.7998 L
266.6929 345.1064 L
272.2354 345.1064 L
278.1025 350.5059 L
285.0098 350.5059 L
292.7813 358.2617 L
300.9512 350.5059 L
304.2754 350.5059 L
304.2754 348.2305 L
300.2334 348.2305 L
292.7813 355.5381 L
285.7637 348.2305 L
f273.6528 347.1816 m
272.542 348.2305 L
266.6929 348.2305 L
259.2417 355.5381 L
251.7896 348.2305 L
247.7461 348.2305 L
247.7461 350.5059 L
251.0718 350.5059 L
259.2417 358.2617 L
267.4106 350.5059 L
273.0771 350.5059 L
275.1357 348.5889 L
273.6528 347.1816 L
f292.7876 337.8467 m
285.7319 345.1064 L
279.5107 345.1064 L
277.7739 346.4316 L
276.2549 345.0381 L
278.8701 342.8291 L
284.9854 342.8291 L
292.7876 335.2314 L
FUu206.3276 487.1211 m
212.437 493.356 L
230.064 493.356 L
241.4233 481.9204 L
230.064 470.6274 L
212.437 470.6274 L
201.0469 481.9204 L
204.0732 484.9185 L
205.5049 483.4893 L
203.8809 481.9204 L
213.146 472.6973 L
229.3833 472.6973 L
238.7549 481.9204 L
229.3833 491.1411 L
213.146 491.1411 L
207.6641 485.6865 L
206.3276 487.1211 L
f193.9224 475.2813 m
187.8848 469.0313 L
187.8848 451.4028 L
199.1777 440.0439 L
210.4678 451.4028 L
210.4678 469.0313 L
199.1777 480.4189 L
196.4868 477.7031 L
197.917 476.2725 L
199.1777 477.5854 L
208.3994 468.3223 L
208.3994 452.0845 L
199.1777 442.7134 L
189.9561 452.0845 L
189.9561 468.3223 L
195.4116 473.8018 L
193.9224 475.2813 L
f190.7881 484.8936 m
187.9907 482.1777 L
199.1904 470.9424 L
205.2324 477.0034 L
203.7725 478.4272 L
199.1904 473.8604 L
190.7847 482.1777 L
192.1309 483.585 L
190.7881 484.8936 L
f192.9844 487.2593 m
199.1904 493.356 L
210.3882 482.1777 L
207.4629 479.2432 L
206.0708 480.6694 L
207.5977 482.1777 L
199.1904 490.8511 L
194.3477 485.8955 L
192.9844 487.2593 L
f248.04 493.356 m
244.2021 493.356 L
232.8428 481.9204 L
244.2021 470.6274 L
248.04 470.6274 L
248.04 472.6973 L
244.8848 472.6973 L
235.5127 481.9204 L
244.8848 491.1411 L
248.04 491.1411 L
248.04 493.356 L
f199.542 461.2095 m
201.1455 462.814 L
201.1455 468.7163 L
212.437 480.3574 L
218.3389 480.3574 L
224.0063 485.7588 L
229.3833 485.7588 L
237.1348 493.356 L
244.8848 485.7588 L
248.04 485.7588 L
248.04 483.481 L
244.2021 483.481 L
237.1348 490.7881 L
230.064 483.481 L
224.5156 483.481 L
218.9463 478.082 L
213.146 478.082 L
203.353 468.0088 L
203.353 462.2061 L
200.9766 459.7915 L
199.542 461.2095 L
f223.4897 481.543 m
224.5156 480.3574 L
230.064 480.3574 L
237.1348 473.0503 L
244.2021 480.3574 L
248.04 480.3574 L
248.04 478.082 L
244.8848 478.082 L
237.1348 470.3262 L
229.3833 478.082 L
224.0063 478.082 L
222.082 480.1343 L
223.4897 481.543 L
f210.6328 433.353 m
210.6328 437.1147 L
199.2109 448.5664 L
187.9175 437.2061 L
187.9175 433.353 L
189.96 433.353 L
189.96 436.5259 L
199.2109 445.8975 L
208.4316 436.5259 L
208.4316 433.353 L
210.6328 433.353 L
f207.917 444.0273 m
200.7485 437.1855 L
200.7485 433.353 L
203.0298 433.353 L
203.0298 436.5039 L
210.8076 444.0371 L
202.9014 451.771 L
202.9014 457.1479 L
197.2349 462.814 L
197.2349 468.7163 L
190.3677 475.4131 L
197.3438 482.1777 L
190.0005 489.3013 L
190.0005 491.1411 L
191.8037 491.1411 L
198.9746 483.7671 L
205.7417 490.7417 L
212.437 483.481 L
218.3389 483.481 L
219.501 482.4653 L
220.9155 483.937 L
218.9463 485.7588 L
213.146 485.7588 L
205.7417 493.356 L
198.9746 486.8184 L
192.4014 493.356 L
187.6587 493.356 L
187.6431 488.751 L
194.291 482.1777 L
187.4492 475.4131 L
195.0273 468.0088 L
195.0273 462.2061 L
200.5942 456.6387 L
200.5942 451.0908 L
207.917 444.0273 L
f198.832 457.9214 m
197.8062 456.8945 L
197.8062 451.3452 L
190.6079 444.2764 L
197.6255 437.2061 L
197.6255 433.353 L
195.3555 433.353 L
195.3555 436.5259 L
187.6162 444.2764 L
195.5 452.0269 L
195.5 457.4038 L
197.4253 459.3286 L
198.832 457.9214 L
fUu414.5723 474.7715 m
420.8076 468.6621 L
420.8076 451.0352 L
409.3721 439.6758 L
398.0781 451.0352 L
398.0781 468.6621 L
409.3721 480.0518 L
412.3691 477.0264 L
410.9404 475.5942 L
409.3721 477.2183 L
400.1484 467.9531 L
400.1484 451.7158 L
409.3721 442.3442 L
418.5928 451.7158 L
418.5928 467.9531 L
413.1377 473.4351 L
414.5723 474.7715 L
f402.7324 487.1768 m
396.4824 493.2144 L
378.8545 493.2144 L
367.4951 481.9214 L
378.8545 470.6313 L
396.4824 470.6313 L
407.8701 481.9214 L
405.1543 484.6123 L
403.7236 483.1821 L
405.0361 481.9214 L
395.7734 472.6997 L
379.5361 472.6997 L
370.1641 481.9214 L
379.5361 491.1436 L
395.7734 491.1436 L
401.2529 485.6875 L
402.7324 487.1768 L
f412.3447 490.311 m
409.6289 493.1084 L
398.3936 481.9087 L
404.4551 475.8667 L
405.8779 477.3267 L
401.3115 481.9087 L
409.6289 490.3145 L
411.0361 488.9683 L
412.3447 490.311 L
f414.71 488.1147 m
420.8076 481.9087 L
409.6289 470.7109 L
406.6943 473.6362 L
408.1201 475.0283 L
409.6289 473.5015 L
418.3018 481.9087 L
413.3467 486.7515 L
414.71 488.1147 L
f420.8076 433.0591 m
420.8076 436.897 L
409.3721 448.2563 L
398.0781 436.897 L
398.0781 433.0591 L
400.1484 433.0591 L
400.1484 436.2144 L
409.3721 445.5864 L
418.5928 436.2144 L
418.5928 433.0591 L
420.8076 433.0591 L
f388.6602 481.5571 m
390.2646 479.9536 L
396.168 479.9536 L
407.8086 468.6621 L
407.8086 462.7603 L
413.21 457.0928 L
413.21 451.7158 L
420.8076 443.9644 L
413.21 436.2144 L
413.21 433.0591 L
410.9326 433.0591 L
410.9326 436.897 L
418.2393 443.9644 L
410.9326 451.0352 L
410.9326 456.5835 L
405.5332 462.1528 L
405.5332 467.9531 L
395.46 477.7461 L
389.6572 477.7461 L
387.2422 480.1226 L
388.6602 481.5571 L
f408.9941 457.6094 m
407.8086 456.5835 L
407.8086 451.0352 L
400.501 443.9644 L
407.8086 436.897 L
407.8086 433.0591 L
405.5332 433.0591 L
405.5332 436.2144 L
397.7773 443.9644 L
405.5332 451.7158 L
405.5332 457.0928 L
407.585 459.0171 L
408.9941 457.6094 L
f360.8037 470.4663 m
364.5654 470.4663 L
376.0176 481.8882 L
364.6572 493.1816 L
360.8037 493.1816 L
360.8037 491.1392 L
363.9775 491.1392 L
373.3486 481.8882 L
363.9775 472.6675 L
360.8037 472.6675 L
360.8037 470.4663 L
f371.4785 473.1821 m
364.6367 480.3506 L
360.8037 480.3506 L
360.8037 478.0693 L
363.9551 478.0693 L
371.4883 470.291 L
379.2227 478.1978 L
384.5996 478.1978 L
390.2646 483.8643 L
396.168 483.8643 L
402.8643 490.7314 L
409.6289 483.7554 L
416.7529 491.0986 L
418.5928 491.0986 L
418.5928 489.2954 L
411.2188 482.1245 L
418.1924 475.3574 L
410.9326 468.6621 L
410.9326 462.7603 L
409.916 461.5981 L
411.3877 460.1836 L
413.21 462.1528 L
413.21 467.9531 L
420.8076 475.3574 L
414.2695 482.1245 L
420.8076 488.6978 L
420.8076 493.4404 L
416.2021 493.4561 L
409.6289 486.8081 L
402.8643 493.6499 L
395.46 486.0718 L
389.6572 486.0718 L
384.0898 480.5049 L
378.542 480.5049 L
371.4785 473.1821 L
f385.373 482.2666 m
384.3457 483.293 L
378.7969 483.293 L
371.7275 490.4912 L
364.6572 483.4736 L
360.8037 483.4736 L
360.8037 485.7437 L
363.9775 485.7437 L
371.7275 493.4829 L
379.4785 485.5996 L
384.8555 485.5996 L
386.7803 483.6738 L
385.373 482.2666 L
fUu402.2227 341.4668 m
396.1133 335.2314 L
378.4863 335.2314 L
367.127 346.667 L
378.4863 357.9609 L
396.1133 357.9609 L
407.5029 346.667 L
404.4775 343.6699 L
403.0459 345.0986 L
404.6699 346.667 L
395.4043 355.8906 L
379.167 355.8906 L
369.7959 346.667 L
379.167 337.4463 L
395.4043 337.4463 L
400.8857 342.9014 L
402.2227 341.4668 L
f414.6279 353.3066 m
420.666 359.5566 L
420.666 377.1846 L
409.3721 388.5439 L
398.083 377.1846 L
398.083 359.5566 L
409.3721 348.1689 L
412.0635 350.8848 L
410.6328 352.3154 L
409.3721 351.0029 L
400.1514 360.2656 L
400.1514 376.5029 L
409.3721 385.875 L
418.5947 376.5029 L
418.5947 360.2656 L
413.1387 354.7861 L
414.6279 353.3066 L
f417.7617 343.6943 m
420.5596 346.4102 L
409.3604 357.6455 L
403.3174 351.584 L
404.7773 350.1611 L
409.3604 354.7275 L
417.7656 346.4102 L
416.4189 345.0029 L
417.7617 343.6943 L
f415.5654 341.3291 m
409.3604 335.2314 L
398.1621 346.4102 L
401.0869 349.3447 L
402.4795 347.9189 L
400.9521 346.4102 L
409.3604 337.7373 L
414.2021 342.6924 L
415.5654 341.3291 L
f360.5107 335.2314 m
364.3477 335.2314 L
375.708 346.667 L
364.3477 357.9609 L
360.5107 357.9609 L
360.5107 355.8906 L
363.666 355.8906 L
373.0381 346.667 L
363.666 337.4463 L
360.5107 337.4463 L
360.5107 335.2314 L
f409.0078 367.3789 m
407.4043 365.7744 L
407.4043 359.8711 L
396.1133 348.2305 L
390.2119 348.2305 L
384.5439 342.8291 L
379.167 342.8291 L
371.416 335.2314 L
363.666 342.8291 L
360.5107 342.8291 L
360.5107 345.1064 L
364.3477 345.1064 L
371.416 337.7998 L
378.4863 345.1064 L
384.0342 345.1064 L
389.6035 350.5059 L
395.4043 350.5059 L
405.1973 360.5791 L
405.1973 366.3818 L
407.5732 368.7969 L
409.0078 367.3789 L
f385.0605 347.0449 m
384.0342 348.2305 L
378.4863 348.2305 L
371.416 355.5381 L
364.3477 348.2305 L
360.5107 348.2305 L
360.5107 350.5059 L
363.666 350.5059 L
371.416 358.2617 L
379.167 350.5059 L
384.5439 350.5059 L
386.4688 348.4541 L
385.0605 347.0449 L
f397.918 395.2354 m
397.918 391.4736 L
409.3398 380.0215 L
420.6328 391.3818 L
420.6328 395.2354 L
418.5908 395.2354 L
418.5908 392.0615 L
409.3398 382.6904 L
400.1191 392.0615 L
400.1191 395.2354 L
397.918 395.2354 L
f400.6338 384.5605 m
407.8018 391.4023 L
407.8018 395.2354 L
405.5205 395.2354 L
405.5205 392.084 L
397.7422 384.5508 L
405.6494 376.8164 L
405.6494 371.4395 L
411.3154 365.7744 L
411.3154 359.8711 L
418.1826 353.1748 L
411.207 346.4102 L
418.5498 339.2861 L
418.5498 337.4463 L
416.7461 337.4463 L
409.5752 344.8203 L
402.8086 337.8467 L
396.1133 345.1064 L
390.2119 345.1064 L
389.0498 346.123 L
387.6348 344.6514 L
389.6035 342.8291 L
395.4043 342.8291 L
402.8086 335.2314 L
409.5752 341.7695 L
416.1494 335.2314 L
420.8916 335.2314 L
420.9072 339.8369 L
414.2588 346.4102 L
421.1006 353.1748 L
413.5225 360.5791 L
413.5225 366.3818 L
407.9561 371.9492 L
407.9561 377.4971 L
400.6338 384.5605 L
f409.7178 370.666 m
410.7441 371.6934 L
410.7441 377.2422 L
417.9424 384.3115 L
410.9248 391.3818 L
410.9248 395.2354 L
413.1953 395.2354 L
413.1953 392.0615 L
420.9336 384.3115 L
413.0508 376.5605 L
413.0508 371.1836 L
411.125 369.2588 L
409.7178 370.666 L
fUu193.978 353.8164 m
187.7432 359.9258 L
187.7432 377.5527 L
199.1787 388.9121 L
210.4717 377.5527 L
210.4717 359.9258 L
199.1787 348.5361 L
196.1807 351.5615 L
197.6099 352.9932 L
199.1787 351.3691 L
208.4019 360.6348 L
208.4019 376.8721 L
199.1787 386.2432 L
189.958 376.8721 L
189.958 360.6348 L
195.4126 355.1533 L
193.978 353.8164 L
f205.8179 341.4111 m
212.0679 335.373 L
229.6963 335.373 L
241.0552 346.667 L
229.6963 357.9561 L
212.0679 357.9561 L
200.6802 346.667 L
203.396 343.9756 L
204.8267 345.4063 L
203.5137 346.667 L
212.7769 355.8877 L
229.0146 355.8877 L
238.3857 346.667 L
229.0146 337.4443 L
212.7769 337.4443 L
207.2974 342.9004 L
205.8179 341.4111 L
f196.2056 338.2773 m
198.9214 335.4795 L
210.1567 346.6787 L
204.0957 352.7217 L
202.6719 351.2617 L
207.2383 346.6787 L
198.9214 338.2734 L
197.5142 339.6201 L
196.2056 338.2773 L
f193.8398 340.4736 m
187.7432 346.6787 L
198.9214 357.877 L
201.856 354.9521 L
200.4297 353.5596 L
198.9214 355.0869 L
190.248 346.6787 L
195.2036 341.8369 L
193.8398 340.4736 L
f187.7432 395.5283 m
187.7432 391.6914 L
199.1787 380.3311 L
210.4717 391.6914 L
210.4717 395.5283 L
208.4019 395.5283 L
208.4019 392.373 L
199.1787 383.001 L
189.958 392.373 L
189.958 395.5283 L
187.7432 395.5283 L
f219.8896 347.0313 m
218.2852 348.6348 L
212.3828 348.6348 L
200.7417 359.9258 L
200.7417 365.8271 L
195.3403 371.4951 L
195.3403 376.8721 L
187.7432 384.623 L
195.3403 392.373 L
195.3403 395.5283 L
197.6182 395.5283 L
197.6182 391.6914 L
190.311 384.623 L
197.6182 377.5527 L
197.6182 372.0049 L
203.0171 366.4355 L
203.0171 360.6348 L
213.0903 350.8418 L
218.8931 350.8418 L
221.3076 348.4658 L
219.8896 347.0313 L
f199.5566 370.9785 m
200.7417 372.0049 L
200.7417 377.5527 L
208.0488 384.623 L
200.7417 391.6914 L
200.7417 395.5283 L
203.0171 395.5283 L
203.0171 392.373 L
210.7729 384.623 L
203.0171 376.8721 L
203.0171 371.4951 L
200.9648 369.5703 L
199.5566 370.9785 L
f247.7461 358.1211 m
243.9844 358.1211 L
232.5327 346.6992 L
243.8931 335.4063 L
247.7461 335.4063 L
247.7461 337.4482 L
244.5732 337.4482 L
235.2017 346.6992 L
244.5732 355.9199 L
247.7461 355.9199 L
247.7461 358.1211 L
f237.0718 355.4053 m
243.9136 348.2373 L
247.7461 348.2373 L
247.7461 350.5186 L
244.5952 350.5186 L
237.062 358.2969 L
229.3281 350.3896 L
223.9512 350.3896 L
218.2852 344.7236 L
212.3828 344.7236 L
205.686 337.8564 L
198.9214 344.832 L
191.7979 337.4893 L
189.958 337.4893 L
189.958 339.293 L
197.332 346.4639 L
190.3574 353.2305 L
197.6182 359.9258 L
197.6182 365.8271 L
198.6338 366.9893 L
197.1621 368.4043 L
195.3403 366.4355 L
195.3403 360.6348 L
187.7432 353.2305 L
194.2808 346.4639 L
187.7432 339.8896 L
187.7432 335.1475 L
192.3481 335.1318 L
198.9214 341.7803 L
205.686 334.9385 L
213.0903 342.5166 L
218.8931 342.5166 L
224.4604 348.083 L
230.0083 348.083 L
237.0718 355.4053 L
f223.1777 346.3213 m
224.2041 345.2949 L
229.7539 345.2949 L
236.8228 338.0967 L
243.8931 345.1143 L
247.7461 345.1143 L
247.7461 342.8438 L
244.5732 342.8438 L
236.8228 335.1055 L
229.0723 342.9883 L
223.6953 342.9883 L
221.7705 344.9141 L
223.1777 346.3213 L
fUU(Adobe PatternOnPath Brush Tool) 1 0 35 XP
%040302010000803F0000000000000001000000005061747465726E204272
%7573682031
/Adobe_Brushed_Path () XT
1 Ap
301.2383 381.9785 m
240.8569 381.9785 L
240.8569 441.9814 L
301.2383 441.9814 L
301.2383 381.9785 L
n362.9209 381.9785 m
309.2871 381.9785 L
309.2871 441.9814 L
362.9209 441.9814 L
362.9209 381.9785 L
nLB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
