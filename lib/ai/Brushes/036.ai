%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8.0.1
%%For: (S ) ( )
%%Title: (036.ai)
%%CreationDate: (10/26/2005) (4:43 PM)
%%BoundingBox: 82 422 396 737
%%HiResBoundingBox: 82.3892 422.3188 395.9111 736.6099
%%DocumentProcessColors:
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%DocumentCustomColors: (metal)
%%CMYKCustomColor: 0 0 0 1 (metal)
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 16 16 576 820
%AI3_DocumentPreview: None
%AI5_ArtSize: 595.2756 841.8898
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 2
%AI8_OpenToView: -237 907.8887 1 1008 703 18 1 1 11 63 0 0
%AI5_OpenViewLayers: 77
%%PageOrigin:16 16
%%AI3_PaperRect:-16 824 579 -18
%%AI3_Margin:16 -20 -18 18
%AI7_GridSettings: 14.1732 5 14.1732 5 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 128 128 8
%%BeginData: 10042 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD34FFA8A8FFFFFFA852F8F8F827A8FFA85227F8F82752A8FD68FF
%7D27F8F827A8FF27FD05F8A8FF52FD06F852A8FFA87D5252527DFD5DFFA8
%FFFF27FD04F8A8FF27FD05F87DFF52FD06F87DFFA827FD06F827A8FD57FF
%A82727F8A8A827FD04F852FF27FD05F852FF27FD06F87DFF52FD07F8277D
%FFFFFF7DA8FD52FF7DF8F8F852FF52FD05F8FF7DFD05F827FF7DFD06F87D
%FF52F827FD05F8A8FFFF5227FD04F827A8FD4EFF52FD04F8A8A8FD05F87D
%FF27F827F8F8F8A8A8FD06F852FF52FD07F8A8FF7DFD09F852FD49FF5252
%FFA8FD04F827FF27FD05F8A87DFD05F827FF52FD05F827A87DFD07F8A8FF
%27FD08F8277DFD48FF52F8F852FFFD05F87DA8FD05F827FFF8F8F827F8F8
%A87DFD06F8A8A8FD07F8A8A827FD07F8277DFFA87D5227277D7DFD41FF27
%F8F8F8FF7D27FD04F8A8A8FD05F8A8A8FD05F852FFFD06F8A8FFFD06F827
%FFA827FD07F87DFFFF52FD08F8A8FD3EFF52F8F8F827FF52FD05F8FF27FD
%04F827FF52FD05F8FF52FD05F87DFF27FD04F82727FFA8FD08F8A8FF7DFD
%0BF852FD3AFF7DFFFFFD04F827FFFD05F852FF27FD04F852FFFD05F8A8A8
%27F8F8F8277DFF52FD05F827FFA827FD06F827FFA827F8F8F827FD05F827
%277D7DFD38FF7D2727FF52FD04F87DFFFD05F852A8FD05F8FF7DFD04F87D
%FF27F8F8F827A8FF52FD04F8527DFF7DFD07F87DFF7DFD0AF87DA8FFFFA8
%7DA8FD35FF7DF8F852FF27FD04F87DA8F8F8F827F8FF7DFD04F87DFF27F8
%F8F8A8FFFF527D7DFD05FFA8A8A8FFFFFFA827FD05F87DFFFF27FD08F827
%7DFFFF7D27FD05F827A8FD31FF7DF8F8F87DFFFD05F8A87DFD04F827FF52
%F8F8F827FF7DF8527DFD14FFA87DA8A8FFFF7DFD09F87DFFFF52FD0AF852
%FD30FF27F8F8F8A8A8FD05F87D7DFD04F852FFF8F8F827A8FD1FFF5227FD
%05F8277DFFFF52FD0DF852FD2EFF7DFD04F87DA8FD05F8FF52FD04F8FF7D
%F8F87DFD23FFA852527DFFFFA852FD0DF8275252FD2BFFA852FF52FD04F8
%A8A8FD05F8FF7DF8F8F852FFA8A8FD2AFF52FD0BF82752A8FD2EFF7DF852
%FF27FD04F87DA8FD05F8FF27F8F827A8FD2DFF7DFD08F82752A8FFFF7D7D
%FD042752A8FD26FF7DF8F852FF2727F8F8F87D7DFD04F852FF27F827FD31
%FF7D5252275252A8FFFF7D52FD09F827A8FD24FFF8F8F852FF27FD04F852
%FFFD04F87DFFF87DFD38FF7D52FD0EF8A8FD22FF7DF8F8F827FF27F8F827
%F87DFFFD04F8FD3AFF7DFD11F827A8FD21FF27F8F8F827FF27FD04F852FF
%F8F8F87DFD3BFF52FD0DF8FD042752FD1FFF7DFFFD05F8FF52FD04F852FF
%F8F852FD3DFFA827FD06F82752A8A8FD24FF2752FFFD05F87D7DFD04F827
%FFF852FD42FF7DA8FD04FF7D7D52FD04277DA8FD1CFF27F852FFFD05F87D
%A8FD04F8A8FFA8FD43FFA87D7D5227FD0AF852FD1AFF52F8F852FF27FD04
%F852FFFD04F8FD46FF7DFD10F8A8FD18FF27F8F8F8FF27FD04F852FF27F8
%F852FD47FF7DFD10F8FD17FFA8FD04F8A87DFD05F8FF52F8F8FD49FF7D27
%FD0EF827FD16FFA8FD04F87DA8FD05F8FF7DF8FD4DFF525227522752527D
%527D527D27F8A8FD15FFA8FD04F827FFFD05F8FF7DA8FD6FFF27FF7DFD05
%F8A87DFD04F8FD50FF7DF82727FD07F82727A8FD13FF52F87DA8FD05F87D
%A8F8F8F827FD51FFFD0DF8277DFD10FFA8F8F852FF27F827F8F827FF27F8
%F87DFD52FFFD07F827FD06F87DFD0FFF7DF8F8F8FF52FD05F8A87DF8F8A8
%FD53FF27FD0DF87DFD0EFF27F8F8F87DFFFD05F8A8A8F87DFD55FFA852FD
%0BF827FD0EFF27F8F8F827FF52FD04F852FF7DFD5AFFA87D7D527D2727F8
%F8F87DFD0DFF27FD04F8A8A8FD04F87DFD59FF27277D7DA8A8FD05FF7D52
%27FD0DFF27FD05F8FF27F8F8F852FD59FF52FD07F8275252FD0EFF27FF7D
%FD05F87DFFF8F8F87DFD5AFFFD0BF852A8FD0AFF52F87DA8FD05F827FF52
%F8F8A8FD5AFF7DFD0CF87DFD09FF27F852FF52FD05F8A8A8F827FD5CFFA8
%FD0CF8A8FD07FFA8F8F8F8A8A8FD05F827FF27FD5FFF7D27FD09F827FD07
%FFA8F8F8F827FF52FD05F8FD60FFA8FFFFFF7D5227FD06F87DFD06FFA8FD
%04F852FFFD05F8A8FD5FFF7DF85252A8FFFFA8A827F8F8F827FD06FFA8FD
%05F8A8FFFD04F8A8FD5FFFA8FD05F8277DA8FFFFA82727FD07FFFD05F827
%A87DF8F8F8A8FD60FF27FD08F87DA8FF7DFD05FFA8FF52FD05F852FF52F8
%F8A8FD61FFFD09F8277DFD06FFF8A8A8F8F827F8F8F8A8A8F827FD62FFA8
%FD0AF827FD04FF7DF852FF52FD04F82727FF52A8FD64FF5227FD08F87DFF
%FFFF27F8F87DFF27FD05F87DFD65FFA8FF7D52FD08F8A8FFFF27F8F827A8
%FFFD05F852FD65FFF827A8FFFF5227FD05F87DFFFF27FD04F8A8A8FD05F8
%FD65FFF8F8F8277DFFFF7D27FD04F8FFFF52FD04F827A8A8FD04F8FD65FF
%52FD05F852A8FFA852F8F8FFFF7DFD05F827A8A8F8F8F8FD65FF7DFD07F8
%27FFFF7DF8FFFFFF27FD05F827FFA8F827FD66FF52FD08F87DFFA8FF7DFF
%7DFD06F827FF7D27FD2DFF7DA87DA8A8FD06FFA87DA87DFD2BFF27FD08F8
%52FFFF2752FF52FD06F852FD2CFFA852FD05F827A8FFFFA827FD06F8FD2B
%FF52FD08F87DFFF8F87DFF27FD06F8A8FD2AFF52FD07F8A8FFA852FD07F8
%A8FD29FF5252FFA827FD07F8A8F8F8F87DFF52FD05F852FD29FF27FD06F8
%27A8FFA827FD07F8A8FD2AFF27F827A8FF7DFD06F852FD04F852FF7DFD05
%F8FD28FF7DFD07F87DFFA8FD08F8A8FFA8F8FD28FF7DF8F8F852A8FF52FD
%04F82727FD04F852FFA827F8F8F8FD28FFA8FD06F852FFFF27FD07F87DFF
%FF27F8FD28FF7DFD04F82752FFA827F8F8F852FD06F8A8A827F8F8A8FD27
%FF7DFD06F8FFFF27FD07F827A8FF27F8F8FD29FFFD07F8A8FF7DF8F8FFFD
%07F8A8FF52F8FD28FFA8FD05F8A8FF7DFD08F8A8FF52F8F8F8FD29FFA8FD
%07F87DFF52F8FF7DFD07F87DFF7DFD28FF7DFD04F87DFFA8FD08F852FFA8
%FD04F8FD2AFF52FD07F87DFF7DFFFF52FD07F8A8FD29FFA8F8F8F827FFFF
%27FD07F827FFFF27FD04F8FD28FFA8A8FF52FD07F8A8FFF8A8FF52FD07F8
%A8FD28FF7DF8F8F8A8FF52FD08F8A8FF7DFD05F8FD28FF7DF87DFF52FD07
%F8FFF8F8A8FF7DFD06F852FD28FFA8F8F87DFFA8FD08F87DFFA8FD06F8FD
%28FF52F8F87DFF7DFD06F87DF8F8F852A8FF27FD05F8FD28FF7DF827FFA8
%27FD07F852FFFFFD07F8FD28FF7DF8F8F827A8A8FD05F852FD04F8277DFF
%A827F8F8F8A8FD27FFA852FFFF52FD07F852FFFF52FD07F8FD28FFA8FD04
%F827A8FF27F8F8F82727FD05F827A8FF7DF8F87DFD27FFA8FFFF7DFD07F8
%52FFFF7DFD07F827FD29FFFD06F87DFF52F8F8277DFD07F852FFFF27A8FD
%29FF7DFD07F87DFFFF7DFD06F8277DFD2AFF7DFD06F87DFF52F827FF27FD
%08F87DFD2AFFA8FD06F852FFFFFF7DFD06F852A8FD2AFFA8FF27FD06F87D
%FF2752FFFF27FD08F87DFD2AFFFD05A8FD06FFFD05A8FD2DFFF8FFA827FD
%05F827FFA8A8A8FFA852FD08F87DFD65FF7DF8F8FF7DFD06F852FFFF7DF8
%A8FFA8FD07F827FD65FF7DF8F827FF7DFD06F8FFFF7DF8F852A8FF7D27FD
%05F87DFD64FF52FD04F8FF7DFD05F87DFFFFFD04F852FFFFFF5227F8F852
%FD64FFA8FD04F827FF7DFD04F87DFFFF27FD05F8277DFFFF7DF827FD64FF
%A8FD05F852FF52F8F8F852FFFF7DFD08F852A8FFA8FD65FF52FD05F852FF
%52F8F87DFFFFFF27FD09F852FD64FF52A8A8FD06F87DFFF8F8A8FD04FF27
%FD04F827FD04F827FD63FFF852FF7DF8F8F827F827FF7D27FD06FF27FD09
%F827FD61FF7DF8F87DA827FD05F87DFFA8FD05FFA8FFA852FD08F87DFD60
%FF7DF8F8F8A87DFD05F827FD06FF7DF827A8FFFF7D52FD05F827FD60FF52
%F8F8F827FF52FD05F8FD07FFF8F8F82752A8FFFFFFA85227F8A8FD5FFF7D
%FD04F852FF27FD04F8FD07FF52FD06F8277D7DFFFFA8A8FD5FFF7DFD05F8
%A8A8FD04F8FD07FF7DFD0AF8527DFD5EFF7D7DFFFD05F827FF7DF8F8F8FD
%08FF52FD0BF827FD5DFFF827FF52FD05F87DA8F8F852FD09FF52FD0BF827
%FD5BFF7DF8F8A8A8FD06F8FF52F8A8FD0AFF7D27FD0AF827FD5AFF27F8F8
%F8FF52FD05F8A8A827FD0DFFA85252FD08F87DFD59FFFD04F87DFFFD05F8
%7DFD0DFFF852A8FD04FFA87DA852522752FD59FF27F8F8F827FF52FD04F8
%52FD0DFF52F8F8F852277D52A8A8FD5BFF7DFF27FD04F8A8A8FD04F87DFD
%0DFF7DFD0CF87DA8FD55FF2727FF52FD04F827FF52F8F8F852FD0EFF52FD
%08F827FD04F852FD53FF7DF8F8FF7DFD05F8A8A8F8F8F8A8FD0FFF27FD0D
%F827FD52FF27F8F87DFFFD05F852FF27F827FD11FF5227FD0CF852FD51FF
%F8F8F827FF27F8F8F82727FF52F8A8FD12FFA87DFD09F82727F8A8FD4FFF
%7DFD04F8FF52FD05F8FF7D52FD6FFFA8FFA8FD04F87DFFFD05F8FD16FF52
%F82752527DFD04522727277D52A8FD4BFF52F8A87DFD04F827FF27FD04F8
%FD17FFFD0FF852A8FD48FFA8F8F8A8A8FD05F8FF7DF8F8F827FD17FFA8FD
%10F8A8FD47FFF8F8F87DA8FD05F87DFFF8F8F852FD18FF7DFD0FF827A8FD
%45FF7DF8F8F827FFFD05F87DFF27F8F8A8FD19FFA8FD0BF82752527DFD44
%FFA8FF52F8F8F827FF27FD04F827FF27F852FD1CFFA87D2752275252A8A8
%FD05FFA8FD41FFA82727FF27FD04F8FF52FD04F852FF5252FD24FF7D7D27
%27FD05F82752FD3DFFA8F8F827FF27FD04F87DA8FD04F852FF7DFD1FFF27
%27522727FD0DF87DFD3BFF27F8F827FF2727F8F8F87DA8FD04F87DFD21FF
%7DFD12F8FD3AFF7DF8F8F827FF27FD04F852FFFD04F8A8FD22FF7DFD0DF8
%2752A8FD37FFA85227FF27F8F8F827FF27F8F827F87DFF27F8F827FD24FF
%7D27FD09F852A8FFA87D5227272752A8FD30FF7DF8F87DFFFD04F827FF27
%F8F8F82752FFF8F8F8A8FD26FF7D52272752277DA8FFFF7D27FD08F852A8
%FD2DFF7DF8F8F87DA8FD05F8FF27FD04F852FFF8F8A8FD2DFFA87D27FD0C
%F87DFD29FFA87DFFA827F8F8F8A87DFD05F8FF27FD04F87DFF27A8FD2AFF
%A8525227FD0CF8277DFFFFA87D7D7DA8FD22FFA852F827FF7DFD04F8A87D
%FD05F8FF52FD04F8FD2EFFA827FD0DF87DFFA85227FD05F8277DFD1FFFA8
%F8F8F827FFFD05F8FF52FD04F827FF27F8F8F852FD30FF27FD09F8277DFF
%A852FD08F827A8FFFFA8A87DFD15FF5227F8FFA827F8F8F8A8A8FD05F8FF
%52FD04F827FF27F8F827FD32FF7DFD06F8277DFFFF52FD09F852FFA852FD
%05F852FD04FF7DA8A8FD04FFA8525252FFFF52F8F8F852FF27FD04F8A87D
%F827F8F8F8FF27FD04F852FF27F8F8A8FD35FFA8A8FFFFFFA852FD09F827
%A8FF52FD06F827A8FF7D27FD04F87DFF7D27F8F8F87DFF52FD04F8A8A8FD
%04F827FF27FD04F852FF52FD04F8A8FFF852A8FD38FF7D7D27FD06F827F8
%F8F852A8A8FD07F827A8FF27FD05F87DFF52FD04F827FF7DFD04F827FFFD
%05F852FFFD05F852FFFD05F8FFA8A8FD3AFF27FD0BF8A8FF7DFD07F827FF
%A8FD06F87DFF52FD05F8A8A8FD05F8A8A8FD05F87DA8F8F8F827F8A8A8FD
%04F8A8FD3EFF52FD07F82752FFA827FD07F827A8A8FD06F827FF27FD05F8
%52FFFD05F827FF52FD05F8FF52FD04F827FF7DF8F8F87DFD41FF7D522752
%52A8FFFF5227FD07F852FFA8FD06F827FF7DFD06F8FF52FD05F852FFFD05
%F827FF52FD04F852FF27F8F87DFD47FFA87DFD09F852FF7DF8F8F827F8F8
%F8A8A8FD06F87DA8FD06F8FF7DFD05F87DFFFD05F8FFA82752FD48FFA827
%FD09F8A8FF7DFD07F8A8FF27FD05F852FF52F8F8F827F852FF27FD05F8FF
%7DFD04F8A8FD4DFFA87D27FD04F82752FFA852FD05F827F87DFF27FD06F8
%A8A8FD06F8A8A8FD05F87DA827F8F8F8A8FD52FFA8A8FFFFFF7D27FD07F8
%A8FF52FD06F87DFF27FD04F8277DFF27FD04F852FF7DF8277DFD58FF52FD
%07F827FFFF52FD06F87DFF52FD05F827FF52FD04F87DFFFFA8FD5CFFA87D
%5252527DA8FFA827FD05F8277DFF52FD05F87DFFA8F8F82752A8FD68FF7D
%2727F8F8277DA8FF52FD04F852A8FFFFFF7DA8FD33FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(New Pattern 2)
0 A
u800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
-7893 8611.8887 m
-7883.7422 8611.8887 L
-7883.7422 8605.2764 L
-7893 8605.2764 L
-7893 8611.8887 L
n0 O
0 0 0 1 (metal) 0 x
-7884.0449 8605.2764 m
-7886.7793 8604.582 -7888.4927 8606.2354 -7889.748 8608.0625 c
-7890.5103 8609.1719 -7891.103 8610.0566 -7891.6528 8610.8066 C
-7892.6968 8611.8887 L
-7889.9624 8612.582 -7888.249 8610.9297 -7886.9937 8609.1025 c
-7886.231 8607.9922 -7885.6382 8607.1074 -7885.0889 8606.3574 C
-7884.0449 8605.2764 L
f-7885.1191 8608.0625 m
-7885.8818 8609.1719 -7886.4746 8610.0566 -7887.0239 8610.8066 C
-7888.0679 8611.8887 L
-7886.2119 8612.3594 -7884.8335 8611.7393 -7883.7422 8610.7266 C
-7883.7422 8606.4375 L
-7884.2583 8606.916 -7884.7158 8607.4756 -7885.1191 8608.0625 c
f-7893 8606.4375 m
-7893 8610.7266 L
-7892.4834 8610.248 -7892.0254 8609.6895 -7891.6226 8609.1025 c
-7890.8599 8607.9922 -7890.2671 8607.1074 -7889.7178 8606.3574 C
-7888.6738 8605.2764 L
-7890.5303 8604.8047 -7891.9087 8605.4258 -7893 8606.4375 C
fU%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
0 0 0 1 (metal) 0 x
(metal) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Pattern Brush 1)
(1 / New Pattern 2/ / / / / 5 0.843137 0.882353 0.870588 /  1 0 1 0 1 0) -
( 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe PatternOnPath Brush Tool/ Pattern Brush 1/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u0 O
0 0 0 1 (metal) 0 x
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
264.3174 598.6973 m
248.4102 602.7334 238.4399 593.1182 231.1392 582.4912 c
226.7026 576.0352 223.2568 570.8906 220.0586 566.5244 C
213.9854 560.2324 L
229.8921 556.1963 239.8633 565.8115 247.1631 576.4385 c
251.6001 582.8945 255.0459 588.042 258.2437 592.4053 C
264.3174 598.6973 L
f258.0684 582.4912 m
253.6309 576.0352 250.1855 570.8906 246.9868 566.5244 C
240.9136 560.2324 L
251.7104 557.4912 259.7295 561.0996 266.0781 566.9883 C
266.0781 591.9424 L
263.0762 589.1553 260.4111 585.9033 258.0684 582.4912 c
f212.2217 591.9424 m
212.2217 566.9883 L
215.2271 569.7744 217.8887 573.0234 220.2349 576.4385 c
224.6714 582.8945 228.1177 588.042 231.3154 592.4053 C
237.3887 598.6973 L
226.5889 601.4375 218.5703 597.8271 212.2217 591.9424 C
fULB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(Layer 2) Ln
0 A
%_u%_1 Ap
%_0 R
%_0 0 0 1 (metal) 0 X
%_800 Ar
%_0 J 0 j 4.3052 w 4 M []0 d%_%AI3_Note:%_0 D
%_0 XR
%_381.5811 579.4639 m
%_381.5811 500.8008 317.8145 437.0342 239.1519 437.0342 c
%_160.4897 437.0342 96.7188 500.8008 96.7188 579.4639 c
%_96.7188 658.126 160.4897 721.8945 239.1519 721.8945 c
%_317.8145 721.8945 381.5811 658.126 381.5811 579.4639 c
%_s%_U%_0 Ap
0 A
u1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
381.5811 579.4639 m
381.5811 500.8008 317.8145 437.0342 239.1519 437.0342 c
160.4897 437.0342 96.7188 500.8008 96.7188 579.4639 c
96.7188 658.126 160.4897 721.8945 239.1519 721.8945 c
317.8145 721.8945 381.5811 658.126 381.5811 579.4639 c
nu0 Ap
0 O
0 0 0 1 (metal) 0 x
389.8691 536.7402 m
396.3711 548.8853 390.2676 558.8066 383.0957 564.9751 C
378.5693 568.8345 375.0557 571.543 371.8643 573.9375 C
370.3477 575.4287 368.8301 576.8701 367.3145 578.2627 C
364.1104 567.6709 370.251 560.5527 376.9268 553.6338 C
381.1143 549.4902 384.0664 546.0273 386.666 542.7354 C
387.8389 540.7622 388.8145 538.7876 389.8691 536.7402 C
f379.5713 544.6357 m
375.6924 549.0933 372.5693 552.2778 369.7363 555.0996 C
368.457 556.7866 367.1797 558.4229 365.8809 560.0112 C
362.6846 553.1333 364.0674 547.4971 366.9521 541.9326 C
384.6719 536.7383 L
383.3271 539.6499 381.6631 542.2646 379.5713 544.6357 C
f390.8154 579.4639 m
372.3506 579.4639 L
374.3535 577.3403 376.71 575.3555 379.1914 573.5068 C
383.8447 570.0039 387.3477 566.9922 390.3896 564.1074 C
391.7471 562.3315 393.0684 560.5093 394.3975 558.6357 C
397.6602 567.3203 395.0635 574.416 390.8154 579.4639 C
fUu371.709 496.001 m
381.3926 505.7861 378.3682 517.0396 373.1826 525.0073 C
370.0283 529.9561 367.333 533.5781 364.9551 536.7705 C
363.9199 538.626 362.959 540.4063 361.8262 542.187 C
355.8838 532.918 359.5684 524.4268 364.0762 515.8701 C
366.876 510.7295 368.8203 506.5225 370.3184 502.6641 C
370.8643 500.4512 371.3213 498.2344 371.709 496.001 C
f364.0537 506.4961 m
361.665 511.8325 359.4824 515.8213 357.5977 519.314 C
356.8555 521.291 356.1396 523.2002 355.2686 525.1279 C
350.2676 519.4385 350.04 513.603 351.1924 507.4727 C
366.7168 497.4751 L
366.2988 500.6182 365.3691 503.6406 364.0537 506.4961 C
f384.6719 536.7383 m
366.9521 541.9326 L
368.3936 539.2993 370.0195 536.7568 371.8604 534.2896 C
375.3838 529.5977 377.873 525.7246 379.9307 522.1099 C
380.7949 519.9941 381.5322 517.8774 382.252 515.7139 C
387.7705 523.145 387.4541 530.6528 384.6719 536.7383 C
fUu342.8271 462.0547 m
354.8652 468.7202 355.124 480.3564 352.3838 489.4746 C
350.7822 495.0894 349.1729 499.3608 347.8184 503.0796 C
347.3799 505.1338 346.9199 507.1421 346.3389 509.1709 C
338.0205 501.9424 339.1387 492.7603 341.0781 483.2671 C
342.3076 477.5571 343.0186 472.9487 343.3564 468.8438 C
343.2471 466.5806 343.0879 464.2988 342.8271 462.0547 C
f338.4199 474.2793 m
337.6338 480.0615 336.6357 484.5288 335.8291 488.3931 C
335.6924 490.4824 335.5098 492.5474 335.2266 494.6357 C
328.8359 490.5615 326.9521 485.0439 326.3496 478.8237 C
338.4473 464.8735 L
338.9414 467.9907 338.874 471.1768 338.4199 474.2793 C
f366.7168 497.4751 m
351.1924 507.4727 L
351.8076 504.5513 352.7109 501.6104 353.7412 498.7485 C
355.7725 493.2671 357.1172 488.8145 358.04 484.792 C
358.2598 482.5303 358.4131 480.2583 358.4746 477.998 C
365.8291 483.5874 367.6895 490.835 366.7168 497.4751 C
fUu305.5684 437.5698 m
319.0137 440.5771 322.5244 451.689 322.4453 461.2139 C
322.4883 467.043 322.124 471.6177 321.8799 475.5503 C
322.0459 477.6309 322.1475 479.7119 322.165 481.8174 C
312.1445 477.2129 310.6533 468.0884 309.8545 458.4238 C
309.4258 452.6104 308.8301 447.9561 307.9854 443.9448 C
307.2324 441.8262 306.4561 439.6396 305.5684 437.5698 C
f304.7764 450.5488 m
305.6563 456.3042 305.9336 460.9038 306.2559 464.8169 C
306.7197 466.8442 307.1045 468.9067 307.4238 470.9814 C
300.1611 468.8477 296.7935 464.1177 294.4751 458.3037 C
302.1553 441.5117 L
303.5166 444.3472 304.3301 447.4634 304.7764 450.5488 C
f338.4473 464.8735 m
326.3496 478.8237 L
326.1074 475.8613 326.1699 472.7607 326.3506 469.7329 C
326.7559 463.9111 326.8164 459.2373 326.5625 455.1338 C
326.1279 452.917 325.6563 450.666 325.0762 448.4854 C
333.6953 451.8042 337.5283 458.2168 338.4473 464.8735 C
fUu262.8804 424.5903 m
276.6025 423.769 283.1646 433.2959 285.7646 442.5146 C
287.4629 448.0688 288.3823 452.6177 289.27 456.4204 C
290.022 458.3521 290.6836 460.3696 291.3018 462.3599 C
280.4004 460.7808 276.4004 452.4634 272.9019 443.3896 C
270.8271 438.0117 268.9561 433.6162 267.0029 430.0444 C
265.6782 428.2339 264.3057 426.4058 262.8804 424.5903 C
f265.7983 437.2861 m
268.2817 442.5117 269.8311 446.9482 271.2622 450.5396 C
272.2871 452.3291 273.2158 454.2891 274.1216 456.1367 C
266.5718 456.0874 261.9829 452.6084 258.1187 447.6328 C
260.7241 429.3525 L
262.834 431.6689 264.4849 434.5176 265.7983 437.2861 C
f302.1553 441.5117 m
294.4751 458.3037 L
293.3975 455.5605 292.604 452.5205 291.918 449.5791 C
290.6528 443.9131 289.4097 439.3564 287.9951 435.52 C
286.9404 433.5483 285.8647 431.4736 284.6904 429.5474 C
293.8979 430.3169 299.3965 435.3794 302.1553 441.5117 C
fUu218.3223 424.2178 m
231.2603 419.5713 240.1875 426.9077 245.2925 434.9502 C
248.4844 439.8491 250.6577 443.9336 252.5918 447.2842 C
253.853 448.9951 255.0615 450.728 256.2227 452.436 C
245.3091 454.0708 239.0947 447.1133 233.1934 439.4238 C
229.6904 434.7705 226.6787 431.2681 223.7935 428.2256 C
222.0181 426.8687 220.1953 425.5464 218.3223 424.2178 C
f224.6616 435.5195 m
228.5234 440.0459 231.2314 443.5601 233.624 446.751 C
235.1152 448.2681 236.5571 449.7856 237.9497 451.3008 C
230.6626 453.3633 225.2876 451.3799 220.1821 447.6333 C
217.5767 429.3525 L
220.2642 431.0923 222.624 433.2017 224.6616 435.5195 C
f260.7241 429.3525 m
258.1187 447.6328 L
256.3032 445.3345 254.6763 442.6792 253.1938 439.9746 C
250.3691 434.9995 247.8926 430.8838 245.4575 427.6123 C
243.8911 426.0195 242.2754 424.4263 240.6108 422.835 C
249.6479 420.853 256.3281 424.3867 260.7241 429.3525 C
fUu175.4004 436.3638 m
186.479 428.1782 197.1855 432.79 204.3223 439.0439 C
208.7778 442.9233 211.9624 446.0464 214.7866 448.8794 C
216.4736 450.1582 218.1094 451.4355 219.6982 452.7349 C
209.6846 457.3804 201.79 452.4023 193.9766 446.7554 C
189.2842 443.2319 185.4116 440.7432 181.7964 438.6851 C
179.6807 437.8208 177.564 437.0835 175.4004 436.3638 C
f184.6938 445.4331 m
189.6445 448.5864 193.2666 451.2827 196.4575 453.6611 C
198.313 454.6953 200.0928 455.6567 201.8735 456.79 C
195.5313 460.9331 189.7319 460.3271 183.8262 458.3047 C
176.1455 441.5127 L
179.2061 442.394 182.0522 443.7144 184.6938 445.4331 C
f217.5767 429.3525 m
220.1821 447.6333 L
217.7817 445.8296 215.5044 443.8984 213.3203 441.689 C
209.1768 437.5015 205.7139 434.5493 202.4219 431.9497 C
200.4487 430.7769 198.4741 429.8018 196.4268 428.7461 C
204.5669 424.3105 211.9604 425.7656 217.5767 429.3525 C
fUu137.6846 460.1406 m
145.9888 449.1685 157.5493 450.5591 166.1826 454.5615 C
171.5171 456.9521 175.5059 459.1343 179.0005 461.0181 C
180.978 461.7603 182.8867 462.4756 184.8145 463.3472 C
176.4795 470.5415 167.5562 468.1367 158.4351 464.875 C
152.9541 462.8433 148.501 461.4985 144.4785 460.5757 C
142.2168 460.356 139.9453 460.2026 137.6846 460.1406 C
f149.1611 466.2319 m
154.7773 467.8325 159.0493 469.4419 162.7661 470.7969 C
164.8203 471.2363 166.8286 471.6958 168.8574 472.2769 C
163.9268 478.0298 158.1909 479.1025 151.9517 478.8247 C
139.854 464.8745 L
143.0156 464.8335 146.1514 465.3398 149.1611 466.2319 C
f176.1455 441.5127 m
183.8262 458.3047 L
181.0195 457.27 178.2495 455.9814 175.5566 454.5396 C
170.416 451.7393 166.2095 449.7954 162.3511 448.2974 C
160.1382 447.7515 157.9209 447.2944 155.6875 446.9067 C
162.2612 440.4067 169.7153 439.6133 176.1455 441.5127 C
fUu108.1714 493.5381 m
113.064 480.6694 124.5498 478.771 133.9658 480.1953 C
139.7466 480.9829 144.2134 481.9814 148.0796 482.7866 C
150.1685 482.9229 152.2334 483.106 154.3223 483.3896 C
148.3433 492.6553 139.0942 492.8438 129.4194 492.2651 C
123.5977 491.8589 118.9233 491.7988 114.8203 492.0527 C
112.603 492.4873 110.3525 492.959 108.1714 493.5381 C
f120.8999 496.1694 m
126.7305 496.125 131.3052 496.4902 135.2368 496.7354 C
137.3169 496.5693 139.3984 496.4683 141.5034 496.4507 C
138.3677 503.3477 133.1855 506 127.1084 507.4731 C
111.584 497.4761 L
114.5918 496.5386 117.7695 496.1631 120.8999 496.1694 C
f139.854 464.8745 m
151.9517 478.8247 L
148.9785 478.6372 145.9277 478.1479 142.9531 477.5376 C
137.2437 476.3081 132.6353 475.5967 128.5303 475.2588 C
126.2671 475.3677 123.9854 475.5273 121.7412 475.7881 C
126.2397 467.7231 133.1387 464.8477 139.854 464.8745 C
fUu89.2329 533.9243 m
90.3013 520.1875 100.7769 515.1069 110.2344 513.8384 C
115.9893 512.9609 120.5884 512.6831 124.5024 512.3594 C
126.5298 511.895 128.5923 511.5107 130.6675 511.1914 C
127.5381 521.7598 118.7266 524.5293 109.2642 526.6968 C
103.5986 527.9619 99.042 529.2051 95.2051 530.6196 C
93.2334 531.6743 91.1592 532.75 89.2329 533.9243 C
f102.2002 532.8501 m
107.7549 531.1499 112.3037 530.231 116.1055 529.3452 C
118.0376 528.5933 120.0552 527.9316 122.0449 527.3135 C
120.9507 534.7935 116.7886 538.812 111.3477 541.9331 C
93.6279 536.7383 L
96.2246 534.9805 99.2383 533.7427 102.2002 532.8501 C
f111.584 497.4761 m
127.1084 507.4731 L
124.2212 508.1382 121.127 508.5068 118.1094 508.7607 C
112.2964 509.1895 107.6421 509.7852 103.6304 510.6294 C
101.5122 511.3828 99.3252 512.1582 97.2554 513.0469 C
99.3267 504.0439 105.1157 499.3252 111.584 497.4761 C
fUu82.5195 578.0039 m
79.7861 564.5693 88.1855 556.709 96.9712 552.8164 C
102.1963 550.3354 106.6323 548.7856 110.2246 547.3525 C
112.0142 546.3276 113.9741 545.3989 115.8218 544.4932 C
115.8345 555.5088 108.1768 560.6655 99.6592 565.4209 C
94.6841 568.2456 90.5688 570.7217 87.2969 573.1572 C
85.7041 574.7236 84.1108 576.3389 82.5195 578.0039 C
f94.6348 573.3223 m
99.5342 570.1284 103.6182 567.9551 106.9688 566.0234 C
108.6797 564.7617 110.4126 563.5532 112.1206 562.3921 C
113.1128 569.876 110.4258 574.9336 105.9492 579.4644 C
87.4839 579.4644 L
89.6016 577.0518 92.0645 575.0146 94.6348 573.3223 C
f93.6279 536.7383 m
111.3477 541.9331 L
108.8213 543.4014 105.875 544.6094 103.0747 545.7129 C
97.6968 547.7876 93.3013 549.6587 89.7295 551.6118 C
87.9185 552.936 86.0908 554.3091 84.2754 555.7339 C
83.7207 546.5127 87.9912 540.3589 93.6279 536.7383 C
fUu88.4312 622.188 m
81.9297 610.0435 88.0322 600.1221 95.2041 593.9531 C
99.7305 590.0938 103.2446 587.3853 106.4355 584.9902 C
107.9526 583.4995 109.4702 582.0576 110.9854 580.665 C
114.1895 591.2573 108.0493 598.375 101.3735 605.2939 C
97.186 609.438 94.2339 612.9009 91.6348 616.1929 C
90.4614 618.166 89.4863 620.1406 88.4312 622.188 C
f98.7285 614.2925 m
102.6074 609.8345 105.7305 606.6504 108.564 603.8281 C
109.8428 602.1411 111.1201 600.5054 112.4194 598.9165 C
115.6152 605.7944 114.2329 611.4307 111.3481 616.9951 C
93.6284 622.1904 L
94.9727 619.2783 96.6372 616.6631 98.7285 614.2925 C
f87.4839 579.4644 m
105.9492 579.4644 L
103.9463 581.5879 101.5894 583.5728 99.1084 585.4214 C
94.4551 588.9243 90.9526 591.936 87.9102 594.8213 C
86.5532 596.5967 85.231 598.4189 83.9023 600.2925 C
80.6396 591.6079 83.2368 584.5117 87.4839 579.4644 C
fUu106.5923 662.9272 m
96.9082 653.1421 99.9331 641.8887 105.1177 633.9204 C
108.272 628.9717 110.9678 625.3501 113.3457 622.1572 C
114.3799 620.3018 115.3413 618.5215 116.4746 616.7407 C
122.417 626.0098 118.7329 634.501 114.2246 643.0576 C
111.4248 648.1982 109.4805 652.4053 107.9829 656.2637 C
107.437 658.4766 106.98 660.6938 106.5923 662.9272 C
f114.2471 652.4316 m
116.6362 647.0952 118.8188 643.1064 120.7031 639.6138 C
121.4453 637.6367 122.1606 635.7275 123.0317 633.7998 C
128.0337 639.4888 128.2603 645.3242 127.1089 651.4551 C
111.5845 661.4526 L
112.0024 658.3096 112.9321 655.2871 114.2471 652.4316 C
f93.6284 622.1904 m
111.3481 616.9951 L
109.9067 619.6284 108.2803 622.1709 106.4399 624.6382 C
102.917 629.3301 100.4277 633.2031 98.3701 636.8184 C
97.5059 638.9341 96.7686 641.0508 96.0488 643.2148 C
90.5303 635.7832 90.8467 628.2754 93.6284 622.1904 C
fUu135.4741 696.8726 m
123.436 690.207 123.1777 678.5713 125.9175 669.4531 C
127.5195 663.8384 129.1289 659.5664 130.4824 655.8477 C
130.9219 653.7935 131.3813 651.7856 131.9619 649.7563 C
140.2808 656.9854 139.1631 666.167 137.2236 675.6606 C
135.9941 681.3701 135.2827 685.9785 134.9453 690.0835 C
135.0542 692.3472 135.2134 694.6284 135.4741 696.8726 C
f139.8818 684.6479 m
140.6675 678.8657 141.666 674.3989 142.4727 670.5342 C
142.6084 668.4453 142.7915 666.3804 143.0752 664.2915 C
149.4653 668.3657 151.3496 673.8838 151.9521 680.104 C
139.8545 694.0542 L
139.3599 690.937 139.4272 687.7505 139.8818 684.6479 C
f111.5845 661.4526 m
127.1089 651.4551 L
126.4937 654.376 125.5908 657.3174 124.5601 660.1787 C
122.5288 665.6602 121.1846 670.1133 120.2612 674.1357 C
120.042 676.3975 119.8887 678.6694 119.8267 680.9297 C
112.4722 675.3403 110.6118 668.0928 111.5845 661.4526 C
fUu172.7334 721.3579 m
159.2876 718.3506 155.7769 707.2383 155.856 697.7134 C
155.813 691.8843 156.1777 687.3096 156.4219 683.377 C
156.2554 681.2969 156.1538 679.2153 156.1367 677.1104 C
166.1572 681.7148 167.6484 690.8394 168.4473 700.5039 C
168.876 706.3169 169.4717 710.9712 170.3159 714.9829 C
171.0693 717.1011 171.8447 719.2881 172.7334 721.3579 C
f173.5249 708.3789 m
172.6455 702.623 172.3677 698.0234 172.0459 694.1108 C
171.5815 692.0835 171.1968 690.0205 170.8779 687.9458 C
178.1401 690.0801 181.5083 694.8101 183.8267 700.624 C
176.146 717.416 L
174.7847 714.5806 173.9712 711.4639 173.5249 708.3789 C
f139.8545 694.0542 m
151.9521 680.104 L
152.1938 683.0664 152.1318 686.1665 151.9512 689.1943 C
151.5454 695.0161 151.4854 699.6904 151.7393 703.7935 C
152.1738 706.0103 152.6455 708.2612 153.2246 710.4424 C
144.606 707.123 140.7734 700.7104 139.8545 694.0542 C
fUu215.4204 734.3379 m
201.6982 735.1587 195.1367 725.6318 192.5366 716.4131 C
190.8384 710.8589 189.9194 706.3101 189.0317 702.5073 C
188.2798 700.5757 187.6182 698.5581 186.9995 696.5679 C
197.9014 698.147 201.9014 706.4644 205.3994 715.5386 C
207.4741 720.916 209.3452 725.312 211.2983 728.8838 C
212.6226 730.6943 213.9956 732.5225 215.4204 734.3379 C
f212.5029 721.6421 m
210.0195 716.4165 208.4702 711.98 207.0391 708.3887 C
206.0142 706.5986 205.0854 704.6392 204.1802 702.791 C
211.73 702.8408 216.3188 706.3198 220.1826 711.2954 C
217.5771 729.5762 L
215.4673 727.2593 213.8159 724.4106 212.5029 721.6421 C
f176.146 717.416 m
183.8267 700.624 L
184.9043 703.3667 185.6973 706.4072 186.3833 709.3486 C
187.6484 715.0146 188.8916 719.5713 190.3062 723.4077 C
191.3608 725.3799 192.4365 727.4541 193.6108 729.3804 C
184.4033 728.6108 178.9043 723.5479 176.146 717.416 C
fUu259.9785 734.7109 m
247.0405 739.3574 238.1133 732.0205 233.0088 723.9785 C
229.8169 719.0791 227.6436 714.9951 225.71 711.6445 C
224.4482 709.9331 223.2397 708.2007 222.0786 706.4922 C
232.9927 704.8574 239.2065 711.8154 245.1079 719.5049 C
248.6108 724.1587 251.6226 727.6606 254.5073 730.7031 C
256.2832 732.0605 258.1055 733.3823 259.9785 734.7109 C
f253.6396 723.4097 m
249.7778 718.8828 247.0698 715.3691 244.6772 712.1777 C
243.186 710.6606 241.7446 709.1436 240.3521 707.6279 C
247.6392 705.5654 253.0137 707.5493 258.1191 711.2959 C
260.7246 729.5762 L
258.0371 727.8369 255.6772 725.7275 253.6396 723.4097 C
f217.5771 729.5762 m
220.1826 711.2954 L
221.998 713.5938 223.6255 716.249 225.1074 718.9541 C
227.9321 723.9292 230.4082 728.0444 232.8438 731.3164 C
234.4102 732.9092 236.0254 734.5024 237.6899 736.0938 C
228.6528 738.0757 221.9727 734.5415 217.5771 729.5762 C
fUu302.9014 722.5654 m
291.8223 730.751 281.1157 726.1392 273.979 719.8853 C
269.5234 716.0059 266.3389 712.8828 263.5151 710.0498 C
261.8281 708.7705 260.1919 707.4937 258.6035 706.1943 C
268.6167 701.5488 276.5112 706.5269 284.3247 712.1738 C
289.0171 715.6973 292.8901 718.1865 296.5049 720.2441 C
298.6206 721.1084 300.7373 721.8457 302.9014 722.5654 C
f293.6074 713.4961 m
288.6567 710.3428 285.0347 707.6465 281.8442 705.2686 C
279.9883 704.2339 278.2085 703.2729 276.4277 702.1392 C
282.77 697.9961 288.5693 698.6025 294.4751 700.6245 C
302.1563 717.4165 L
299.0957 716.5356 296.249 715.2148 293.6074 713.4961 C
f260.7246 729.5762 m
258.1191 711.2959 L
260.52 713.0996 262.7969 715.0308 264.981 717.2402 C
269.1245 721.4277 272.5874 724.3799 275.8789 726.9795 C
277.8525 728.1523 279.8271 729.1279 281.8745 730.1831 C
273.7344 734.6187 266.3408 733.1636 260.7246 729.5762 C
fUu340.6172 698.7881 m
332.3125 709.7607 320.752 708.3701 312.1191 704.3677 C
306.7842 701.9771 302.7949 699.7949 299.3008 697.9111 C
297.3232 697.1689 295.4146 696.4536 293.4868 695.582 C
301.8223 688.3877 310.7451 690.7925 319.8662 694.0542 C
325.3477 696.0854 329.8008 697.4302 333.8223 698.3535 C
336.084 698.5728 338.3564 698.7261 340.6172 698.7881 C
f329.1406 692.6973 m
323.5234 691.0967 319.252 689.4868 315.5352 688.1318 C
313.4805 687.6929 311.4727 687.2334 309.4434 686.6523 C
314.374 680.8994 320.1104 679.8267 326.3496 680.1045 C
338.4473 694.0547 L
335.2852 694.0957 332.1494 693.5889 329.1406 692.6973 C
f302.1563 717.4165 m
294.4751 700.6245 L
297.2817 701.6592 300.0518 702.9478 302.7441 704.3896 C
307.8848 707.1899 312.0918 709.1338 315.9502 710.6318 C
318.1631 711.1777 320.3809 711.6348 322.6143 712.0225 C
316.04 718.5225 308.5859 719.3159 302.1563 717.4165 C
fUu370.1289 665.3901 m
365.2373 678.2588 353.751 680.1577 344.335 678.7334 C
338.5547 677.9458 334.0879 676.9478 330.2217 676.1421 C
328.1318 676.0063 326.0674 675.8232 323.9785 675.5396 C
329.957 666.2734 339.2061 666.085 348.8818 666.6636 C
354.7031 667.0693 359.3779 667.1299 363.4805 666.8755 C
365.6973 666.4409 367.9482 665.9697 370.1289 665.3901 C
f357.4004 662.7588 m
351.5703 662.8037 346.9951 662.4385 343.0645 662.1934 C
340.9834 662.3599 338.9023 662.4609 336.7969 662.478 C
339.9326 655.5811 345.1152 652.9287 351.1914 651.4551 C
366.7168 661.4521 L
363.709 662.3896 360.5313 662.7656 357.4004 662.7588 C
f338.4473 694.0547 m
326.3496 680.1045 L
329.3223 680.292 332.373 680.7813 335.3477 681.3911 C
341.0576 682.6206 345.666 683.332 349.7705 683.6699 C
352.0342 683.5605 354.3154 683.4014 356.5596 683.1406 C
352.0615 691.2056 345.1621 694.0811 338.4473 694.0547 C
fUu389.0674 625.0039 m
387.999 638.7402 377.5234 643.8213 368.0664 645.0903 C
362.3115 645.9673 357.7119 646.2456 353.7979 646.5693 C
351.7705 647.0332 349.708 647.418 347.6328 647.7373 C
350.7617 637.1689 359.5732 634.3994 369.0361 632.2314 C
374.7012 630.9663 379.2578 629.7231 383.0947 628.3086 C
385.0664 627.2539 387.1406 626.1782 389.0674 625.0039 C
f376.0996 626.0781 m
370.5449 627.7783 365.9961 628.6973 362.1943 629.583 C
360.2627 630.3354 358.2451 630.9966 356.2549 631.6152 C
357.3496 624.1348 361.5117 620.1162 366.9521 616.9951 C
384.6719 622.1895 L
382.0752 623.9478 379.0615 625.1855 376.0996 626.0781 C
f366.7168 661.4521 m
351.1914 651.4551 L
354.0791 650.79 357.1738 650.4219 360.1914 650.168 C
366.0039 649.7388 370.6582 649.1431 374.6699 648.2988 C
376.7881 647.5454 378.9746 646.77 381.0449 645.8813 C
378.9736 654.8838 373.1855 659.603 366.7168 661.4521 C
fUu395.7803 580.9243 m
398.5137 594.3584 390.1143 602.2192 381.3291 606.1118 C
376.1035 608.5928 371.667 610.1426 368.0752 611.5757 C
366.2852 612.6006 364.3262 613.5293 362.4785 614.4351 C
362.4648 603.4199 370.123 598.2627 378.6406 593.5073 C
383.6162 590.6826 387.7314 588.2065 391.0029 585.771 C
392.5957 584.2046 394.1895 582.5889 395.7803 580.9243 C
f383.665 585.606 m
378.7656 588.7998 374.6816 590.9731 371.3311 592.9048 C
369.6201 594.1665 367.8867 595.375 366.1787 596.5361 C
365.1865 589.0522 367.874 583.9946 372.3506 579.4639 C
390.8154 579.4639 L
388.6982 581.8765 386.2354 583.9136 383.665 585.606 C
f384.6719 622.1895 m
366.9521 616.9951 L
369.4785 615.5269 372.4248 614.3188 375.2256 613.2153 C
380.6025 611.1406 384.999 609.2695 388.5703 607.3164 C
390.3809 605.9917 392.209 604.6191 394.0244 603.1943 C
394.5791 612.4155 390.3086 618.5688 384.6719 622.1895 C
fUU(Adobe PatternOnPath Brush Tool) 1 0 35 XP
%040302010000803F0000000000000001000000005061747465726E204272
%7573682031
/Adobe_Brushed_Path () XT
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
