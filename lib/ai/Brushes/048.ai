%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8.0.1
%%For: (S ) ( )
%%Title: (048.ai)
%%CreationDate: (11/1/2005) (2:54 PM)
%%BoundingBox: 73 142 480 549
%%HiResBoundingBox: 73.1318 142.1318 479.8682 548.8682
%%DocumentProcessColors:
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%+ 0 0.25 0.75 0 (New Color Swatch 8)
%%+ 1 0.35 1 0.2 (New Color Swatch 9)
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 18 14 594 770
%AI3_DocumentPreview: None
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -205.5 739.5 1 1144 769 26 0 1 6 63 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:18 14
%%AI3_PaperRect:-18 774 594 -18
%%AI3_Margin:18 -18 -18 18
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 128 128 8
%%BeginData: 26768 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B
%0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B05
%0B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B340B0B0B050B0B
%0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B05
%0B0B0B050B0B0B05FD040B040B040B040B040B040B040B040B040B040B04
%0B040B040B040B040B040B040B040B040B040B040B040B040B040B2D0B04
%0B040B040B040B040B040B040B040B040B040B040B040B040B040B040B04
%04040B040B040B040B040B040B040B040B040B040B040B040B040B040B04
%0B040B040B040B040B040B040B040B040B040B0B587CA6587C0B0B0B5152
%0B0B040B5E0B040B5E58A67CA658A67CA658A67CA658580B0B0B51520B0B
%040B8258A6525E52580B0B0BA60B0B0B58585E527C585E527C585E2D040B
%0B0B040B0B0B7C58A7527C520B0B040B5E0B040B0B0B7C585E527C585E52
%7C585E527C2D0B0B042D5E0B040B0B0B040B0B2DA6825E0B040B0B042D9F
%C79FC77C0B047B9F2D040AA69F2D0B049F9FC79FC79FC79FC79FC79FC79F
%9F570B047B9F2D040BA6C79FC7A7C79F9F570BA69F040B2DC79FC79FC79F
%C79FC79FC79F2D040BC77B040BA6C79F7C9FC79F2D040B579FA00A040BA6
%C79FC79FC79FC79FC79FC79FC7C82D040BC89F2D0B04A0A60B042DC7C79F
%C77C0B040B0BA6C8CE7CCDC8ADA0C7C9C858CEC8CDA5ADA0C77CA67CA67C
%A67CA67CA67CA67CC7A583A0C7C9C858A7C8CD7CA652A67CCDA683C8CDA0
%58A6CD7CA67CA67CA67CA67CA6A6CE2DCDC8C77CA6C8CE7CAD7CA6A6C858
%58A5C8C8CE0BA6C8CE7CA67CA67CA67CA67CA67CC9C8CD2DCEC8C8A5ADA0
%C7C8A72DCDC8C9A6C77C050B0B04529F7C042D9FC7A07C579FC8C7A6519F
%9FA07C040B040B040B040B040B040B047C9F9F9F7C579F9FA5C82D040B33
%0B042D9FC8A6529FA09F2D040B040B040B040B040B7CC7CEC77CA09FC7A0
%0B040A040B579FA09F9F7CA0C7C9C7A00B040B040B040B040B040B040B7C
%C7C8C77C7C9F9FA0A0A69FC8C7A60BA6C77C0B04040B5E9FC77C2D9FC8C7
%822DCEC7CD5151A0C7A5510B0B0B040B0B0B040B0B0B040B2D9FC7A65E0B
%CEC7C751040B0B0B040B5EA0C77C0BA0C8A00B0B040B0B0B040B0B0B040B
%CEC8CE0B5EA5CE510B0B340B0B0BADC7C775040BC9C8CE0B0B0B040B0B0B
%040B0B0B040B0B2DCEC7C92D51A0C7A5A62DC8C8CE0B82C8C8580B0B0B04
%0B2D9F9F7C9F7B9FC7C8C7A69F9F759FA09F7B040B040B040B040B040B04
%0B04FD059FA6C7C9C79F2D040B0B0B049F9F7B9F7B9F9FA02D040B040B04
%0B040B040B7CC7C8C7A69F9FC7C80B0404040B2DFD049F2CA6C7C8C7A60B
%040B040B040B040B040B042DC7C7A7C7A67B9FA09F9FC8C7A6C7A7C79F2D
%040B04050B0B0B58A5C7A00558C8C8A70BA7A5CDA00B7CC7A6CD7CCEA082
%0B587CCD7CCEA6C77C057CCDC8CE2D82C8CDA0CD7CCEA6C85858A6C87CAD
%A5CD7CCEA0A60B057CCD7CCEC8CD0BCEC8C85882C8CD7CCEA0CDA6CD585E
%A5CDC8A60BCEC8CD7CA67CA60B0558CDC9CDC9CDC8A70B83A0C7A0587CC7
%C8A60BCFC8C85805FD040B040B047CCE9F9F7C0451A60B279FA6C79F5104
%7C9FC79FC79FC7579F9FC79FC79F9F040B7CC7C89F270B7CC79FC7A6C79F
%7C042DC9C7C80B7CC79FC79FC7A62D9FC79FC7C82D047C9FC8510BA6C79F
%529FC79F2D040BA09F9F51040BA6C79FC79FC7A62D9FC7A6C8C8C8A60B27
%9F9F9FC82D047CA60B7CC79FC7A00B040B040B0B047CC79FA6A5C77C040B
%2D9FC7A682C8C8582D527C585E7CCEA0C77C7C585E52510B82C8CD7CC79F
%510B5E527C2D5E52040BC8C8ADC7A60B7C585E52CDA6C79F7D585E2D0458
%C77CCDA62D0B7C58A7527C520B0BCDC7A79FC8580B0B7C585E52CEA0C79F
%580B0B0B040B2D9FC7A082C8CD2D0B0B7CC7C751A6C7A60B040B0B040BA6
%C7A60AC8C7A60B04529FC77C2D9FC77C0B040B040B047B9F7B7B0B040B04
%0B04A09F7B57C79F2D040B040B2D0B040B7CC7A60AA6C77B0B040B040AC8
%C77C0B040B040BA6C7577C9F52040B0404040B040B7BC7A62D7CC7C80B04
%0B040B042D9F9F7C0B040B040B04529FC77C0BA6C7A60B047C9F9F2D0BA6
%C77B0B040B0B050BCDC8CEC8A60B587C0B58CDC8CEC8820B827CCEA0CDA6
%C77CCEC8CEA0CD7C820B58A0C7A6C858050BCD7CCE7CCD7C580BA6C8CEC8
%A60BC9A0CD7CCEC8CEC8CEA0CD7C052DCDA0C77C0B2DCEA0CE7CCE7C580B
%82C8CEC8CE2D0B7CCEA0CD7CCDA5CFC8C97CA67CA62D0B58CDC8CEC8A70B
%820B057CC7A5CFC8820B050B0B040B042DC8C7CE0B519F9F7C042D9FC77D
%0B7CC79FC79FC79F7C042DC8C79FC79FC77C0B519F9F7C040BA6C79FC7CE
%C79F9F270BC9C7CE0BA6C79FC79FC7A62DC8C79FC79F52042D9F9F270BA0
%C79F7C9FC79F9F040BCEC7C82D047C9FC7C8C8A6A0570BA0C79FC79FC7C8
%2D042D9FC7A70B7CC7A00B047C9F9FA10B040B04040B0B2DCDC7CEC8CD7C
%C7A0C7A0C77CC8C7A7C8C8825E527C580B0B042D5E527C82C7C8ADA5C79F
%C77CA6C8CD585E0B7CA6C77C7CC7C9C8CEC7C8527C585E0B042D5E527CA0
%C751CDA6CD7CC8C7A752AD585EA0C7A0A6C8CEC7C87CC7A55E0B040B0B0B
%040BA658A67CC8C8CD2DA6C7C8C7A7C8CDC7CD2DCDC8C79F51FD040B042D
%C7C7A60BA0C7A62D047B9FC77B2DA0C79F2D040B040B040B040B040B040B
%042D9FC7A62D047AC8C7A00A040B0B0B047C9F9FC82DC7C7A60B040B040B
%040B040B040B579FC79F577CA6C7A60B0404040B047B9F9FA00B7C9F9F9F
%570B040B040B040B040B040B040BA6C7C8C7A62DA7C79F2DA67BC7C77C7C
%9F7B040B04050B5EA5CD585E7CCEC8CD7CCDC8CD7C58C7C8A6580B0B0B05
%0B0B0B050B0B0B050B5EA6CDC85E0BCEC8CD7C050B0B0B050B83A6CD5858
%A0CEA0580B050B0B0B050B0B0B050BCEC8CE0B82C8CE580B0B340B0B0BCF
%C8C77C0558C8C7CE580B0B050B0B0B050B0B0B050B0B0BCEC8CE2D82C8C8
%7C8258CDC8CE0B82C8CE520B0B0B040B51FD049F51A6C7A0C7A09FA09F9F
%759F9F570B040B040B040B040B040B579F9F519F9FA7C7A69F9F7C040B2D
%0B279F9F9FC8A09F519F7C040B040B040B040B040BA6C7A1C7C99FC89F9F
%2D0404040BA6C7A69F9F7C9F9F769F9F51040B040B040B040B040B042DA6
%C7CEC7C8C79F519FC7A0C7A1C7C9C7C82D040B040B0B040BA7A5C8A00B0B
%CDC7820BA6C7C7A00458C7C8CDC8CDC8CDC8CDC8CDC8CDC8C8580B51C8C7
%A60B51A0C7C8CDA6CDC8C77C5EC8C77C0B7CC8C8CDC8CDC8CDC8CDC8CDC8
%A60BA6C8CD2D5E9FCDC8CEC8CDC7A60B51A0C79F580B5E9FCDC8CDC8CDC8
%CDC8CDC8CDC8CDC7A60BCEC7C8750458C7C87C0BCEC8CE2D0B0B040B0B04
%0B57FD049F7C040A7C0B2D9F9FA09F7B042DA67BA67CA67BA67CA67BA67C
%A62D040B042DA60B040B047CA67BA77CA657040B7B7C040B047CA67CA67B
%A67CA67BA67CA60A040BA62D040B577BA652A67BA60B040B047C2D0B040B
%2D7BA67CA67BA67CA67BA67CA67BA60B7BC7C9C79F2D042D7B0BA6C7C8A5
%A60B040B040B0B58A5C85858A5C77C050B5EA5C77C58A0C77C0B0B050B0B
%0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B05
%0B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B340B050B0B
%0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B82C8CE2D82C8CD
%580B0BA7C8CD0BA7C8CD2D050B0B04529F7C040B57C7A60B04589F7C040B
%51C7C80B040B040B040B040B040B040B040B040B040B040B040B040B040B
%330B040B040B040B040B040B040B040B040B040B040B040B040B040B040B
%040B040A040B040B040B040B040B040B040B040B040B040B040B040B040B
%047CA02D040B7CC7C80B57C7A60B040BC8C77C0B04040B5EC8A60B0B0BCD
%C80B0BA6C7A60B040BCD7C040BA884AEA8A884AEA8A884AEA8A884AEA8A8
%84AEA8A884AEA8A82D040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B04
%0B0B0B040B0B0B040B0B0B58FD18FFA80B0BC8C80B0B0458C77C0458C77C
%040B0B58C77C0B0B0B04529F51040B04C7A60B04519F58040B04C8A60B04
%FD53FFA80B047BA60B040B57C7A60B57C7A60B040B7CC7A60B04050B82C8
%A60B0B0BCDC90B0BA6C8A60B050BCD7C050BFFFFFFA8A8A8AEA8A8A8AEA8
%A8A8AEA8A8A8AEA8A8A8AEA8A8A8AEA8A8A8AEA8A8A8AEA8A8A8AEA8A8A8
%AEA8A8A8AEA8A8A8FD21FFA80B0BCEC90B0B0558C77C0558C77C050B0B7C
%C77C0B0B0B04529F52040B04C8A02D047C9F7C040B04C8A60B04FFFF2D04
%0B040B040B040B040B040B040B040B040B040B040B040B040B040B040B04
%0B040B040B040B040B040B040B040B34FD21FFA80B047CC80B040B58C7C8
%0B7CC7A60B040B7CC7A60B040B0B7CC7A60B040B82C8CD7CC79F510B0B0B
%CDA00B0BFFFF340B040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B
%0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B042EFD21FF84040B
%CDC8040B0B0BA6C7A6A6C8520B0B047CC758040B0B042D9F58040B040B7B
%C7C87B040B040B04C7A60B04FFFF2D040BA6587C51040B040B7C0B040B04
%52040B040B7C51A6587C51A6587C51A6587C51040B040B7C0B040B042D7C
%51A7FD21FFA80B047CA60B040B040BA6C7A02C040B040BA6C77C0B040B0B
%7CC8A60B050B58A0CEC8CD2D050B0B0BCDA00B0BFFFF580B05C9C7C8C7A0
%580BA7C8CD0B057CC77C050BA6C8C7C8C7C8C7C8C7C8C7C8C7C8C77C0B0B
%A7C8CD0B0558C8C8C7A0FD21FFA8050BCDC9050B0B0B58A6CEC8CE0B0B0B
%057CC77C050B0B04529F58040B04589FA07CC7C80B040B04C8C80B04FFFF
%2D040BC8C8577C9F9FA6C7CDC7A07C9FA09F7CA6C7A65258525752585257
%52585257A09F7CA6C7CEC7A02D9FC77C5283FD21FFA80B047CA60B040B51
%9FA052A6C7C80B040BA6C77C0B04040B5EC8A60B0B0BA6C75E0BC8C80B0B
%040BCD7C040BFFFF580B0BC9CD2D0B7CC7C8A60BA7C8C79F51A0C7C8CD0B
%0B0B040B0B0B040B0B0B040B2D9FCDC7A60BA6C7C8C87C0B0B2DFD21FFA8
%0B0BC8C80B0B0458C77C0458C77C040B0B58C77C0B0B0B04529F51040B04
%519F52047BA60B040B04C8A60B04FFFF2D040B7BC7C82DA69F9F9F277B9F
%9FA00AA69F9F7B040B040B040B040B040B040B040BA6C7C87C042DC8C7A6
%0A040B2EFD21FFA80B047BA60B040B57C7A60B57C7A60B040B7CC7A60B04
%050B82C8A60B0B0BA6C8820BCEC90B0B050BCD7C050BFFFF580B0B0B82C8
%CD7CCFA0C7C9C7A0A7C8CEA0CEA0C77C0B0B050B0B0B050B0B0B050BA6C8
%CEA0C77CCEC8CEC8CE0B0B2DFD21FFA80B0BCEC90B0B0558C77C0558C77C
%050B0B7CC77C0B0B0B04529FA0270B04A09F52047CA62D040B7CC7A60B04
%FFFF2D040B040BA6C7C82D279F9F9F270BA6C7A60B049F9FC8A6C8C8A004
%0BA6C8A6C8C8C7C82D279FC8C77C0BA6C7C8C8A7FD21FFA80B047CA62D04
%0B7CC7A60B58C7A60B040BA6C7A60B040B0B047CC79FA0A0C79F510BA6C8
%CD2D82C8CD2D0B0BFFFF340B040B82C8CEC7C82D517C2D0BA6C7CEC8CD0B
%5EA0CDC8CDC8C77CA6C8CDC8CDC8CD2D0B2DCEC7C87C040BA6C8CDA6FD21
%FF84040B82C8CD2D82C8C87C0B0BCDC7A60BA6C7C82D040B0B040B047CFD
%049F040B040BA6C7C8C7C70B040B04FFFF2D040B7CC7C70B7CC79F2D040B
%A6C7A60BA6C7A60B040B040B0457A7C7A00A040B040B042DC7C77C9F9F7B
%040B040B34FD21FFA80B040B7BC7C9C79F2D040B040AA6C7C8A4C82D040B
%040B0B050B58A0C7C8580B82A65E0BCEC8CE2D050B0B0BFFFF580B052DCD
%C8CEA0C7A0580B0B7CC7A0A7A5C77C0B0B050B0B0BA7C8CE7C580B0B0B05
%0B5EA5CE2DCDC8A70B0B0B052EFD21FFA8050B0B0BCEC8C858050BCD5805
%0BCEC8CE2D0B0B050B0B040B27FD049F7C7CC7A09F769FC9C7C82D040B04
%FFFF2D040B042DC89F9F9F040BCD51047C9F9FA07C042DFD04C8A6C7A658
%9FC8C8C8A6A0570B519FC8C7A60B047CA6C8CEFD21FFA80B040B7CC7A0C7
%C82DA6C79F2DA6C7C9C7A60B040B04040B2D9FC7A02D9FCDC7A658C8C7C8
%517CC7C82D040BFFFF580B0B0B51A0C7C7A70BA6C8C8585E7CC7A02D2DCD
%C7CDC8CDC8CD0B047CCDC8CDC8C79F510BA7C7CE520B7CC7C8CDA6FD21FF
%A80B0B7CC7C82D7CC7C9C8A7A6C7C8CD2DA6C8CDFD040B042DC7C7A60B7B
%C7C87B2D9F9F9F2D0BA6C7A60B04FFFF2D040B047B9F9FC7C7A69FA6C7A0
%9FC87A9F9FA0C7A60B040B040B040B040B040B047C9F7BA6C7A69F9F7C9F
%9F570B2EFD21FFA80B047C9F7C040AC8C7C80BA79F9F7B042DA0C77C0B04
%050B0B2DCEC8CEC8CEA0C7C9CD7DC7A0CEC8CD0B050BFFFF580B0BA0C7A0
%582DCEC8AD0BCEC7C7A0057CCDC8CE0B0B0B050B0B0B050B0B0B050B0B7C
%C7C8A70B58A6C7A5580B0B2DFD21FFA80B0B58A0C7A0CFC8CEC8CDC8CEA5
%C77CCDC882FD040B040B042DC8C7C92D279F9F2D047CC8C7A60B040B04FF
%FF2D040BA6C7C82DA07BC8C77C9F9FC8A02DA6C7C89F270B040B040B040B
%040B040B040BA0A09F9F042D9FA5A02D040B34FD21FFA80B040B279F9F9F
%A60B7CC7A60B519FC8C77C0B040B040B0B040B82C8CEC7820B51520B0BCD
%C7C89F510B0B0BFFFF340B040BA6C8CEC7A62DCDC7C77C7CC7C9C8CD7CC7
%A07C585E527C585E527C585E52CDC7A67CC7A6C79FCEC7C77C7C52FD21FF
%84040B0B0BCEC8C79F510B820B0458C8C8CD7C0B0B040B0B040B7CC7C70B
%C8C77B0B040BA0C7A67C9F7B040B04FFFF2D040B040BC8C7C82D040BC87C
%040AC8C7C80A047C9FC79FC79FC79FC79FC79FC79FC7A60B047B9F9F2D0B
%7CC79FC7A7FD21FFA80B040BA0C7A69F9F7B040B042D9FC77C9F9F7C040B
%040B0B58C8CD2D052DCDC8580BCEC8CE0B0B7CCDA60B0BFFFF580B050BCD
%C8CFC8CD2D052D0B0BCEC8CEC8CE2D0B7CA67CA67CA67CA67CA67CA67CA6
%0B0B0B057C5E0B050B827CA67DFD21FFA8050BCEC8A70B58A0C7A60B52CD
%C8820B58A6C77C050B0B04529F58040B047C9F52047C9F52040B04C8C80B
%04FFFF2D040BC8C7A00B7CC7C82D040BA6C7A60B7CC7C80B040B040B040B
%040B040B040B040B040B040B040B040B040B040B34FD21FFA80B047CA60B
%040B57C7C80B57C7C80B040BA6C77C0B04040B5EC8A60B0B0BC8C75E0BC8
%C75E0B040BCD7C040BFFFF580B0B7CCD0B0B0BA6C7A60B04C8C80B040BA6
%C87C0B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B2DFD
%21FFA80B0BC8C80B0B0458C77C0458C77C040B0B58C77C0B0B042D04A626
%2D040B51A7040B51A7040B042D7CA7042DA8FF2D040BA6C7040B04519F58
%040BA6C8040B04589F2D0458FD3AFFAE040B51A7040B047D7CA7047D7CA7
%042D047D51A7040B050B82C8A60B0B0BCEC8820BCEC8820B050BCD7C050B
%A8FF580B0B7CCD0B0B0BA6C8A60B05C9CD0B050BA6C87C0B83FD3AFFA80B
%0BCEC90B0B0558C77C0558C77C050B0B7CC7580B0B0B04529FA0270B049F
%9F52047C9F7C040B58C7A60B0484FF2D040BA6C8040B04529F58040BC8C8
%040B04589F520458FD3AFFA80B047CA60B040BA6C7A60B58C7A60B040B7C
%C7580B040B0B517CC79FADA6C77C040B5E9FC77C82C8CD520B0BAEFF340B
%04A0CD0B040BA6C8CD0B82C8CE0B0B0BA6C75E0B83FD06FF84AEA8A884AE
%A8A884AEA8A884AEA8A884AEA8A884AEA8A884AEA8A884AEA8A884AEA8A8
%84AEA8FD0DFF84040BA6C8CD2DA6C8CD2D0B0BA6C7C82D7CC7C82D040B0B
%040B0458A09FA02D040A7C0B047B9F9FA00B040B0483FF2D040BA6C8040B
%040BA0C7A6A0C70B040B04519F520458FD05FF84040B040B040B040B040B
%040B040B040B040B040B040B040B040B040B040B040B040B040B040B0484
%FD0CFFA80B040BA6A4C8C7A60A0452040B7CC7C8C7C82D040B040B0B050B
%82C8CEC8822DCEC8A60BC9C8C8A6580B0B0BAEFF580B05A0CD0B050B0B0B
%CFC8CE2D050B0B0BA6C8820B83FD05FFA80B050B0B0B050B0B0B050B0B0B
%050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050BA8FD0CFF
%A8050B0B2DCEC8CE58057CC7A6580BCEC8CE7C0B0B050B0B040BA6C7A62D
%A6C7C99FC9C7A1A0A62DC8C77C0B0483FF2D040BC8C8040B040BA6C7A7C7
%A00B040B04529F520458FD05FF837C52A652040B042D510B040B0452A658
%7C52A6587C52A6587C52570B040B272D040B040B7C52A683FD0CFFA80B04
%51A09FA69F9FA09F7CA07BC8C7A6A09F7C040B04040B589FCD580B58CEC7
%CE2DCEC7C82D51A6C7A6040BA8FF580B0B7CCD0B0B0B7CC7C82DCDC7A60B
%040BA6C87C0B83FD06FFC7C7C8C8580B2DCDA55E0B51A0C7C8C7C7C7C8C7
%C7C7C8C7C7C79F580B2D9FC8580B0BA6C7C7C8FD0DFFA80B0BC9C7CD0BA7
%C8C7A05158C8C8CE0B82C8CE2D0B0B0B040B277B9FA09F7BA6C7A09F7D9F
%C79F9F7C040B0484FF2D040BA6C7040B042D9F7C042D9F58040B04589F2D
%0458FD05FF82A6587C9F9F51C7A5A09F047B9F7C7C51A6587C51A6587C51
%A67C9F9F579F9FC79F2DA6C7A6587C82FD0CFFA80B040BA6C7C89FA07C9F
%9FA09FA7A4C9C7A60A040B04050B0B0BADA0C7A0580B82A0580BADC7CDA0
%0B0B050BA8FF580B0B7CCD0B0B0B7CC8CD0B7CC8A60B050BA6C87C0B83FD
%05FFAE0B0B0B58C7C8C88258C8A0CDA00B0B050B0B0B050B0B0B050B0B58
%CEC8C77C58A5C8C8CE0B0B0BAEFD0CFFA80B0B050BCEC7CD7C0B7CCDA05E
%2DCEC8CE0B05FD040B040B579F9F7C9F9F570B040BA6C7C89F9F7C040B04
%84FF2D040BA6C8040B04529F7C04529F58040B04589F520458FD05FF8304
%0B042DC9A59F2D27A09F9F270B040B040B040B040B040B040B049F9FA051
%0BA7A59F2D040B0483FD0CFFA80B040BA6C7A09F9F7C042D2751C8C7C9C7
%C82D040B040B0B58C7C8510458C89F580BA6C8CD2D2D7CC87C0B0BAEFF34
%0B04A0C751040BA6C8C80B5EC8CD0B0B2DCDC75E0B83FD05FFA80B042DC8
%C8CEC7C77BC7A0C79F510B0B0B040B0B0B040B0B0B51A0C77CC8A5CEC8CE
%A5C751040BA8FD0CFF84040BC8C8C80B2D7CC7A60B52C8A55E0B7CC7C82D
%040B0B042D9F58040B047C9F2D047C9F2D040B04C7A60B0483FF2D040B57
%9F9F2DA6C7C70B040BA0C7A62DC7C77C0B0458FD05FF83A67BC8C77B0B7C
%C79F75047C9F9FA67CA67B570B047BA67CA69F9F7C042DC8C7A00A57C79F
%7BA683FD0CFFA80B047CA60B040B57C7A60B57C7A60B040BA6C7570B040B
%0B7CC8A60B050BCDC87C0BCDC87C0B0B0BCDA00B0BAEFF580B050B5EA5CE
%C8CD2D052D0B0BCEC8CEC8A60B0B0B83FD06FFC9CDC9A60B58A0CEC8CD58
%58A0CDC9CDC9CDA5A7A0C7C9CDC9CDA0580BA7C8CEA5580B82C9CDC9FD0D
%FFA8050BCDC9050B0B58C7A00B58C7A00B0B057CC758050B0B04529F5804
%0B047C9F58047C9F52040B04C8C80B0483FF2D040B040BA6C7C851042DC8
%7C040BC9C7C80B040B0458FD05FF84040B040B049F9FA07CC7A02D040B04
%0B0452CD9F9F9F270B040B040B7CC7A6519F9F270B040B0484FD0CFFA80B
%047CA60B040B57C7C80B57C7C80B040BA6C7570B04040B5EC8A60B0B0BA7
%C7C852C8A6580B040BCD7C040BA8FF580B0B0BA6C7C89FC858C8C8C77CA6
%C8CEC7A60B040B83FD05FFAE0B0B0B042DC8C8A62DC8C8A70B0B0B040B2D
%9FC7A0820B040B0B0B04A6C77C58A5C752040B0B0BAEFD0CFFA80B0BC8C8
%0B0B0458C79FA7A0C77C040B0B58C7580B0B0B04529F51040B040B7CC79F
%51570B040B04C8A60B0484FF2D040BA6C7C82D2D9FC8C77C7B9FA6A60AA6
%C7A00A0458FD05FF82A67CA60B042DC7A5C8C7A60BA67CA67BA6A09F7BA6
%C7A67BA67C7C0B049FA69F9F2D040AA67CA682FD0CFFA80B047BA60B040B
%047C9F9EA77C040B040B7CC7570B04050B82C8A60B0B0B057CCEA5CD7C0B
%0B050BCD7C050BA8FF580B0B7CC7A55E2DCEC8CE7CCFC8C77C057CC8A558
%0B83FD06FFC8C7C8CE2D0B2DCEC8CE0BA6C8C7C8C7C8C7A0582DCDC8C7C8
%C7C8820B83A5CD7D0B0BCEC8C7C8FD0DFFA80B0BCEC90B0B050B5E7CCDC8
%820B050B0B7CC7580B0B0B04529F52040B047C9FA0519F9F52040B04C8A6
%0B0484FF2D040B047C9F9FC8C7A69FA0C7A69F9F7C9F9F510B0458FD05FF
%8258527CC7C82DC8C7CEC7A1C7C85857525852040B040B57525858C8C7A6
%9F9F529F7CA0C7A6525782FD0CFFA80B047CC80B040B579F9F52C8C7A60B
%040B7CC7580B040B0B7CC7A60B040BCDC87C0BCDC87C0B0B0BCDA00B0BAE
%FF340B040B0B7CC7C7A70B58A5A60B51A0C7A5580B0B0B83FD05FFA80B04
%0B82C8CEC7A62DCEC7C82D040B0B0B040B0B0B040B0B0B042DC8C8CE582D
%9FCEC7A60B040BA8FD0CFF84040BCDC8040B0B52C7A00B58C7A00B0B047C
%C752040B0B042D9F58040B047C9F2D047C9F2D040B04C7A60B0483FF2D04
%0B042DC79F9F9F2D0B510B047B9F9F9F7B040B0458FD05FF84040B042DC8
%C7C82D2D9F9FC77B0B040B040B040B040B040B040B579FC7C77C0BA0C7C8
%7C040B0484FD0CFFA80B047CA60B040B57C7A60B57C7A60B040BA6C7570B
%040B0B7CC8A60B050BCDC87C0BCDC87C0B0B0BCDA00B0BAEFF580B052DCD
%C8827CC7A5580B0B7CC7A5A7A0C77C0B0B83FD05FFA80B052DCDC8CEC8CD
%A6CD58CDC8820B0B0B050B0B0B050B0B0B58A5C858CEC8CEC8CEA0C77C05
%0BA8FD0CFFA8050BCDC9050B0B58C7A00B58C7A00B0B057CC758050B0B04
%2DA0C77C0B579F9F52047C9F7C270BA6C7C80B0483FF2D040BC8C77C0B04
%7C9F7C04529F9F570B04A09F520458FD05FF83A6C8A6C7A60BA6C79F2D04
%2DC8C7C8C8A6C8C8C8A6C8C8C8A6C79F51042D9FC7A60B279F9FC8C883FD
%0CFFA80B047C9F7C272DA6C7A60B579FA051042DC8C7570B04040B0B2DCD
%C7C9C8CD582D2D517CC79FCEC7A60B040BA8FF580B0B7CCD0B0B0B7CC7CD
%0B7CC7CD0B040BA6C87C0B83FD06FFA0CD7CA60B0B0BA6580B0B042DCD7C
%C8A0CD7CC8A0CD7CC8A0CD51040B0B51CD0B0B0B517CCD7CFD0DFFA80B0B
%517CC79FCEC7A60B040B5E9FC8A0C79F7CFD040B040B040AC9C7C80A519F
%9F5104529F9FA70B040B0484FF2D040BA6C7040B042D9F7C042D9F7C040B
%04589F2D0458FD05FF83040B040B040B040B040B040B040B040B040B040B
%040B040B040B040B040B040B040B040B040B0483FD0CFFA80B040B047B9F
%9FA60B2D7B7C0B049F9FA02D0B040B04050B0B0BCEC8CEC8FFA5CDA0C7A0
%CEA5CEC8A60B050BA8FFFFA8A8A7FFA8A8A8FFA7FFA8FFA7FFA8AEA8FFA7
%FFA8FD06FFAE0B0B0B050B0B0B050B0B0B050B0B0B050B0B0B050B0B0B05
%0B0B0B050B0B0B050B0B0B050B0B0BAEFD0CFFA80B0B057CC8A0CFA5CEA6
%CDC8CEA0C7A0C8A058FD040B040BC8C77C0BA0C7A05104A09F9F520BCDC7
%A70B0484FD1DFF83040B040B040B040B040B040B040B040B040B040B040B
%040B040B040B040B040B040B040B040B0483FD0CFFA80B04A09F7C042DC8
%C7A72DCDC7C8570451A09F570B040B0B047CC7A0C8C7C8A6CDA6C7A0C8A5
%A79FCD580B0BAEFD52FF84040B82C8CD52A6A0CEC7C99FCEC7A62DCDC7A6
%0B040B0B040B0452C8C7A60B2D9F9F7C042DC8C7C80B040B0483FD52FFA8
%0B040B2D9F9FC8A60AA6C7C80B7CC7C8C77C0B040B040B0B052DCDC8CEC8
%820B587C0B0BC9C8CEC8A70B0B0BAEFD52FFA8050B0B2DCFC8C77C580B82
%0B0558CDC7CE7C0B0B050B0B042DC8C77C2DC8C7A60B042DA0C7A62DA6C7
%A60B0483FD52FFA80B042DC8C77C7C9F9F570B047C9F9F769F9F7C040B04
%040B5EC8A60B0B0BCDC75E0BC9C7A60B040BC87C040BA8FD52FFA80B0BC8
%C75E0B04A6C77C0458C79F510B2DA0C7580B0B0B04529F51040B047B9F52
%047B9F52040B04C8A60B0484FD52FFA80B047BA60B040B57C7A60B57C7A6
%0B040B7CC7570B040B0B897CAD0B0B0BAD7C830BAD7C830B0B0BCE7C0B0B
%A8FD52FFA80B0BADA60B0B0B2DCE7C0B2DCE7C0B0B0B52CE2D0B0B0B0458
%9F52040B047C9F52047C9F52040B04C8A60B0484FD53FF0B047CC80B040B
%58C7A60B58C7A60B040B7CC7580B040B0BA6C7A60B040BCDC87C0BCDC87C
%0B0B0BCDA00B0BAEFD53FF040BCDC8040B0B52C7A00B52C7A00B0B047CC7
%52040B0B04529F9F2D0B7CC79F0B047C9F7B040BA6C7A60B0483FD53FF0B
%047C9F7B040BA6C7A60B57C7C82D040BC8C7570B040B0B057CC7A5ADC8C8
%58050B58A0C7A0A7C8CE0B0B0BAEFD53FF050B58A0C77CCDC8CE0B0B0B82
%C8CD2DCEC8820B050B0B040B047CA0C7A051040B7C0B049F9FC7A00B040B
%0483FD53FF0B040B049FC8C7A00B042D040B7CC7C8C77C0B040B04040B0B
%0B7CC7C89F580BA6C87C0BA6C7C7A02D0B040BA8FD53FF0B0B040BA6C8CE
%7C0B51C8A02D2DCEC7C82D04FD040B040B7BC7C87B9F9FA7C7A6C7A7C7A0
%7B9F9F040B0484FD53FF0B040AA6C7A69E9F529FC79F9FC7C7A7C7C70B04
%0B04050B82C8CD2D0B7CC7C7CE2DCEC8CE0B58A6C7A0050BA8FD53FF0B0B
%CEC8CD0B58C7C8A6587CCDC8AD0BA6C8CE520B0B0B040BA0C7A62DA0A09F
%A0A6C7C9C77C2DC8C77C0B0484FD53FF0B042DC8C77C2DA09F9F52A6C7A0
%9F279F9F9F270B040B0B040BA6C8CEC7A651C8C7A62DCDC8C8C87C0B0B0B
%AEFD53FF040B0B2DCDC7C99FADA5C8C87C7CC79FC7A02D0B040B0B040B04
%2DC8C7C90B042DA60B042D9FC7A00B040B0483FD53FF0B040B040BC8C7A6
%0B579F7B0B049F9F9F040B040B040B0B052DCDC8CEC8CD0B050B0B58CDC8
%CEC8820B0B0BAEFD53FF050B0B2DCEC8CEC8A70B580B58A0C7A0CD7C0B0B
%050B0B042DC8C7A60BA6C7A60B04529FC77C2DC8C77C0B0483FD53FF0B04
%2DC8C77C2DC8C7A60B049F9F9F049F9F7C040B04040BA6C8C90B0B0BCDC7
%5E0BC8C7820B042DC87C040BA8FD53FF0B0BC9C7820B042DC87C0458C7A0
%510B2DA0C8580B0B0B04589F51040B047B9F52047B9F52040B04C8A60B04
%84FD53FF0B047BA60B040B04C8A60B57C77C0B040B7CC7570B04050BA6C8
%A60B0B0BCEC8820BCEC8820B050BCD7C050BA8FD53FF0B0BCEC90B0B050B
%CD7C0558C77C050B0B7CC7580B0B0B04589F52040B047C9F52047C9F5204
%0B04C8A60B0484FD53FF0B047CC80B040B04C8A60B58C77C0B040B7CC758
%0B040B0BA6C7A60B040BC8C8A67CC89F580B0B0BCDA00B0BAEFD53FF040B
%CDC8040B0B0BCDC782A0C77C0B0B047CC752040B0B04519F58040B040BA0
%C7A7A02D0B040B04C7A60B0483FD53FF0B047CA60B040B040BC8C7A67B04
%0B040BA6C7570B040B0BA6C8A60B050B0B52CEC8A60B050B0B0BCDA00B0B
%AEFD53FF050BCDC9050B0B0B587CCEC8CE0B0B0B057CC758050B0B04529F
%58040B042D9FA0A6C7A60B040B04C8C80B0483FD53FF0B047CA60B040B04
%9F9F58C8C77C0B040BA6C7570B04040BA6C8A60B0B0BC9C7820BCDC75E0B
%040BCD7C040BA8FD53FF0B0BC8C80B0B0482C77C042DC8C9040B0B58C758
%0B0B0B04589F51040B047B9F52047B9F52040B04C8A60B0484FD53FF0B04
%7BA60B040BA6C77C0B04C8A60B040B7CC7570B04050BA6C8A60B0B0BCEC8
%820BCEC8820B050BCD7C050BA8FD53FF0B0BCEC90B0B057CC77C050BCDC9
%050B0B7CC7580B0B0B04589F52040B047C9F52047C9F52040B04C8A60B04
%84FD18FFA883A884A883A884A883A884A883A884A883A884A883A884A883
%A884A883A884A87DA884A883A884A883A884A883A884A883A884A883A884
%A883A80B047CC80B040BA6C77C0B04C8A60B040B7CC7580B040B0BA6C7C8
%0B040BA6C87C0BCDC8820B0B2DCDA00B0B040B0B0B040B0B0B040B0B0B04
%0B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B
%0B040B0B0B040B0B0B040B0B0B040B340B040B0B0B040B0B0B040B0B0B04
%0B0B0B040B0B0B040B0B0B040BCDC8580B0B7CC77C0B0BCDC75E0B04A6C7
%52040B0B040BA6C7A60AA6C7A60A042D9FC77C2DC7C77C0B040B040B040B
%040B040B040B040B040B040B040B040B040B040B2D0B040B040B040B040B
%040B040B040B040B040B040B040B040B040B040B040B0404040B040B040B
%040B040B040B040B040B040B040B040B040B040B04589F9F047C9F9F570B
%047B9F9F2D2D9F9F270B040B0B050BCDC8CEC8A60B82580B58CDC8CEC882
%0BA67CCEA0CD7CCEA0CD7CCEA0CD7C580B0B0B58A0580B050BCD7CCE7CCD
%7C7C0B0B58CE0B0B0BC9A0CD7CCEA0CD7CCEA0CD7C050B0B7C820B0B7CCE
%A0CE7CCE7C580B050BCD58050B0B58CEA0CD7CCEA0CD7CCEA0CD7CCE580B
%7CC7A0C7A5580B820B057CC7A5CEA55E0B050B0B040B042DC8C7CE0B7CC7
%9F510451A0C7A10BA6C7A0C8C8C8A6C8C8C8A6C8C8C8A09F570B519F9F9F
%040BA6C7A6C8CEC8A09F572DA0C7A60BA6C7C8C8A6C8C8C8A6C8C8C89F7C
%04589FC757589FC8C87CA6C89F9F040BA6C79F2D04519FC7C8C8A6C8C8C8
%A6C8C8C8A6C79F5104A09F9F510B7CC7A00B047C9F9F7C0B040B04040B0B
%2DCDC7C9C8CFC7C8C8C858C7C8CEC7CEC8CD2D0B0B040B0B0B040B0B0B04
%58C79FADA5C7A6C7A0A6C8A60B0B0B0452C79FCEA5CEC8CEC7A60B040B0B
%0B040B0B0B047CC77BC8A6C89FC9A02D0B340B0B7CC7A0A6C8C9A5C775C8
%A55E0B040B0B0B040B0B0B040B5E9FC87CC7A5CDA0A6C8CDC7A652C8A6C7
%9F58FD040B042DC7C77C0BA1C7A02D7B7B9FC77B0BC8C7C80A040B040B04
%0B040B040B040B042D9F9F9F2D047B9F9FA60B040B0B0B042DC8C77C0BA6
%C7A70B040B040B040B040B040B049FC79F04519F9F570B0404040B047AC8
%C7A00A57C79F9F570B040B040B040B040B040B040B2D9F9F9F2D7BA6C79F
%51A6C7A07A572D9F9F570B04050B58A0CD7C82C8CE7CA658CDC8CE58A7C8
%CEC8A70B0B0B050B0B0B050B0B0B050B5EA5CDA6822DCFC8C7A0580B0B0B
%050BA6C8CD7C5EA5CEA55E0B050B0B0B050B0B0B050BCEC8CF2DCDC8C77C
%0B0B340B0B0BCEC8CDA05858CEC8CD580B0B050B0B0B050B0B0B050B0B58
%CDC8CE5882C8C8A05858CEC8CE0BA6C8CE2D0B0B0B040B049F9FC8C82DCD
%C7A0C7A7C79FA5A62DC8C7C8587C52A60B040B040B040B579F9F52C8C7C8
%C7A69F9FA058525252A7C7A67CCD9FC8519FA05752580B040B58525752C8
%C7A6C7C9C77C7C9F7C57045852A6C7A67CFD049F7CC79F7C5752580B040B
%04525752587C9FC7A7C79F7C9F7B9FA09F7CA0C7CEC7C82D040B040B0B04
%0BA7C7C77C0B0BCDC7820BCEC7C751042DC8C8C7C7C7C8CD0B5EA0CDC8CD
%C8C77C0B2DCEC7CE0B51A0C7C8C77CC7C8CD0B2D9FC8520B58C7C7C7C8CD
%2DA6C8C7C7C7C8C80BCEC8CE0B2D9FC7C7CEC8C7C7A60B04A0C79FA70B82
%C8C7C7C7C8CD2D0B7CC7C7C7C8C7C7820BCEC7C751047CC79F580BCEC8CE
%2D0B0B040B0B040B7CC7C79F9F7C040A7C0BA6C7A7C79F2D042D7C51A658
%A6C7A79F9F7BA67CA657042DC7C7C9C77B0B047CA67BA77CA60B047C9F76
%C82D0457A67CA6C7A7C7C87BA67CA60AA6C7C8C7A60B2D7BA652A67BA60B
%042D9FA09F7B040B7B7BA67CA6C7A67C9F9FA67CA67B7C0B7BC7A7C79F2D
%04582D0BA6C7C7A5A60B040B040B0B7CC8CD2D58A6C77C050BA7C8CE0B82
%C8CD580B0B050B0B0BCEA5C858050B0B0B050BCDC8A62DCDC87C0B0B0B05
%0B0B0B057CC77C7CC8CE0B050B0B0BCEC8CE2D050B0B0B7CC8CD0BCEC883
%0B050B340B050B0B58CDC85E7CC7A60B0B050B0B0B827CC7A0580B0B0B05
%0B82C8CD5882C8CD580B0BA7C8CD2DCEC8CD0B050B0B040BA6C7A62D9FC7
%7C0B042DC8C77C9F9F9F270B040B040B519F9F7CA6525852570B04519F9F
%A7C7A00B042D57527D52570B279FC87C9F51042D58527C9F9FA0A6525852
%570BA6C77CC7C80B0452580A5752570B049F9F7CC8C77C0B04525852577C
%9F9FA67C5852575227519FC77C7C9F9F270B047C9F9F519F9F7C040B0404
%0B0B0BCDC8C7C87C0BA67C042DC89FC7A02D0BA6C8CDC8CDC8C751CDC7C7
%C8C7C7A60B0458C7C7CE0B0B51C8C7C77CC7C7A60B58C8C77C042DC8C8C7
%C7C751A6C7C7C8C7C7820BCDC7CE2D047CC7C8CEC7C7C87C0B2D9FCEC782
%0B51A0C7C8C7C7C79FA6C7C7C8C7C7C77C0458C7C8CEA02D0BA6580B7CC7
%A5CE7C04FD040B040B042C9FC7A70BA6C79F7B049F9F7B7C0BA6C7A6C8A6
%C7A62D040AA6587C51A6C7A00AA6C79F9F572D9F9FA67CA77BA6C77B2D9F
%A0A60AC8C7A67BA658040BA67CA67BC89F2D579F9F042D9FA0A651A67C9F
%C77C2DC7C7C87C047B9FA0A67BA67C040B7C7CA67BA6A09F7B04759F9F57
%0BA6C79F2D047B9F9F2D0B040B04050B0B58CDC8CEC8CEC8CDA6C7A0C7A0
%CFC8CEC8CE2D0B0B050B0B0B050B0B0B050BCDC8CEC8CD58CDA6C8A5580B
%0B0B050BCDC8CEA6A7C8CEC8820B050B0B0B050B0B0B052DCDA0CD82C8A0
%CDA6580B340B0B58CDC8CEC8CEA0C7A0C7A0580B050B0B0B050B0B0B050B
%58A0C7A0C77CCDA5CEC8CEC8C87CCDA0C7A558FD040B04529FC77C0BA6C7
%C82D519F9FA0042DC9C7C82D040B040B040B040B040B040B040BC8C7C90B
%04519F9F760B040B2D0B042DC89F570BC9C7CE0B040B040B040B040B040B
%047B9FA0047C9FA0570B0404040B04519FA5A60B57A09F9F270B040B040B
%040B040B040B040B049F9F9F042DCDC7C82D7CC79F9F277C9F9F570B040B
%0BA6C7A60BA6C7C8A0CDA0C8A5C77C82C8CEC7820B040B0B0B040B0B0B04
%0B0B0BCDC7C9C8CD7CC79FCEA55E0B040B0B0BCDC8C7A07CC7CEC87C0B0B
%0B040B0B0B040B0B51C8A0C758CDC8C751040B340B042DC8C7C8A55E7CC7
%C8C77C040B0B0B040B0B0B040B0B0B047CC8A5C858A6C8CEA55E7CCDC7C7
%5104A6C758040B0B04519F7CA6C7C82DA6C79F9F2D9F9FC7C70BC8C7A651
%A6587C51A6587C51A658A6C7A60BA0C79F9F2D2D9F9F7C51A758A6C7A652
%9FC7A62DC79FA6587C51A6587C51A658A09F04A09FC77C9FA051A64B7C51
%C8C7A62D9FC89F7B579F9F7CA6587C51A6587C51A6587C7C9F9F2D9FA0C7
%A02D9FC89F7B7CC79F58A6C77C0B040B0BA6C8C7C8CE2D0B0BA7A0580B58
%A5CD2D052DCDC8C7C8C7C8C7C8C7C8C7C8C7C8A70B0B0BCEA55E0B0558C8
%C8C77CC7C8A70B0B7CCE2D0B52CDC8C7C8C7C8C7C8C7C8C7C8580B58A6A7
%0B5EA5C7C8CEC8C7C8A60B0558C8A0580B5EA5C7C8C7C8C7C8C7C8C7C8C7
%C8C7A0580B58A5CD0B0558C8A0580B82C8C7C8C758050B0B040B587C7C2D
%040B040B040B040B572D040B040B575258525752585257525852570B040B
%040B570B040B042D57527D52570B040B040B040B042D5852575258525752
%5852570B040B510B040B5752582D7C527C0B040B042D040B040B5152A658
%7C52A6587C52A6587C52570B040B570B040B042D040B040B7B52A658510B
%04040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B04
%0B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B
%0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B340B0B0B040B0B0B04
%0B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B0B040B0B
%0B040B0B0B04FD040B040B040B040B040B040B040B040B040B040B040B04
%0B040B040B040B040B040B040B040B040B040B040B040B040B0B0B040B04
%0B040B040B040B040B040B040B040B040B040B040B040B040B040B040404
%0B040B040B040B040B040B040B040B040B040B040B040B040B040B040B04
%0B040B040B040B040B040B040B040B04
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(New Pattern 6)
0 A
u800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
-4011.5 4715 m
-3885.7754 4715 L
-3885.7754 4564.7637 L
-4011.5 4564.7637 L
-4011.5 4715 L
nu0 O
1 0.35 1 0.2 (New Color Swatch 9) 0 0 Xk
-3886.2754 4634.9209 m
-3886.2754 4564.7637 L
-4011 4564.7637 L
-4011 4634.9209 L
-3886.2754 4634.9209 L
fu0 0.25 0.75 0 (New Color Swatch 8) 0 0 Xk
0 R
1 G
-3985.6401 4579.4521 m
-4002.0811 4596.7119 l
-4011 4596.7119 l
-4011 4591.3311 l
-4003.665 4591.3311 l
-3985.6401 4573.3887 L
B-3983.6162 4588.458 m
-3969.0723 4573.3887 l
-3928.0806 4573.3887 l
-3901.6606 4600.4009 L
-3928.0806 4627.0732 l
-3969.0723 4627.0732 l
-3995.5552 4600.4009 L
-3989.0273 4593.7734 l
-3985.6997 4597.1528 l
-3988.9663 4600.4009 L
-3967.4248 4622.1826 l
-3929.6646 4622.1826 l
-3907.8696 4600.4009 L
-3929.6646 4578.6191 l
-3967.4248 4578.6191 l
-3980.5049 4591.8472 L
-3983.6162 4588.458 L
b-3907.6567 4608.1484 m
-3893.6143 4622.1826 l
-3886.2754 4622.1826 l
-3886.2754 4627.0732 l
-3895.1982 4627.0732 l
-3910.791 4611.3315 L
-3907.6567 4608.1484 L
b-3915.8667 4606.3701 m
-3921.6182 4600.4009 L
-3895.1982 4573.3887 l
-3886.2754 4573.3887 l
-3886.2754 4578.6191 l
-3893.6143 4578.6191 l
-3915.4092 4600.4009 L
-3912.6563 4603.1021 l
-3915.8667 4606.3701 l
b-4011 4573.3887 m
-4000.1172 4573.3887 l
-3973.9858 4600.4009 L
-4000.3423 4627.0732 l
-4011 4627.0732 l
-4011 4622.1826 l
-4002.5776 4622.1826 l
-3980.7827 4600.4009 L
-4001.7007 4578.6191 l
-4011 4578.6191 l
-4011 4573.3887 l
b-3970.1567 4604.0889 m
-3955.3452 4604.0889 l
-3942.167 4591.3311 l
-3929.6646 4591.3311 l
-3911.6392 4573.3887 L
-3893.6143 4591.3311 l
-3886.2754 4591.3311 l
-3886.2754 4596.7119 l
-3895.1982 4596.7119 l
-3911.6392 4579.4521 L
-3928.0806 4596.7119 l
-3940.3081 4596.7119 l
-3953.2539 4609.4668 l
-3968.4961 4609.4668 L
-3985.6401 4627.7847 L
-4003.665 4609.4668 l
-4011 4609.4668 l
-4011 4604.0889 l
-4002.0811 4604.0889 l
-3985.6401 4621.3496 L
-3970.1567 4604.0889 L
b-3943.4341 4601.6147 m
-3940.9844 4604.0889 l
-3928.0806 4604.0889 l
-3911.6392 4621.3496 L
-3895.1982 4604.0889 l
-3886.2754 4604.0889 l
-3886.2754 4609.4668 l
-3893.6143 4609.4668 l
-3911.6392 4627.7847 L
-3929.6646 4609.4668 l
-3942.167 4609.4668 l
-3946.707 4604.9395 l
-3943.4341 4601.6147 l
b-3985.6563 4579.5635 m
-3970.0859 4596.7119 l
-3956.3589 4596.7119 l
-3952.5288 4599.8413 l
-3949.1782 4596.5522 l
-3954.9438 4591.3311 l
-3968.4385 4591.3311 l
-3985.6563 4573.3887 l
BUU1 Ap
-3886.2754 4715 m
-4011 4715 L
-4011 4564.7637 L
-3886.2754 4564.7637 L
-3886.2754 4715 L
nU%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(New Pattern 7)
0 A
u0 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
-4013 4713.5 m
-3862.2639 4713.5 L
-3862.2639 4562.7637 L
-4013 4562.7637 L
-4013 4713.5 L
n0 O
1 0.35 1 0.2 (New Color Swatch 9) 0 0 Xk
-4012.854 4562.7637 m
-3862.7639 4562.7637 L
-3862.7639 4632.9185 L
-3943.3811 4632.9185 L
-3943.3811 4713 L
-4013 4713 L
-4013 4562.8057 L
Fu0 0.25 0.75 0 (New Color Swatch 8) 0 0 Xk
0 R
1 G
-3960.5017 4586.0967 m
-3946.1877 4571.3818 l
-3904.8855 4571.3818 l
-3878.2654 4598.373 L
-3904.8855 4625.0239 l
-3946.1877 4625.0239 l
-3972.8718 4598.373 L
-3965.7837 4591.293 l
-3962.4312 4594.6699 l
-3966.2329 4598.373 L
-3944.5286 4620.1372 l
-3906.4817 4620.1372 l
-3884.5217 4598.373 L
-3906.4817 4576.6084 l
-3944.5286 4576.6084 l
-3957.3674 4589.4824 L
-3960.5017 4586.0967 L
b-3989.572 4614.0371 m
-4003.7161 4628.793 l
-4003.7161 4670.396 l
-3977.2571 4697.21 L
-3950.7986 4670.396 l
-3950.7986 4628.793 l
-3977.2571 4601.915 L
-3983.5608 4608.3247 l
-3980.2085 4611.7017 l
-3977.2571 4608.6021 L
-3955.6501 4630.4648 l
-3955.6501 4668.7886 l
-3977.2571 4690.9082 L
-3998.8645 4668.7886 l
-3998.8645 4630.4648 l
-3986.0833 4617.5322 L
-3989.572 4614.0371 L
b-3996.9141 4591.355 m
-4003.4644 4597.7607 L
-3977.2253 4624.2832 L
-3963.0688 4609.9741 L
-3966.4885 4606.6162 L
-3977.2253 4617.3955 L
-3996.9246 4597.7607 L
-3993.7681 4594.4414 L
-3996.9141 4591.355 L
b-3991.7639 4585.7705 m
-3977.2253 4571.3818 L
-3950.9861 4597.7607 L
-3957.8435 4604.6924 L
-3961.1018 4601.3247 L
-3957.5261 4597.7607 L
-3977.2253 4577.2939 L
-3988.5708 4588.9888 L
-3991.7639 4585.7705 L
b-3862.7639 4571.3818 m
-3871.7542 4571.3818 l
-3898.3743 4598.373 L
-3871.7542 4625.0239 l
-3862.7639 4625.0239 l
-3862.7639 4620.1372 l
-3870.158 4620.1372 l
-3892.1179 4598.373 L
-3870.158 4576.6084 l
-3862.7639 4576.6084 L
-3862.7639 4571.3818 L
b-3976.4041 4647.2549 m
-3972.6414 4643.4648 l
-3972.6414 4629.5332 l
-3946.1877 4602.0576 l
-3932.3567 4602.0576 l
-3919.0784 4589.3101 l
-3906.4817 4589.3101 l
-3888.3201 4571.3818 L
-3870.158 4589.3101 l
-3862.7639 4589.3101 l
-3862.7639 4594.687 l
-3871.7542 4594.687 l
-3888.3201 4577.4404 L
-3904.8855 4594.687 l
-3917.887 4594.687 l
-3930.9309 4607.4312 l
-3944.5286 4607.4312 l
-3967.4707 4631.2051 l
-3967.4707 4644.9014 l
-3973.042 4650.5986 l
-3976.4041 4647.2549 l
b-3920.2913 4599.2642 m
-3917.887 4602.0576 l
-3904.8855 4602.0576 l
-3888.3201 4619.3047 L
-3871.7542 4602.0576 l
-3862.7639 4602.0576 l
-3862.7639 4607.4312 l
-3870.158 4607.4312 l
-3888.3201 4625.7349 L
-3906.4817 4607.4312 l
-3919.0784 4607.4312 l
-3923.5901 4602.5864 l
-3920.2913 4599.2642 l
b-3950.4143 4713 m
-3950.4143 4704.1211 l
-3977.1792 4677.0908 L
-4003.6377 4703.9048 l
-4003.6377 4713 l
-3998.8555 4713 l
-3998.8555 4705.5122 l
-3977.1792 4683.3926 L
-3955.5725 4705.5122 l
-3955.5725 4713 l
-3950.4143 4713 l
b-3956.7771 4687.8047 m
-3973.5708 4703.9546 l
-3973.5708 4713 l
-3968.2285 4713 l
-3968.2285 4705.562 l
-3950.0061 4687.7827 L
-3968.531 4669.5288 l
-3968.531 4656.8398 l
-3981.8093 4643.4648 l
-3981.8093 4629.5332 l
-3997.896 4613.731 l
-3981.5537 4597.7607 l
-3998.7578 4580.9512 l
-3998.7578 4576.6084 L
-3994.5339 4576.6084 l
-3977.7305 4594.0127 l
-3961.8762 4577.5518 l
-3946.1877 4594.687 l
-3932.3567 4594.687 l
-3929.6384 4597.084 l
-3926.3186 4593.6118 l
-3930.9309 4589.3101 l
-3944.5286 4589.3101 l
-3961.8762 4571.3818 l
-3977.7305 4586.811 l
-3993.1294 4571.3818 l
-4004.2466 4571.3818 L
-4004.2798 4582.25 l
-3988.7036 4597.7607 l
-4004.7373 4613.731 l
-3986.9802 4631.2051 l
-3986.9802 4644.9014 l
-3973.9358 4658.04 l
-3973.9358 4671.1367 l
-3956.7771 4687.8047 L
b-3978.0642 4655.0137 m
-3980.4685 4657.4355 l
-3980.4685 4670.5317 l
-3997.3328 4687.2183 L
-3980.8933 4703.9048 l
-3980.8933 4713 l
-3986.2131 4713 l
-3986.2131 4705.5122 l
-4004.3435 4687.2183 L
-3985.8733 4668.9248 l
-3985.8733 4656.2354 l
-3981.3623 4651.6914 l
-3978.0642 4655.0137 l
bU1 Ap
-3862.7639 4713.042 m
-4013 4713.042 L
-4013 4562.8057 L
-3862.7639 4562.8057 L
-3862.7639 4713.042 L
nU%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
1 g
(K=0) Pc
0 0.25 0.75 0 (New Color Swatch 8) 0 0 Xk
(New Color Swatch 8) Pc
1 0.35 1 0.2 (New Color Swatch 9) 0 0 Xk
(New Color Swatch 9) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe PatternOnPath Brush Tool/ Pattern Brush 1/) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Pattern Brush 1)
(1 / New Pattern 6/ / New Pattern 7/ / / 0 0 /  1 0 1 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 100 Lb
(Layer 1) Ln
0 A
u0 Ap
0 O
1 0.35 1 0.2 (New Color Swatch 9) 0 0 Xk
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
366.21 316.8496 m
366.21 387.0068 L
241.4854 387.0068 L
241.4854 316.8496 L
366.21 316.8496 L
fu0 0.25 0.75 0 (New Color Swatch 8) 0 0 Xk
0 R
1 G
266.8452 372.3184 m
250.4043 355.0586 l
241.4854 355.0586 l
241.4854 360.4395 l
248.8203 360.4395 l
266.8452 378.3818 L
B268.8691 363.3125 m
283.4131 378.3818 l
324.4043 378.3818 l
350.8242 351.3691 L
324.4043 324.6973 l
283.4131 324.6973 l
256.9302 351.3691 L
263.458 357.9971 l
266.7856 354.6172 l
263.519 351.3691 L
285.0605 329.5879 l
322.8203 329.5879 l
344.6152 351.3691 L
322.8203 373.1514 l
285.0605 373.1514 l
271.9805 359.9238 L
268.8691 363.3125 L
b344.8281 343.6221 m
358.8711 329.5879 l
366.21 329.5879 l
366.21 324.6973 l
357.2871 324.6973 l
341.6943 340.4395 L
344.8281 343.6221 L
b336.6191 345.4004 m
330.8672 351.3691 L
357.2871 378.3818 l
366.21 378.3818 l
366.21 373.1514 l
358.8711 373.1514 l
337.0762 351.3691 L
339.8291 348.668 l
336.6191 345.4004 l
b241.4854 378.3818 m
252.3682 378.3818 l
278.4995 351.3691 L
252.1431 324.6973 l
241.4854 324.6973 l
241.4854 329.5879 l
249.9077 329.5879 l
271.7026 351.3691 L
250.7847 373.1514 l
241.4854 373.1514 l
241.4854 378.3818 l
b282.3286 347.6816 m
297.1401 347.6816 l
310.3184 360.4395 l
322.8203 360.4395 l
340.8457 378.3818 L
358.8711 360.4395 l
366.21 360.4395 l
366.21 355.0586 l
357.2871 355.0586 l
340.8457 372.3184 L
324.4043 355.0586 l
312.1777 355.0586 l
299.2314 342.3047 l
283.9893 342.3047 L
266.8452 323.9863 L
248.8203 342.3047 l
241.4854 342.3047 l
241.4854 347.6816 l
250.4043 347.6816 l
266.8452 330.4209 L
282.3286 347.6816 L
b309.0508 350.1563 m
311.501 347.6816 l
324.4043 347.6816 l
340.8457 330.4209 L
357.2871 347.6816 l
366.21 347.6816 l
366.21 342.3047 l
358.8711 342.3047 l
340.8457 323.9863 L
322.8203 342.3047 l
310.3184 342.3047 l
305.7783 346.8311 l
309.0508 350.1563 l
b266.8291 372.207 m
282.3994 355.0586 l
296.1265 355.0586 l
299.9565 351.9297 l
303.3071 355.2188 l
297.5415 360.4395 l
284.0469 360.4395 l
266.8291 378.3818 l
BUUu1 0.35 1 0.2 (New Color Swatch 9) 0 0 Xk
151 470 m
301.0903 470 L
301.0903 399.8452 L
220.4731 399.8452 L
220.4731 319.7637 L
150.854 319.7637 L
150.854 469.958 L
Fu0 0.25 0.75 0 (New Color Swatch 8) 0 0 Xk
0 R
1 G
203.3525 446.667 m
217.6665 461.3818 l
258.9688 461.3818 l
285.5889 434.3911 L
258.9688 407.7397 l
217.6665 407.7397 l
190.9824 434.3911 L
198.0708 441.4707 l
201.4233 438.0938 l
197.6211 434.3911 L
219.3257 412.6265 l
257.3726 412.6265 l
279.3325 434.3911 L
257.3726 456.1553 l
219.3257 456.1553 l
206.4868 443.2813 L
203.3525 446.667 L
b174.2822 418.7266 m
160.1382 403.9707 l
160.1382 362.3672 l
186.5972 335.5537 L
213.0557 362.3672 l
213.0557 403.9707 l
186.5972 430.8486 L
180.2935 424.439 l
183.646 421.062 l
186.5972 424.1616 L
208.2041 402.2988 l
208.2041 363.9746 l
186.5972 341.8555 L
164.9897 363.9746 l
164.9897 402.2988 l
177.771 415.2314 L
174.2822 418.7266 L
b166.9404 441.4087 m
160.3901 435.0029 L
186.6289 408.4805 L
200.7852 422.7896 L
197.3657 426.1475 L
186.6289 415.3682 L
166.9297 435.0029 L
170.0864 438.3223 L
166.9404 441.4087 L
b172.0903 446.9932 m
186.6289 461.3818 L
212.8682 435.0029 L
206.0107 428.0713 L
202.7524 431.439 L
206.3281 435.0029 L
186.6289 455.4697 L
175.2832 443.7749 L
172.0903 446.9932 L
b301.0903 461.3818 m
292.1001 461.3818 l
265.48 434.3911 L
292.1001 407.7397 l
301.0903 407.7397 l
301.0903 412.6265 l
293.6963 412.6265 l
271.7363 434.3911 L
293.6963 456.1553 l
301.0903 456.1553 L
301.0903 461.3818 L
b187.4502 385.5088 m
191.2129 389.2988 l
191.2129 403.2305 l
217.6665 430.7061 l
231.4976 430.7061 l
244.7759 443.4536 l
257.3726 443.4536 l
275.5342 461.3818 L
293.6963 443.4536 l
301.0903 443.4536 l
301.0903 438.0767 l
292.1001 438.0767 l
275.5342 455.3232 L
258.9688 438.0767 l
245.9673 438.0767 l
232.9233 425.3325 l
219.3257 425.3325 l
196.3833 401.5586 l
196.3833 387.8623 l
190.8125 382.165 l
187.4502 385.5088 l
b243.563 433.4995 m
245.9673 430.7061 l
258.9688 430.7061 l
275.5342 413.459 L
292.1001 430.7061 l
301.0903 430.7061 l
301.0903 425.3325 l
293.6963 425.3325 l
275.5342 407.0288 L
257.3726 425.3325 l
244.7759 425.3325 l
240.2642 430.1772 l
243.563 433.4995 l
b213.4399 319.7637 m
213.4399 328.6426 l
186.6748 355.6729 L
160.2168 328.8594 l
160.2168 319.7637 l
164.999 319.7637 l
164.999 327.252 l
186.6748 349.3711 L
208.2817 327.252 l
208.2817 319.7637 l
213.4399 319.7637 l
b207.0771 344.959 m
190.2832 328.8086 l
190.2832 319.7637 l
195.6255 319.7637 l
195.6255 327.2012 l
213.8481 344.9805 L
195.3232 363.2344 l
195.3232 375.9238 l
182.0449 389.2988 l
182.0449 403.2305 l
165.9585 419.0327 l
182.3003 435.0029 l
165.0962 451.8125 l
165.0962 456.1553 L
169.3203 456.1553 l
186.124 438.751 l
201.978 455.2124 l
217.6665 438.0767 l
231.4976 438.0767 l
234.2158 435.6792 l
237.5356 439.1519 l
232.9233 443.4536 l
219.3257 443.4536 l
201.978 461.3818 l
186.124 445.9526 l
170.7251 461.3818 l
159.6079 461.3818 L
159.5747 450.5137 l
175.1504 435.0029 l
159.1167 419.0327 l
176.874 401.5586 l
176.874 387.8623 l
189.9185 374.7236 l
189.9185 361.627 l
207.0771 344.959 L
b185.79 377.75 m
183.3857 375.3281 l
183.3857 362.2324 l
166.5215 345.5449 L
182.9609 328.8594 l
182.9609 319.7637 l
177.6411 319.7637 l
177.6411 327.252 l
159.5107 345.5449 L
177.981 363.8389 l
177.981 376.5283 l
182.4917 381.0723 l
185.79 377.75 l
bU1 Ap
301.0903 319.7217 m
150.854 319.7217 L
150.854 469.958 L
301.0903 469.958 L
301.0903 319.7217 L
nUu%_0 R
%_1 0.35 1 0.2 (New Color Swatch 9) 0 0 XK
%_1 M%_404.5 217.5 m
%_148.5 217.5 L
%_148.5 473.5 L
%_404.5 473.5 L
%_404.5 217.5 L
%_s%_U%_0 Ap
0 A
u1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
404.5 217.5 m
148.5 217.5 L
148.5 473.5 L
404.5 473.5 L
404.5 217.5 L
nu0 Ap
0 O
1 0.35 1 0.2 (New Color Swatch 9) 0 0 Xk
143.5391 397.9614 m
73.3818 397.9614 L
73.3818 293.0391 L
143.5391 293.0391 L
143.5391 397.9614 L
f0 0.25 0.75 0 (New Color Swatch 8) 0 0 Xk
0 R
1 G
88.0703 314.3721 m
105.3301 300.542 L
105.3301 293.0391 L
99.9492 293.0391 L
99.9492 299.209 L
82.0068 314.3721 L
B97.0762 316.0752 m
82.0068 328.3096 L
82.0068 362.793 L
109.019 385.0186 L
135.6914 362.793 L
135.6914 328.3096 L
109.019 306.0313 L
102.3916 311.5225 L
105.771 314.3223 L
109.019 311.5742 L
130.8008 329.6953 L
130.8008 361.4609 L
109.019 379.7959 L
87.2373 361.4609 L
87.2373 329.6953 L
100.4653 318.6924 L
97.0762 316.0752 L
b116.7666 379.9746 m
130.8008 391.7871 L
130.8008 397.9614 L
135.6914 397.9614 L
135.6914 390.4551 L
119.9497 377.3379 L
116.7666 379.9746 L
b114.9883 373.0684 m
109.019 368.2295 L
82.0068 390.4551 L
82.0068 397.9614 L
87.2373 397.9614 L
87.2373 391.7871 L
109.019 373.4531 L
111.7202 375.7686 L
114.9883 373.0684 L
b82.0068 293.0391 m
82.0068 302.1934 L
109.019 324.1768 L
135.6914 302.0039 L
135.6914 293.0391 L
130.8008 293.0391 L
130.8008 300.124 L
109.019 318.459 L
87.2373 300.8613 L
87.2373 293.0391 L
82.0068 293.0391 L
b112.707 327.3975 m
112.707 339.8574 L
99.9492 350.9434 L
99.9492 361.4609 L
82.0068 376.624 L
99.9492 391.7871 L
99.9492 397.9614 L
105.3301 397.9614 L
105.3301 390.4551 L
88.0703 376.624 L
105.3301 362.793 L
105.3301 352.5068 L
118.085 341.6172 L
118.085 328.7949 L
136.4028 314.3721 L
118.085 299.209 L
118.085 293.0391 L
112.707 293.0391 L
112.707 300.542 L
129.9678 314.3721 L
112.707 327.3975 L
b110.2329 349.877 m
112.707 351.9385 L
112.707 362.793 L
129.9678 376.624 L
112.707 390.4551 L
112.707 397.9614 L
118.085 397.9614 L
118.085 391.7871 L
136.4028 376.624 L
118.085 361.4609 L
118.085 350.9434 L
113.5576 347.124 L
110.2329 349.877 L
b88.1816 314.3584 m
105.3301 327.457 L
105.3301 339.0049 L
108.4595 342.2266 L
105.1704 345.0449 L
99.9492 340.1953 L
99.9492 328.8428 L
82.0068 314.3584 L
BUu1 0.35 1 0.2 (New Color Swatch 9) 0 0 Xk
328.9609 478.4609 m
328.9609 548.6182 L
224.0386 548.6182 L
224.0386 478.4609 L
328.9609 478.4609 L
f0 0.25 0.75 0 (New Color Swatch 8) 0 0 Xk
0 R
1 G
245.3726 533.9297 m
231.5415 516.6699 L
224.0386 516.6699 L
224.0386 522.0508 L
230.209 522.0508 L
245.3726 539.9932 L
B247.0747 524.9238 m
259.3096 539.9932 L
293.7935 539.9932 L
316.0186 512.981 L
293.7935 486.3086 L
259.3096 486.3086 L
237.0313 512.981 L
242.5229 519.6084 L
245.3223 516.229 L
242.5742 512.981 L
260.6958 491.1992 L
292.4609 491.1992 L
310.7959 512.981 L
292.4609 534.7627 L
260.6958 534.7627 L
249.6924 521.5347 L
247.0747 524.9238 L
b310.9746 505.2334 m
322.7871 491.1992 L
328.9609 491.1992 L
328.9609 486.3086 L
321.4551 486.3086 L
308.3379 502.0503 L
310.9746 505.2334 L
b304.0679 507.0117 m
299.2295 512.981 L
321.4551 539.9932 L
328.9609 539.9932 L
328.9609 534.7627 L
322.7871 534.7627 L
304.4531 512.981 L
306.7686 510.2798 L
304.0679 507.0117 L
b224.0386 539.9932 m
233.1938 539.9932 L
255.1763 512.981 L
233.0044 486.3086 L
224.0386 486.3086 L
224.0386 491.1992 L
231.124 491.1992 L
249.4585 512.981 L
231.8618 534.7627 L
224.0386 534.7627 L
224.0386 539.9932 L
b258.3975 509.293 m
270.8574 509.293 L
281.9434 522.0508 L
292.4609 522.0508 L
307.624 539.9932 L
322.7871 522.0508 L
328.9609 522.0508 L
328.9609 516.6699 L
321.4551 516.6699 L
307.624 533.9297 L
293.7935 516.6699 L
283.5073 516.6699 L
272.6167 503.915 L
259.7944 503.915 L
245.3726 485.5972 L
230.209 503.915 L
224.0386 503.915 L
224.0386 509.293 L
231.5415 509.293 L
245.3726 492.0322 L
258.3975 509.293 L
b280.8774 511.7671 m
282.9385 509.293 L
293.7935 509.293 L
307.624 492.0322 L
321.4551 509.293 L
328.9609 509.293 L
328.9609 503.915 L
322.7871 503.915 L
307.624 485.5972 L
292.4609 503.915 L
281.9434 503.915 L
278.124 508.4424 L
280.8774 511.7671 L
b245.3589 533.8184 m
258.457 516.6699 L
270.0049 516.6699 L
273.2266 513.5405 L
276.0454 516.8296 L
271.1953 522.0508 L
259.8428 522.0508 L
245.3589 539.9932 L
BUu1 0.35 1 0.2 (New Color Swatch 9) 0 0 Xk
409.4609 293.0391 m
479.6182 293.0391 L
479.6182 397.9614 L
409.4609 397.9614 L
409.4609 293.0391 L
f0 0.25 0.75 0 (New Color Swatch 8) 0 0 Xk
0 R
1 G
464.9297 376.6279 m
447.6699 390.458 L
447.6699 397.9614 L
453.0508 397.9614 L
453.0508 391.791 L
470.9932 376.6279 L
B455.9238 374.9248 m
470.9932 362.6904 L
470.9932 328.207 L
443.9805 305.9814 L
417.3086 328.207 L
417.3086 362.6904 L
443.9805 384.9688 L
450.6084 379.4775 L
447.2285 376.6777 L
443.9805 379.4258 L
422.1992 361.3047 L
422.1992 329.5391 L
443.9805 311.2041 L
465.7627 329.5391 L
465.7627 361.3047 L
452.5352 372.3076 L
455.9238 374.9248 L
b436.2334 311.0254 m
422.1992 299.2129 L
422.1992 293.0391 L
417.3086 293.0391 L
417.3086 300.5449 L
433.0508 313.6621 L
436.2334 311.0254 L
b438.0117 317.9316 m
443.9805 322.7705 L
470.9932 300.5449 L
470.9932 293.0391 L
465.7627 293.0391 L
465.7627 299.2129 L
443.9805 317.5469 L
441.2793 315.2314 L
438.0117 317.9316 L
b470.9932 397.9614 m
470.9932 388.8066 L
443.9805 366.8232 L
417.3086 388.9961 L
417.3086 397.9614 L
422.1992 397.9614 L
422.1992 390.876 L
443.9805 372.541 L
465.7627 390.1387 L
465.7627 397.9614 L
470.9932 397.9614 L
b440.293 363.6025 m
440.293 351.1426 L
453.0508 340.0566 L
453.0508 329.5391 L
470.9932 314.376 L
453.0508 299.2129 L
453.0508 293.0391 L
447.6699 293.0391 L
447.6699 300.5449 L
464.9297 314.376 L
447.6699 328.207 L
447.6699 338.4932 L
434.915 349.3828 L
434.915 362.2051 L
416.5977 376.6279 L
434.915 391.791 L
434.915 397.9614 L
440.293 397.9614 L
440.293 390.458 L
423.0322 376.6279 L
440.293 363.6025 L
b442.7676 341.123 m
440.293 339.0615 L
440.293 328.207 L
423.0322 314.376 L
440.293 300.5449 L
440.293 293.0391 L
434.915 293.0391 L
434.915 299.2129 L
416.5977 314.376 L
434.915 329.5391 L
434.915 340.0566 L
439.4424 343.876 L
442.7676 341.123 L
b464.8184 376.6416 m
447.6699 363.543 L
447.6699 351.9951 L
444.541 348.7734 L
447.8301 345.9551 L
453.0508 350.8047 L
453.0508 362.1572 L
470.9932 376.6416 L
BUu1 0.35 1 0.2 (New Color Swatch 9) 0 0 Xk
224.0386 212.5391 m
224.0386 142.3818 L
328.9609 142.3818 L
328.9609 212.5391 L
224.0386 212.5391 L
f0 0.25 0.75 0 (New Color Swatch 8) 0 0 Xk
0 R
1 G
307.6279 157.0703 m
321.458 174.3301 L
328.9609 174.3301 L
328.9609 168.9492 L
322.791 168.9492 L
307.6279 151.0068 L
B305.9253 166.0762 m
293.6904 151.0068 L
259.2065 151.0068 L
236.9814 178.0195 L
259.2065 204.6914 L
293.6904 204.6914 L
315.9688 178.0195 L
310.4775 171.3916 L
307.6777 174.7715 L
310.4258 178.0195 L
292.3042 199.8008 L
260.5391 199.8008 L
242.2046 178.0195 L
260.5391 156.2373 L
292.3042 156.2373 L
303.3076 169.4648 L
305.9253 166.0762 L
b242.0254 185.7666 m
230.2124 199.8008 L
224.0386 199.8008 L
224.0386 204.6914 L
231.5449 204.6914 L
244.6621 188.9492 L
242.0254 185.7666 L
b248.9321 183.9883 m
253.7705 178.0195 L
231.5449 151.0068 L
224.0386 151.0068 L
224.0386 156.2373 L
230.2124 156.2373 L
248.5469 178.0195 L
246.2314 180.7207 L
248.9321 183.9883 L
b328.9609 151.0068 m
319.8066 151.0068 L
297.8237 178.0195 L
319.9961 204.6914 L
328.9609 204.6914 L
328.9609 199.8008 L
321.876 199.8008 L
303.5415 178.0195 L
321.1387 156.2373 L
328.9609 156.2373 L
328.9609 151.0068 L
b294.6025 181.707 m
282.1426 181.707 L
271.0566 168.9492 L
260.5391 168.9492 L
245.3755 151.0068 L
230.2124 168.9492 L
224.0386 168.9492 L
224.0386 174.3301 L
231.5449 174.3301 L
245.3755 157.0703 L
259.2065 174.3301 L
269.4927 174.3301 L
280.3833 187.085 L
293.2056 187.085 L
307.6279 205.4023 L
322.791 187.085 L
328.9609 187.085 L
328.9609 181.707 L
321.458 181.707 L
307.6279 198.9678 L
294.6025 181.707 L
b272.1226 179.2324 m
270.0615 181.707 L
259.2065 181.707 L
245.3755 198.9678 L
231.5449 181.707 L
224.0386 181.707 L
224.0386 187.085 L
230.2124 187.085 L
245.3755 205.4023 L
260.5391 187.085 L
271.0566 187.085 L
274.876 182.5576 L
272.1226 179.2324 L
b307.6416 157.1816 m
294.543 174.3301 L
282.9951 174.3301 L
279.7734 177.459 L
276.9546 174.1699 L
281.8047 168.9492 L
293.1572 168.9492 L
307.6416 151.0068 L
BUu1 0.35 1 0.2 (New Color Swatch 9) 0 0 Xk
73.2778 548.8682 m
223.3682 548.8682 L
223.3682 478.7134 L
142.751 478.7134 L
142.751 398.6318 L
73.1318 398.6318 L
73.1318 548.8262 L
F0 0.25 0.75 0 (New Color Swatch 8) 0 0 Xk
0 R
1 G
125.6304 525.5352 m
139.9443 540.25 L
181.2466 540.25 L
207.8667 513.2588 L
181.2466 486.6079 L
139.9443 486.6079 L
113.2603 513.2588 L
120.3481 520.3389 L
123.7007 516.9619 L
119.8989 513.2588 L
141.6035 491.4946 L
179.6504 491.4946 L
201.6104 513.2588 L
179.6504 535.0234 L
141.6035 535.0234 L
128.7646 522.1494 L
125.6304 525.5352 L
b96.5601 497.5947 m
82.416 482.8389 L
82.416 441.2358 L
108.875 414.4219 L
135.3335 441.2358 L
135.3335 482.8389 L
108.875 509.7168 L
102.5713 503.3071 L
105.9233 499.9302 L
108.875 503.0298 L
130.4819 481.167 L
130.4819 442.8433 L
108.875 420.7236 L
87.2676 442.8433 L
87.2676 481.167 L
100.0488 494.0996 L
96.5601 497.5947 L
b89.2178 520.2769 m
82.6675 513.8711 L
108.9067 487.3486 L
123.063 501.6577 L
119.6436 505.0156 L
108.9067 494.2363 L
89.2075 513.8711 L
92.3638 517.1904 L
89.2178 520.2769 L
b94.3682 525.8613 m
108.9067 540.25 L
135.146 513.8711 L
128.2886 506.9395 L
125.0303 510.3071 L
128.606 513.8711 L
108.9067 534.3379 L
97.561 522.6431 L
94.3682 525.8613 L
b223.3682 540.25 m
214.3779 540.25 L
187.7578 513.2588 L
214.3779 486.6079 L
223.3682 486.6079 L
223.3682 491.4946 L
215.9741 491.4946 L
194.0142 513.2588 L
215.9741 535.0234 L
223.3682 535.0234 L
223.3682 540.25 L
b109.728 464.377 m
113.4907 468.167 L
113.4907 482.0986 L
139.9443 509.5742 L
153.7754 509.5742 L
167.0537 522.3218 L
179.6504 522.3218 L
197.812 540.25 L
215.9741 522.3218 L
223.3682 522.3218 L
223.3682 516.9448 L
214.3779 516.9448 L
197.812 534.1914 L
181.2466 516.9448 L
168.2451 516.9448 L
155.2012 504.2007 L
141.6035 504.2007 L
118.6611 480.4268 L
118.6611 466.7305 L
113.0898 461.0332 L
109.728 464.377 L
b165.8408 512.3677 m
168.2451 509.5742 L
181.2466 509.5742 L
197.812 492.3271 L
214.3779 509.5742 L
223.3682 509.5742 L
223.3682 504.2007 L
215.9741 504.2007 L
197.812 485.897 L
179.6504 504.2007 L
167.0537 504.2007 L
162.542 509.0454 L
165.8408 512.3677 L
b135.7178 398.6318 m
135.7178 407.5107 L
108.9526 434.541 L
82.4941 407.7271 L
82.4941 398.6318 L
87.2764 398.6318 L
87.2764 406.1196 L
108.9526 428.2393 L
130.5596 406.1196 L
130.5596 398.6318 L
135.7178 398.6318 L
b129.355 423.8271 m
112.561 407.6772 L
112.561 398.6318 L
117.9033 398.6318 L
117.9033 406.0698 L
136.126 423.8491 L
117.6011 442.103 L
117.6011 454.792 L
104.3228 468.167 L
104.3228 482.0986 L
88.2358 497.9009 L
104.5781 513.8711 L
87.374 530.6807 L
87.374 535.0234 L
91.5981 535.0234 L
108.4014 517.6191 L
124.2559 534.0801 L
139.9443 516.9448 L
153.7754 516.9448 L
156.4937 514.5479 L
159.8135 518.02 L
155.2012 522.3218 L
141.6035 522.3218 L
124.2559 540.25 L
108.4014 524.8208 L
93.0024 540.25 L
81.8853 540.25 L
81.8521 529.3818 L
97.4282 513.8711 L
81.3945 497.9009 L
99.1519 480.4268 L
99.1519 466.7305 L
112.1963 453.5918 L
112.1963 440.4951 L
129.355 423.8271 L
b108.0679 456.6182 m
105.6636 454.1963 L
105.6636 441.1001 L
88.7993 424.4136 L
105.2388 407.7271 L
105.2388 398.6318 L
99.9189 398.6318 L
99.9189 406.1196 L
81.7886 424.4136 L
100.2588 442.707 L
100.2588 455.3965 L
104.7695 459.9404 L
108.0679 456.6182 L
bUu1 0.35 1 0.2 (New Color Swatch 9) 0 0 Xk
479.8682 548.7222 m
479.8682 398.6318 L
409.7129 398.6318 L
409.7129 479.249 L
329.6318 479.249 L
329.6318 548.8682 L
479.8262 548.8682 L
F0 0.25 0.75 0 (New Color Swatch 8) 0 0 Xk
0 R
1 G
456.5352 496.3696 m
471.25 482.0557 L
471.25 440.7534 L
444.2588 414.1333 L
417.6074 440.7534 L
417.6074 482.0557 L
444.2588 508.7397 L
451.3389 501.6519 L
447.9619 498.2993 L
444.2588 502.1011 L
422.4941 480.3965 L
422.4941 442.3496 L
444.2588 420.3896 L
466.0234 442.3496 L
466.0234 480.3965 L
453.1494 493.2354 L
456.5352 496.3696 L
b428.5947 525.4399 m
413.8389 539.584 L
372.2363 539.584 L
345.4219 513.125 L
372.2363 486.6665 L
413.8389 486.6665 L
440.7168 513.125 L
434.3066 519.4287 L
430.9297 516.0767 L
434.0293 513.125 L
412.167 491.5181 L
373.8438 491.5181 L
351.7236 513.125 L
373.8438 534.7324 L
412.167 534.7324 L
425.0996 521.9512 L
428.5947 525.4399 L
b451.2773 532.7822 m
444.8711 539.3325 L
418.3486 513.0933 L
432.6582 498.937 L
436.0156 502.3564 L
425.2363 513.0933 L
444.8711 532.7925 L
448.1904 529.6362 L
451.2773 532.7822 L
b456.8613 527.6318 m
471.25 513.0933 L
444.8711 486.854 L
437.9395 493.7114 L
441.3066 496.9697 L
444.8711 493.394 L
465.3379 513.0933 L
453.6426 524.439 L
456.8613 527.6318 L
b471.25 398.6318 m
471.25 407.6221 L
444.2588 434.2422 L
417.6074 407.6221 L
417.6074 398.6318 L
422.4941 398.6318 L
422.4941 406.0259 L
444.2588 427.9858 L
466.0234 406.0259 L
466.0234 398.6318 L
471.25 398.6318 L
b395.377 512.272 m
399.167 508.5093 L
413.0986 508.5093 L
440.5742 482.0557 L
440.5742 468.2246 L
453.3223 454.9463 L
453.3223 442.3496 L
471.25 424.188 L
453.3223 406.0259 L
453.3223 398.6318 L
447.9453 398.6318 L
447.9453 407.6221 L
465.1914 424.188 L
447.9453 440.7534 L
447.9453 453.7549 L
435.2012 466.7988 L
435.2012 480.3965 L
411.4268 503.3389 L
397.7305 503.3389 L
392.0332 508.9102 L
395.377 512.272 L
b443.3672 456.1592 m
440.5742 453.7549 L
440.5742 440.7534 L
423.3271 424.188 L
440.5742 407.6221 L
440.5742 398.6318 L
435.2012 398.6318 L
435.2012 406.0259 L
416.8965 424.188 L
435.2012 442.3496 L
435.2012 454.9463 L
440.0449 459.458 L
443.3672 456.1592 L
b329.6318 486.2822 m
338.5107 486.2822 L
365.541 513.0474 L
338.7266 539.5059 L
329.6318 539.5059 L
329.6318 534.7236 L
337.1191 534.7236 L
359.2393 513.0474 L
337.1191 491.4404 L
329.6318 491.4404 L
329.6318 486.2822 L
b354.8271 492.645 m
338.6777 509.439 L
329.6318 509.439 L
329.6318 504.0967 L
337.0703 504.0967 L
354.8496 485.874 L
373.1035 504.3989 L
385.792 504.3989 L
399.167 517.6772 L
413.0986 517.6772 L
428.9004 533.7642 L
444.8711 517.4219 L
461.6807 534.626 L
466.0234 534.626 L
466.0234 530.4019 L
448.6191 513.5986 L
465.0801 497.7441 L
447.9453 482.0557 L
447.9453 468.2246 L
445.5479 465.5063 L
449.0195 462.1865 L
453.3223 466.7988 L
453.3223 480.3965 L
471.25 497.7441 L
455.8203 513.5986 L
471.25 528.9976 L
471.25 540.1147 L
460.3818 540.1479 L
444.8711 524.5718 L
428.9004 540.6055 L
411.4268 522.8481 L
397.7305 522.8481 L
384.5918 509.8037 L
371.4951 509.8037 L
354.8271 492.645 L
b387.6182 513.9321 m
385.1963 516.3364 L
372.0996 516.3364 L
355.4141 533.2007 L
338.7266 516.7612 L
329.6318 516.7612 L
329.6318 522.0811 L
337.1191 522.0811 L
355.4141 540.2114 L
373.707 521.7412 L
386.3965 521.7412 L
390.9404 517.2305 L
387.6182 513.9321 L
bUu1 0.35 1 0.2 (New Color Swatch 9) 0 0 Xk
479.7217 142.1318 m
329.6318 142.1318 L
329.6318 212.2871 L
410.249 212.2871 L
410.249 292.3682 L
479.8682 292.3682 L
479.8682 142.1738 L
F0 0.25 0.75 0 (New Color Swatch 8) 0 0 Xk
0 R
1 G
427.3701 165.4648 m
413.0557 150.75 L
371.7539 150.75 L
345.1338 177.7412 L
371.7539 204.3926 L
413.0557 204.3926 L
439.7402 177.7412 L
432.6514 170.6611 L
429.2988 174.0381 L
433.1006 177.7412 L
411.3965 199.5059 L
373.3496 199.5059 L
351.3896 177.7412 L
373.3496 155.9766 L
411.3965 155.9766 L
424.2354 168.8506 L
427.3701 165.4648 L
b456.4404 193.4053 m
470.584 208.1611 L
470.584 249.7637 L
444.125 276.5781 L
417.667 249.7637 L
417.667 208.1611 L
444.125 181.2832 L
450.4287 187.6934 L
447.0762 191.0703 L
444.125 187.9707 L
422.5186 209.833 L
422.5186 248.1563 L
444.125 270.2764 L
465.7324 248.1563 L
465.7324 209.833 L
452.9512 196.9004 L
456.4404 193.4053 L
b463.7822 170.7227 m
470.332 177.1289 L
444.0938 203.6514 L
429.9365 189.3418 L
433.3564 185.9844 L
444.0938 196.7637 L
463.793 177.1289 L
460.6357 173.8096 L
463.7822 170.7227 L
b458.6318 165.1387 m
444.0938 150.75 L
417.8545 177.1289 L
424.7119 184.0605 L
427.9697 180.6934 L
424.3945 177.1289 L
444.0938 156.6621 L
455.4385 168.3574 L
458.6318 165.1387 L
b329.6318 150.75 m
338.6221 150.75 L
365.2422 177.7412 L
338.6221 204.3926 L
329.6318 204.3926 L
329.6318 199.5059 L
337.0264 199.5059 L
358.9863 177.7412 L
337.0264 155.9766 L
329.6318 155.9766 L
329.6318 150.75 L
b443.2725 226.623 m
439.5098 222.833 L
439.5098 208.9014 L
413.0557 181.4258 L
399.2246 181.4258 L
385.9463 168.6777 L
373.3496 168.6777 L
355.1885 150.75 L
337.0264 168.6777 L
329.6318 168.6777 L
329.6318 174.0547 L
338.6221 174.0547 L
355.1885 156.8086 L
371.7539 174.0547 L
384.7549 174.0547 L
397.7988 186.7988 L
411.3965 186.7988 L
434.3389 210.5732 L
434.3389 224.2695 L
439.9102 229.9668 L
443.2725 226.623 L
b387.1592 178.6328 m
384.7549 181.4258 L
371.7539 181.4258 L
355.1885 198.6729 L
338.6221 181.4258 L
329.6318 181.4258 L
329.6318 186.7988 L
337.0264 186.7988 L
355.1885 205.1035 L
373.3496 186.7988 L
385.9463 186.7988 L
390.458 181.9551 L
387.1592 178.6328 L
b417.2822 292.3682 m
417.2822 283.4893 L
444.0469 256.459 L
470.5059 283.2734 L
470.5059 292.3682 L
465.7236 292.3682 L
465.7236 284.8809 L
444.0469 262.7607 L
422.4404 284.8809 L
422.4404 292.3682 L
417.2822 292.3682 L
b423.6455 267.1729 m
440.4385 283.3223 L
440.4385 292.3682 L
435.0967 292.3682 L
435.0967 284.9297 L
416.874 267.1504 L
435.3994 248.8965 L
435.3994 236.208 L
448.6777 222.833 L
448.6777 208.9014 L
464.7637 193.0996 L
448.4219 177.1289 L
465.626 160.3193 L
465.626 155.9766 L
461.4023 155.9766 L
444.5986 173.3809 L
428.7441 156.9199 L
413.0557 174.0547 L
399.2246 174.0547 L
396.5068 176.4521 L
393.1865 172.9805 L
397.7988 168.6777 L
411.3965 168.6777 L
428.7441 150.75 L
444.5986 166.1797 L
459.9971 150.75 L
471.1143 150.75 L
471.1475 161.6182 L
455.5713 177.1289 L
471.6055 193.0996 L
453.8486 210.5732 L
453.8486 224.2695 L
440.8037 237.4082 L
440.8037 250.5049 L
423.6455 267.1729 L
b444.9326 234.3818 m
447.3369 236.8037 L
447.3369 249.9004 L
464.2012 266.5859 L
447.7617 283.2734 L
447.7617 292.3682 L
453.0811 292.3682 L
453.0811 284.8809 L
471.2119 266.5859 L
452.7412 248.293 L
452.7412 235.6035 L
448.2305 231.0596 L
444.9326 234.3818 L
bUu1 0.35 1 0.2 (New Color Swatch 9) 0 0 Xk
73.1318 142.2783 m
73.1318 292.3682 L
143.2866 292.3682 L
143.2866 211.751 L
223.3682 211.751 L
223.3682 142.1318 L
73.1738 142.1318 L
F0 0.25 0.75 0 (New Color Swatch 8) 0 0 Xk
0 R
1 G
96.4648 194.6299 m
81.75 208.9443 L
81.75 250.2461 L
108.7412 276.8662 L
135.3921 250.2461 L
135.3921 208.9443 L
108.7412 182.2598 L
101.6611 189.3486 L
105.0381 192.7012 L
108.7412 188.8994 L
130.5054 210.6035 L
130.5054 248.6504 L
108.7412 270.6104 L
86.9766 248.6504 L
86.9766 210.6035 L
99.8506 197.7646 L
96.4648 194.6299 L
b124.4053 165.5596 m
139.1611 151.416 L
180.7642 151.416 L
207.5781 177.875 L
180.7642 204.333 L
139.1611 204.333 L
112.2832 177.875 L
118.6929 171.5713 L
122.0698 174.9238 L
118.9702 177.875 L
140.833 199.4814 L
179.1567 199.4814 L
201.2764 177.875 L
179.1567 156.2676 L
140.833 156.2676 L
127.9004 169.0488 L
124.4053 165.5596 L
b101.7231 158.2178 m
108.1289 151.668 L
134.6514 177.9063 L
120.3423 192.0635 L
116.9844 188.6436 L
127.7637 177.9063 L
108.1289 158.207 L
104.8096 161.3643 L
101.7231 158.2178 L
b96.1387 163.3682 m
81.75 177.9063 L
108.1289 204.1455 L
115.0605 197.2881 L
111.6929 194.0303 L
108.1289 197.6055 L
87.6621 177.9063 L
99.3569 166.5615 L
96.1387 163.3682 L
b81.75 292.3682 m
81.75 283.3779 L
108.7412 256.7578 L
135.3921 283.3779 L
135.3921 292.3682 L
130.5054 292.3682 L
130.5054 284.9736 L
108.7412 263.0137 L
86.9766 284.9736 L
86.9766 292.3682 L
81.75 292.3682 L
b157.623 178.7275 m
153.833 182.4902 L
139.9014 182.4902 L
112.4258 208.9443 L
112.4258 222.7754 L
99.6782 236.0537 L
99.6782 248.6504 L
81.75 266.8115 L
99.6782 284.9736 L
99.6782 292.3682 L
105.0552 292.3682 L
105.0552 283.3779 L
87.8086 266.8115 L
105.0552 250.2461 L
105.0552 237.2451 L
117.7993 224.2012 L
117.7993 210.6035 L
141.5732 187.6611 L
155.2695 187.6611 L
160.9668 182.0898 L
157.623 178.7275 L
b109.6323 234.8408 m
112.4258 237.2451 L
112.4258 250.2461 L
129.6729 266.8115 L
112.4258 283.3779 L
112.4258 292.3682 L
117.7993 292.3682 L
117.7993 284.9736 L
136.103 266.8115 L
117.7993 248.6504 L
117.7993 236.0537 L
112.9546 231.542 L
109.6323 234.8408 L
b223.3682 204.7178 m
214.4893 204.7178 L
187.459 177.9531 L
214.2729 151.4941 L
223.3682 151.4941 L
223.3682 156.2764 L
215.8804 156.2764 L
193.7607 177.9531 L
215.8804 199.5596 L
223.3682 199.5596 L
223.3682 204.7178 L
b198.1729 198.3545 m
214.3228 181.5615 L
223.3682 181.5615 L
223.3682 186.9033 L
215.9302 186.9033 L
198.1509 205.126 L
179.897 186.6006 L
167.208 186.6006 L
153.833 173.3223 L
139.9014 173.3223 L
124.0991 157.2363 L
108.1289 173.5781 L
91.3193 156.374 L
86.9766 156.374 L
86.9766 160.5977 L
104.3809 177.4014 L
87.9199 193.2559 L
105.0552 208.9443 L
105.0552 222.7754 L
107.4521 225.4932 L
103.98 228.8135 L
99.6782 224.2012 L
99.6782 210.6035 L
81.75 193.2559 L
97.1792 177.4014 L
81.75 162.0029 L
81.75 150.8857 L
92.6182 150.8525 L
108.1289 166.4287 L
124.0991 150.3945 L
141.5732 168.1514 L
155.2695 168.1514 L
168.4082 181.1963 L
181.5049 181.1963 L
198.1729 198.3545 L
b165.3818 177.0674 m
167.8037 174.6631 L
180.8999 174.6631 L
197.5864 157.7988 L
214.2729 174.2383 L
223.3682 174.2383 L
223.3682 168.9189 L
215.8804 168.9189 L
197.5864 150.7881 L
179.293 169.2588 L
166.6035 169.2588 L
162.0596 173.7695 L
165.3818 177.0674 L
bUU(Adobe PatternOnPath Brush Tool) 1 0 35 XP
%040302010000803F0000000000000001000000005061747465726E204272
%7573682031
/Adobe_Brushed_Path () XT
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
