%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8.0.1
%%For: (S ) ( )
%%Title: (035.ai)
%%CreationDate: (10/26/2005) (4:30 PM)
%%BoundingBox: 104 389 330 616
%%HiResBoundingBox: 104.6523 389.9346 329.502 615.2769
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%DocumentCustomColors: (metal)
%%CMYKCustomColor: 0 0 0 1 (metal)
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 16 16 576 820
%AI3_DocumentPreview: None
%AI5_ArtSize: 595.2756 841.8898
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -261 811.8887 1 1148 792 18 1 1 2 40 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:16 16
%%AI3_PaperRect:-16 824 579 -18
%%AI3_Margin:16 -20 -18 18
%AI7_GridSettings: 14.1732 5 14.1732 5 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 128 128 8
%%BeginData: 12220 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD43FF52F852FD6CFF522752FD0DFF27F8F8F852FD6AFF7DF8F8F8
%27FD0BFF7DFD04F827FD6AFF27FD04F852FFA8A87DA87D52277DA852FD05
%F8FD0DFF7D52A8FD5AFFFD05F87DA827F8F82752F8F8F8277DFD04F827FF
%52F82752FD06FFA8F8F8F87DFD5AFF27FD04F85227F8F8F8A8A8FD04F87D
%FD04F85227F8F8F82752F8F852A8FFFD05F8FD55FFA827F8F8527DFD04F8
%52FD04F8A8FF27FD06F827F827FD04F87DFFF8F8F852A8FD05F87DFD4AFF
%F8F8F87DFFFFFF7D275227FD04F827FD09F8FFFF7DFD05F82727FD05F827
%FFFFFD04F8A8FD05F8A8FD49FF7DFD04F87DFF52F8F827FF27FD06F87DFD
%06F8FFFFA8FD05F8527DFD05F87DFFFFFD04F827FD04F852FFA8A8FD47FF
%7DFD05F8A8F8F8F827FFFFFD06F85227FD04F852FFFFFF52FD04F8A852FD
%05F8A8FFA8FD08F82752F8F8F827FD46FF52FD05F87DFD04F8FFFF7DFD05
%F87D7DFD04F8FD05FFFD04F8FF7DF8F8F827A8FFFFFFFD05F82752FD07F8
%527DA8FD43FFA8FD05F827FD04F8A8FFA827FD04F852FFF8F8F852FD05FF
%7DF8F827A87DF8F8F8A8FD04FF52FD04F87D27FD06F852FFF8F852FFFFFF
%527D52A8FD39FFA87D7DA8FD09F8A8FFFFFF7DF8F8F87D7D7DF8F852FD05
%FFA8F8F87D52FFF8F827FD05FFA8F8F8F827FFFD06F852FFA8F8F8F87DFF
%27F8F8F827FD38FF52FD04F827F827FD06F8FD05FF52F8F852527DF8F87D
%FD05FFA8F8F87DF8A827F87DFD05FFA8F8F8F8A8A8FD05F827FFFF7DF8F8
%F85252FD05F8FD37FF52FD08F8A8FD04F827FD05FFA8F8F87D277D52F827
%FD05FF7DF8277DF87D27F87DFD05FF7DF8F87D7DA8FD04F852FFFFFF27F8
%F8F85252FD05F8FD35FF7DF87D7DFD07F87DA8F8F8F827FD06FF27F87D27
%F8A8F8F852FFFFFFA8F8F8A8F852F87DF852FD05FF52F8277D527DF8F8F8
%7DFD04FFFD04F827FD05F827FD2FFFA8A8A8FFFF7DF8F852FFA827FD05F8
%52FF7DF8F8F8FD06FF52F8FFF85227FFF8F852A87D27F8527D52F827A827
%F8FD04FFA8F8F8A852277DF8F8A8FD05FFFD09F827A8FD2EFFFD04F852FF
%27F8F8F8A8FFA8FD06F8A87D52F8F87DFD05FFF8F8A827F827277DFD05F8
%277DF827F8275252F8F8525252F8F87D52F85252F827FD06FF27FD04F827
%F8F8FD0452A8FD2BFFA8FD05F87D27F8F8F87DFFFFA87D27F8F8F8A827A8
%52F827A8FFFFFF52F8277D27F827277DA827F8F852FF275227277DF8FF27
%FD04F8277D522752277DF87DFD06FFFD04F852A8FD07F87DFD2AFFA8FD05
%F82727FD04F8FD05FF27F8F87D52F8A852F8F82752F8F8F8A8275227527D
%7DA8FD0AFFA8A8FF5227F852A852F827272752F852FD05FF7DF8F8F827FF
%27FD08F8A8FD2AFF27FD05F827FD04F8FD06FF27F8277D27F87D7DF8F8F8
%27F87DFF7DFD17FF7D2752F87D27A8F852FD05FF27F8F852FFA8FD07F852
%A8277DFD29FF7DFD0AF8FD06FFA8F8277D27F8F852FF5227277DFD1CFF7D
%A852F8A8F8F87DFFFFA852F8F852A87D52FD06F87DFFA8F8F852FD29FFA8
%52F8F85227FD04F87DFD06FFF827A827F82752F8FD23FF7DA852F8F82727
%F8F8277D7DF8FFFD05F852A8FFFF52F8F8F8FFFFFF7DFD22FFA827F8F827
%F8F827A827F8F8F827FD06FFF8277D27F8527DFD27FFFD05F87D7D27F852
%52F8F8277DFD04FF7DFD04F8A87DF8F8F827A8FD1FFF27FD07F87DFF7DF8
%F8F87DFD04FF52F827A8277DFD2AFFA8A8A8FF52F827527D52F852FD06FF
%FD05F8A8FD05F8A8FD1EFF7DFD09F8A87DA8F8F8F8277DA8F8F8F87D7DFD
%2EFFA8F85227F8F8A8F8F8A8FD05FFA8FD04F827FD06F87DFD1DFF7D52FF
%5227FD06F827A827FF5227FD05F827FD32FF272727F8A8F827FD06FFA8FD
%0BF8FD1DFF7DF8F8A8FFA852FD06F87D27F852A87D272727527DFD33FF7D
%7D27A8F852FD06FF27FD0AF87DFD1DFF27F8F827FD05FFA852F8F8527DFD
%04277DA8FD37FFA852A8F8F8FD05FF7DFD04F8277D27F82752FD1AFFA87D
%52A8FFFD04F827FD06FF7DF8F8A8F827F85252A8FD3AFFF8F8F8A8FFFF52
%FD04F87DFF52F8F8F8272752A8FD16FF52FD04F87D27FD04F87DFD06FF52
%F85252272727FD3CFF52FD07F8277DFFA852FD07F827FD16FF27FD05F87D
%FD04F827FD07FFF8277D2727FD3EFF52F8F8F82727A8A852277DFD09F87D
%FD15FF27FD0BF8A8FD06FFF8F8FF27FD43FF7D7D27F827FFFD08F8275252
%FD15FF7DFD0BF827A8FD04FF7DF8F8FFA8FD41FF52F8272752F8A8FD07F8
%527DFFFF2727FD15FF7DFD04F85252FD05F827A8FFFFA8F8F827FD44FF7D
%F8F8275252F8F852A8FD06FF52F8F87DFD16FF7D27F8F852FF7D52FD09F8
%7DFD44FFA87D27F87DF8F87DFD06FFA852F8F8F852FD14FF7DFD06F852FF
%7DFF7D5227F8F82727A8FD46FFA87D27A8F852FD07FF27FD04F852FD13FF
%7DFD08F827A8F82752A87DA8A8FD49FF7D7D27F87DFD06FFA8FD05F8A827
%F8F852A8FD0EFFFD0AF852A8F852F8522727A8FD4AFF27F87DFD06FF27FD
%04F85227FD05F8A8FD0DFFF827FD09F8277DF8F8F827A8FD4BFF27F8F8FD
%05FF27FD0CF8FD0DFF52A8FFFFA8527D7DA87D52F8F87D5227F87DFD4CFF
%A8F8F8277DA87D27FD0CF852FD0CFFA8F8F87DFD08FF7DF8F87DF852FD4E
%FF7DFD09F827527D27FD05F8A8FD0CFF52F8F8F852FD08FF7DF852527DFD
%50FF7D7D527D527DA8FFFFA8F8F8F827527DA8FD0DFF52FD05F8FD07FFA8
%F8F8FFA8FD4FFF5227527D525227527D52FD05F8527DFD0CFFA8FFA8FD05
%F852FD06FFA8F8F8FD52FF7D522752F852A827FD08F852FD09FF7DF8F8F8
%527DFD05F87DFD05FFF827F8FD52FF52F8F8F852A8FD0BF8FD08FF52FD05
%F827FD06F827A8FFA827F8F852FD52FFA8272752A827FD0BF8A8FD07FF52
%FD12F852FD54FF52277DF8F852A8FFFFA8527D527D7D527DFD07FFA8FD06
%F8527D27522752275227527DFFA8FD54FF52A827F87DFD0AFF5252FD08FF
%7DFD06F852A8FFA87DA87DA85252F87DFD55FF7DF827FD09FF7D27F8F8A8
%FD08FFA87DA852FD04F852A87DF8F82752277DFD56FF52F827FD07FFA827
%FD04F8A8FD09FF52FD08F852FF2727F8F852FD56FF7DF827A8FD05FFA8FD
%06F8A8FD08FFA8FD0AF827A85227527DFD2AFFA87DFD2AFFA8F8F852FD04
%FFA827FD05F852FD09FF52FD07F82727F8F8F87D52F8A8FD29FF7DF8F852
%FD2AFF7DF8F8F85252FD07F8525227F8277DFD05FF52FD05F852A8FFFFFF
%52F8F87D52FD29FFA827F8F8F87DFD2AFFA852FD10F87DFD04FF527DA8FD
%09FF7DF8F8FD2AFFA8FD04F827FD29FF522752A87D7D272727FD0AF827FD
%04FF277DFD0BFF27F87DFD24FFA827F8F8A8A8FD04F852A827F8277DFD25
%FF5252F827527DA8FFFFFFA87DFD06F87DFFFFFFA8F8F8F8527DFD08FF27
%F852FD25FF27F8F8F8A8FD04F85227F8F8F8A8FD24FFA827F82727F852A8
%A852FD08F852FD04FFA8FD05F827FD06FFA8F8F87DFD25FF7DF8F8F82727
%F8F8F852F8F8F852FD26FFF852F8277D7DFD07F8FD047DFD06FFFD07F8A8
%FFFFFFA8F8F8F8FD26FFA8FD06F827FD05F852FD26FF52F8A87DFD0AF827
%A8FD07FF7DFD07F8272727F8F827FD28FFFD05F8277DFD05F87DFD26FF27
%FF27F8F8272727FD07F852FD04FFA82727527DFD09F8277DA8F8A8FD26FF
%27FD04F8527DFD05F8A8FD27FFF8F827A8FFFFFF7DFD06F827FFFFFFA8FD
%0BF85252A87D52F87DFD27FFA8FD04F852FFFD04F87DFD27FF7DF8F8FD07
%FF7D5227F8F852FFFFFFFD07F827527D7DA87D52F8F82727F8FD28FF52F8
%F8F8A8FFF8F8F827FD28FF27F852FD0AFFA85227FFFFFF27FD06F8277D7D
%A8A8A85227F8522727FD29FFF8F8F8FFA827F8F8A8FD28FF27F827FD0BFF
%5252FFFFFFA8FD0BF8277DA87D27F852FD29FFF8F8277D527DF8F87DFD28
%FF7DF8F8A8FD05FFA87D2727F8F827FD04FFA85227527D27FD09F87D7D27
%A8FD28FFF8F87D5227A8F8F8A8FD29FF27F8277DFFFFFF7D27FD05F827FD
%07FF7DFD08F827F8F8F8277DFD28FF7DF827A8F8F87D27F827FD28FF277D
%27F8F8F827FD08F827FD06FFA8FD06F827A8FFFFFFA827F827FD27FFA8F8
%F87D522752F8FFF8F852FD27FF52277D7DFD0AF827FD07FFA8FD05F827A8
%FD05FFA8F8F87DFD24FF7D27F8F827A8F852F827527DF8F8F852FD25FFF8
%27F827A87D27FD06F8527D527DFD05FFA8F8F82752A8FD08FF272727FD24
%FF7DF8F827FF2752F82752F8A87DF8F827FD25FF27F8F827F852A8A85227
%FD07F852FD05FFF87DFD0BFF27F87DFD24FF7D7D7DFF7D7DA8FD057DFFFF
%527DFD24FFA85227F8F85252A8A8FFFFA852FD06F87DFD04FF7D7DFD0AFF
%7DF827FD59FF7D277DA8A852522727FD0AF827FD04FF27FD05F852A8FFFF
%A87DF8F87D7DA8FD57FFA8A827FD10F87DFD04FF52FD07F82727F8F8F87D
%7DF8FD58FF7DF8F8F8525227FD06F8527DF8F8F8A8FD05FF7DFD0AF8277D
%52F85252FD57FFF8F827FD04FFA8FD06F827FD0AFF5227FD07F87DA82727
%27F852FD56FF5227F8FD07FFFD06F8A8FD08FFA87D7D52FD04F852A852F8
%F827275227FD56FF7DF827FD07FFA8FD05F8A8FD07FF52FD06F852A8FFA8
%A87DA87D7D27277DFD55FF7DF8F8FD09FF7D52F8F8A8FD06FFA8FD06F852
%5252FD07277DA8FD55FF52A8F8F852FD0AFF5227FD07FF52FD12F852FD54
%FF7D27FFF8F827FFFFFFA87D527D7DA852A8FD07FF52FD0CF8277DFF7D52
%F8F852FD52FFA8F82727A8FD0CF87DFD08FF52F8F8F8527DFD05F87DFD05
%FF27F8F8FD52FF5227F82752A8FD0BF8FD0AFFFD04A8FD05F852FD06FF7D
%F8F8FD51FFA87D275227F827FF27FD08F852FD0DFF52FD04F827FD07FFA8
%F827FD51FF52277D527D525227A852FD04F827277DFD0EFF52F8F8F852A8
%FD07FF52F8277D52FD4FFFA87D527D527D7DA8A8FF7D27F8F8F85252A8FD
%0DFF7DF8F8A8FD08FF7DF8F8FFF87DA8FD4DFF52FD09F827527D52FD05F8
%A8FD0DFF27A8FFFF7D7D527D7D7D27F8F87D2727F87DFD4CFF52F8F8277D
%A85227FD0CF827FD0EFFF852FD09F8527D27F8F827FD4CFF52F827FD05FF
%52FD0CF8FD0EFF27FD09F852A8F8FD0527FD4BFF27F87DFD06FF27FD04F8
%2727FD05F8A8FD0DFF52FD08F852A827277D7DA8A8FD4AFF7D7D52F8A8FD
%06FFA8FD05F8A852F8F827A8FD0FFF52FD06F852FFA8A87D2727F8F8F852
%7DFD46FFA852527DF827FD07FF27FD04F852FD15FFA8A827F8F87DFFA827
%FD04F827FD04F87DFD45FF5252F8FFF8F87DFD07FF52F8F8F852FD14FF52
%FD04F85252FD06F8A8FFFF7D27F827FD44FF52F8F827277DF8F827FD07FF
%27F8F8A8FD13FF7DFD0BF827FD05FF7DF8F8FFA8FD41FF5227275227277D
%27FD06F827A8FFFF2752FD14FF27FD0BF8FD07FFF8F8A827FD42FFA87D52
%27F827A8FD08F8272752FD15FF27FD04F8277DFD04F852FD07FFF827A827
%52FD3EFF5227F8F8F8527DA852527DFD09F87DFD15FF7DFD04F87D27FD04
%F852FD06FF7DF8525252F852A8FD3BFF52FD08F87D7DFF52FD07F827FD18
%FF7D7DA8FFFD04F827FD06FF7DF8F8A8272727527DA8FD39FFA8F8F827A8
%FFFF7DF8F8F8277DFF52F8F827272752FD1DFF27F8F8F8FD05FF7D52F8F8
%277DF852F82752A8FD38FF27A8F8F8A8FD04FF7DFD05F87D27F8F852A8FD
%1EFF7DF8F8FFFFFF52FD06F8A827F852A87D52275252FD34FFA85227A8F8
%52FD06FF52FD05F827FD04F87DFD1EFF7D52A87DFD07F8277D27A87DFD07
%F8FD32FF52F827F8A8F852FD06FF7DFD0BF8A8FD1EFF7DFD08F827A87DA8
%27F8F827A87D52F8F87DA8A8FD2DFFA8272727F827A8F8F8FD07FFFD04F8
%2727FD05F8A8FD1FFFFD08F852FF52F8F8F852FD04FF7DF8277D277DFD2A
%FFA87DA8A852F827F87D27F827FD06FFFD05F87DFD05F87DFD1FFFA8F8F8
%F827F8F827FF27F8F8F827FD06FFF827A827F852A8FD27FF52F8F8F82752
%FF27F8277DF8F827A8FD04FF7DFD04F8FF52F8F8F827FD24FF27F8F87DFD
%05F87DFD06FFF8277D27F8272727A8FD22FFA8A852F827F827F8F8F8A852
%F87DFD04F82727A8FFFF27F8F8F8FFFFA8A8A8FD23FF7DFD0AF8FD06FFA8
%F827A8F852F852A87D27527DFD1CFFA87D7DF8FFF8F852FFFFFF27F8F87D
%A87D52FD06F87DFFFFF8F852FD28FFFD0BF8FD06FF52F8525227F87D52FD
%05F852FF52FD17FF5252F8F827277DF827FD05FFF8F8F852A8A8FD07F852
%A82752FD28FFA8FD05F82752F8F8F827FD05FF52F8F85252F8FF52F8F852
%5227F8F8A827525227A87DFD0BFFA8FFFF52F82752FF5227277D277DF87D
%FD05FFA8F8F8F852FF52FD07F827A8FD2AFFFD05F8A8FD04F852FFFFFF7D
%27F8F8F8A827A827F8F8A8FFFFFF52F8525252F827F87D7D27F8F827FF27
%52F85227F87D27F827F8F8F87DFD042752F852FD06FFFD04F8527DFD07F8
%7DFD2BFF27F8F8F87DFF27F8F8F8FFFFA8FD06F8A8A852F8F87DFD05FF27
%F8A8F8F8F8527DFD05F827FFF852F852527DF827527D52F8F87D5227527D
%F852FD06FF27FD04F852F8F8277D52527DFD2CFFA8A87DA8FFFF52F8F852
%FFFFFD06F827FF52F8F8F8FD06FF27F8A8F82727A8F8F852527DF8F8277D
%27F8F8FFF8F8A8FFFFFF7DF8F8A8272752F8F8A8FD05FFFD0AF8A8FD35FF
%7D2752A8FD07F87DA8F8F8F827FD06FF52F8A827F8A827F87DFD04FFF8F8
%A82727277DF852FD05FF52F8F8FF27A8F8F8F8A8FD04FFFD04F827FD05F8
%27FD37FF7DFD08F8A8FD04F827FD06FFF8F85227527DF827FD05FF7DF852
%7DF85252F87DFD05FFA8F8F8527D7DFD04F852A8FFFF27F8F8F852FD06F8
%FD38FF7DF8F8F82727F82727FD05F8FD05FF27F8F87D52FFF8F852FD05FF
%A8F8F8FFF8A8F8F87DFD05FF7DF8F8F87DFFFD05F827A8FF7DF8F8F8277D
%FD05F8FD3AFF527D7DFD09F87DFFFFFF52F8F8F8527D52F8F852FD05FFA8
%F8F85252A8F8F852FD05FFA8F8F8F827FFFD06F852FFFFF8F8F87DA827F8
%F8F852FD3BFFA8FD05F827FD04F8FFFFFF27FD04F87DFF27F8F852FD05FF
%7DF8F8527DA8F8F8F8A8FD04FF52FD04F8A827FD06F87DFFF8F87DFFFFFF
%7D527DA8FD3BFF7DFD05F8A8FD04F8FFFF52FD05F8527DFD04F8A8FD04FF
%27F8F8F8FF7DFD04F8A8FFFFFFFD06F852FD07F85252A8FD43FF52FD04F8
%27A8F8F8F827FFFF27FD05F87D27FD04F852FFFFFF52FD04F87D7DFD05F8
%FFFFFFFD09F87DF8F8F827A8FD45FF7DFD04F852FF27F8F827FF52FD06F8
%52FD06F8FFFFA8FD05F85252FD05F852FFFFFD04F852FD04F827FF7DFD49
%FF27F82752FFFFFF7D522752FD04F82727FD08F8FFFF52FD05F82752FD05
%F827FFFFFD04F8A8FD05F8A8FD54FF7D27F8F8277DFD04F852FD04F8A8FF
%52FD0DF8A8A8F8F8F827A8FD05F8A8FD59FF27FD04F87D27F8F8F87DFFFD
%04F87DFD04F87DFD05F87DF8F827FFA827FD04F8A8FD59FFFD05F852A8F8
%F8F82727F8F8F8277DFD05F8FF27F8F87DA8FD05FF7DF8F8F852FD5AFFFD
%05F87DFFFFFD04A852527DFF52FD05F8FD0DFF7D52FD5BFF7DF8F8F827A8
%FD0AFF7DFD05F8FD6BFF52F87DFD0DFF27F8F8F87DFD7BFFA852F852FD39
%FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(New Pattern 2)
0 A
u800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
-7893 8611.8887 m
-7880.2754 8611.8887 L
-7880.2754 8595.873 L
-7893 8595.873 L
-7893 8611.8887 L
n0 O
0 0 0 1 (metal) 0 x
-7881.9858 8603.793 m
-7881.0454 8602.8145 -7881.7295 8600.6777 -7880.3638 8599.2539 c
-7884.4609 8597.6523 -7884.1904 8601.9238 -7884.9014 8601.2109 c
-7885.6143 8600.5 -7882.9438 8598.0098 -7886.6377 8595.873 C
-7890.3311 8598.0098 -7887.6606 8600.5 -7888.374 8601.2109 c
-7889.085 8601.9238 -7888.8145 8597.6523 -7892.9111 8599.2539 c
-7891.5454 8600.6777 -7892.2295 8602.8145 -7891.29 8603.793 c
-7888.9858 8606.1934 -7889.7969 8610.1094 -7893 8610.1094 C
-7893 8611.8887 L
-7887.3057 8611.7109 -7887.2246 8601.2109 -7886.6377 8601.2109 c
-7886.0513 8601.2109 -7885.9697 8611.7109 -7880.2754 8611.8887 C
-7880.2754 8610.1094 L
-7883.4785 8610.1094 -7884.29 8606.1934 -7881.9858 8603.793 c
f-7887.9126 8611.8887 m
-7887.1538 8611.8887 L
-7886.981 8611.6094 -7886.7935 8611.2676 -7886.6377 8610.916 C
-7886.4814 8611.2676 -7886.2954 8611.6094 -7886.1226 8611.8887 C
-7885.3623 8611.8887 L
-7885.6729 8611.5332 -7886.6377 8609.7598 -7886.6377 8609.041 c
-7886.6377 8609.7598 -7887.6025 8611.5332 -7887.9126 8611.8887 C
f-7883.479 8611.8691 m
-7884.2119 8611.5742 -7886.6377 8607.5723 -7886.6377 8605.5566 c
-7886.6377 8607.5723 -7889.063 8611.5742 -7889.7959 8611.8691 C
-7889.8457 8611.8887 L
-7888.8408 8611.8887 L
-7888.0674 8611.084 -7887.1162 8609.5938 -7886.6377 8608.1465 C
-7886.1592 8609.5938 -7885.208 8611.084 -7884.4346 8611.8887 C
-7883.4297 8611.8887 L
-7883.479 8611.8691 L
fU%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
0 0 0 1 (metal) 0 x
(metal) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Pattern Brush 1)
(1 / New Pattern 2/ / / / / 5 0.843137 0.882353 0.870588 /  1 0 1 0 1 0) -
( 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe PatternOnPath Brush Tool/ Pattern Brush 1/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
uu800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
204.3647 489.4238 m
230.854 489.4238 L
230.854 522.7642 L
204.3647 522.7642 L
204.3647 489.4238 L
n0 O
0 0 0 1 (metal) 0 x
227.2944 506.2769 m
229.25 508.314 227.8271 512.7622 230.6689 515.7261 c
222.1406 519.0601 222.7041 510.168 221.2241 511.6519 c
219.7397 513.1318 225.2979 518.3159 217.6094 522.7642 C
209.9209 518.3159 215.479 513.1318 213.9946 511.6519 c
212.5146 510.168 213.0781 519.0601 204.5498 515.7261 c
207.3916 512.7622 205.9688 508.314 207.9243 506.2769 c
212.7222 501.2798 211.0327 493.1279 204.3647 493.1279 C
204.3647 489.4238 L
216.2188 489.7939 216.3877 511.6519 217.6094 511.6519 c
218.8311 511.6519 219 489.7939 230.854 489.4238 C
230.854 493.1279 L
224.186 493.1279 222.4966 501.2798 227.2944 506.2769 c
f214.9541 489.4238 m
216.5361 489.4238 L
216.896 490.0054 217.2842 490.7168 217.6094 491.4487 C
217.9346 490.7168 218.3228 490.0054 218.6826 489.4238 C
220.2642 489.4238 L
219.6177 490.1641 217.6094 493.8555 217.6094 495.3521 c
217.6094 493.8555 215.6006 490.1641 214.9541 489.4238 C
f224.1841 489.4644 m
222.6592 490.0786 217.6094 498.4097 217.6094 502.6055 c
217.6094 498.4097 212.5596 490.0786 211.0347 489.4644 C
210.9312 489.4238 L
213.0229 489.4238 L
214.6333 491.0991 216.6133 494.2012 217.6094 497.2139 C
218.6055 494.2012 220.5854 491.0991 222.1958 489.4238 C
224.2876 489.4238 L
224.1841 489.4644 L
fUUu%_1 Ap
%_0 R
%_0 0 0 1 K
%_2.0817 w 1 M%_313.8965 502.6055 m
%_313.8965 449.4277 270.7871 406.3184 217.6094 406.3184 c
%_164.4316 406.3184 121.3223 449.4277 121.3223 502.6055 c
%_121.3223 555.7832 164.4316 598.8926 217.6094 598.8926 c
%_270.7871 598.8926 313.8965 555.7832 313.8965 502.6055 c
%_s%_U%_0 Ap
0 A
u1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
313.8965 502.6055 m
313.8965 449.4277 270.7871 406.3184 217.6094 406.3184 c
164.4316 406.3184 121.3223 449.4277 121.3223 502.6055 c
121.3223 555.7832 164.4316 598.8926 217.6094 598.8926 c
270.7871 598.8926 313.8965 555.7832 313.8965 502.6055 c
nu0 Ap
0 O
0 0 0 1 (metal) 0 x
311.3906 480.0059 m
312.9063 477.5942 317.6289 477.9658 319.6523 474.228 C
325.2529 482.5986 316.1084 483.8022 317.9063 484.9941 C
319.6279 486.4502 323.7354 479.1968 329.502 487.2451 C
326.1328 496.5347 320.21 490.6499 318.9531 492.5127 C
317.4746 494.145 326.6719 492.8589 323.5234 502.4038 C
320.4863 499.3555 316.0752 500.9795 313.9902 499.0649 C
308.7412 494.5649 300.8145 497.0596 300.9307 502.6055 C
297.2266 502.6055 L
297.3604 493.2827 318.5566 490.0313 318.4912 488.7446 C
318.1943 487.5029 296.9785 489.9888 294.2676 481.1172 C
297.8345 480.1196 L
299.2422 485.4565 307.5508 485.751 311.3906 480.0059 C
f296.7437 493.9067 m
296.5771 492.6201 L
297.1172 492.2554 297.7817 491.8413 298.4731 491.4717 C
297.7139 491.2983 296.9697 491.0791 296.3584 490.8711 C
296.1489 489.5894 L
297.0005 489.96 300.8555 491.1211 302.3408 490.9448 C
300.8604 491.1719 297.4126 493.3276 296.7437 493.9067 C
f295.6201 486.4155 m
296.4331 487.3779 305.4131 490.3662 309.5273 489.9658 C
305.4199 490.6841 297.6494 495.9575 297.0537 497.1152 C
297.0195 497.2031 L
296.8896 495.4878 L
298.5068 494.0283 301.2871 492.0093 304.1855 490.6934 C
301.1191 490.189 297.7534 489.0103 295.8691 488.0298 C
295.561 486.3418 L
295.6201 486.4155 L
fUu301.8164 455.5449 m
302.6006 452.8237 307.2139 451.918 308.2207 447.731 C
315.8643 454.2725 307.3643 457.9307 309.4619 458.5664 C
311.498 459.5093 313.5127 451.3936 321.2178 457.5947 C
320.4551 467.4761 313.1865 463.3989 312.4678 465.54 C
311.5723 467.4829 319.9893 463.7783 319.543 473.8398 C
315.8359 471.7046 312.0508 474.4536 309.4932 473.1831 C
303.1797 470.2808 296.2925 474.8203 297.8345 480.1196 C
294.2676 481.1172 L
291.9443 472.1431 311.4414 463.2368 311.0273 462.0269 C
310.4023 460.9043 290.6011 469.1045 285.6543 461.2471 C
288.8169 459.3193 L
291.6079 464.0918 299.6553 462.127 301.8164 455.5449 C
f291.4771 472.9023 m
291.0059 471.6958 L
291.4272 471.1978 291.9404 470.626 292.5005 470.085 C
291.7158 470.1274 290.9321 470.1226 290.2803 470.0918 C
289.7466 468.9082 L
290.6221 469.0547 294.6968 469.1016 296.0801 468.5278 C
294.7402 469.1392 291.999 472.1499 291.4771 472.9023 C
f288.3545 466.0083 m
289.4683 466.6807 298.8291 467.1597 302.7314 465.6348 C
298.9956 467.4316 292.8906 474.6367 292.6631 475.8901 C
292.6514 475.9844 L
292.0591 474.3755 L
293.1265 472.5747 295.4375 469.8032 297.7876 467.7852 C
294.6309 468.1641 291.1699 467.8984 289.064 467.479 C
288.2798 465.9521 L
288.3545 466.0083 L
fUu285.9951 434.5708 m
286.0151 431.7432 290.2178 429.627 290.0361 425.3516 C
299.1523 429.5894 292.0068 435.3491 294.1426 435.4473 C
296.3735 435.7886 296.0962 427.4697 305.2188 431.3193 C
307.1709 441.0107 299.0576 439.0718 298.9478 441.3213 C
298.5752 443.4595 305.6904 437.606 308.0059 447.3896 C
303.8301 446.3604 300.9072 450.0474 298.1343 449.4956 C
291.2769 448.4087 285.8652 454.6421 288.8169 459.3193 C
285.6543 461.2471 L
280.9312 453.2422 297.3062 439.4102 296.6025 438.3369 C
295.7085 437.4209 278.8438 450.6631 271.9341 444.4321 C
274.4629 441.7256 L
278.4756 445.5386 285.644 441.5342 285.9951 434.5708 C
f280.7148 454.0908 m
279.9121 453.0703 L
280.1846 452.4756 280.5391 451.7739 280.938 451.0962 C
280.2031 451.3408 279.457 451.5386 278.8105 451.6924 C
277.9565 450.7109 L
278.8525 450.6064 282.8091 449.5391 283.9644 448.6309 C
282.8198 449.5962 280.9878 453.2441 280.7148 454.0908 C
f275.8389 448.2808 m
277.083 448.6396 286.2583 446.5625 289.5884 444.0503 C
286.4312 446.8232 282.5747 455.3574 282.6577 456.6606 C
282.6738 456.7534 L
281.6797 455.3511 L
282.2534 453.3003 283.626 450.084 285.4082 447.4551 C
282.5181 448.6313 279.0093 449.3936 276.9185 449.5098 C
275.751 448.2476 L
275.8389 448.2808 L
fUu265.1001 418.6455 m
264.3662 415.9033 267.8716 412.6875 266.5205 408.6621 C
276.4565 410.2803 271.0894 417.7959 273.1953 417.2832 C
275.4316 417.0205 272.938 409.0654 282.748 410.3457 C
287.2285 419.1592 278.895 419.4658 279.395 421.6602 C
279.6025 423.8301 284.9097 416.2529 289.7441 425.0737 C
285.4922 425.1558 283.627 429.5347 280.8057 429.7515 C
273.9692 430.4712 270.3511 438.0229 274.4629 441.7256 C
271.9341 444.4321 L
265.2754 437.9292 277.3096 420.2485 276.3325 419.4189 C
275.2227 418.7852 262.5649 436 254.2217 431.9141 C
255.9287 428.6265 L
260.7915 431.249 266.687 425.3579 265.1001 418.6455 C
f265.2769 438.8301 m
264.2183 438.0791 L
264.3184 437.437 264.4678 436.6709 264.668 435.9146 C
264.022 436.353 263.3525 436.7495 262.7817 437.0562 C
261.71 436.3203 L
262.5601 435.9556 266.0293 433.9453 266.9214 432.7275 C
266.0771 433.9658 265.3105 437.9438 265.2769 438.8301 C
f259.0215 434.5469 m
260.2886 434.6006 268.5918 430.0913 271.1094 426.8052 C
268.8467 430.2783 267.3784 439.5894 267.835 440.791 C
267.8765 440.875 L
266.5229 439.8145 L
266.5454 437.6563 267.0039 434.1929 267.9966 431.207 C
265.5278 433.1157 262.3921 434.7368 260.373 435.4668 C
258.9292 434.5356 L
259.0215 434.5469 L
fUu240.6924 408.9355 m
239.2378 406.5098 241.7266 402.5166 239.3496 398.9307 C
249.3535 397.8086 246.2256 406.5059 248.1201 405.416 C
250.2012 404.5684 245.6436 397.5586 255.4395 396.1631 C
262.1377 403.4688 254.1948 405.9932 255.2681 407.9814 C
256.0757 409.9609 259.1182 401.2861 266.1616 408.4785 C
262.0708 409.7305 261.4917 414.3779 258.8208 415.3721 C
252.3872 418.0068 251 426.1323 255.9287 428.6265 C
254.2217 431.9141 L
246.0693 427.4868 252.8877 407.1543 251.7178 406.6328 C
250.4712 406.3262 242.9355 426.3887 233.8286 424.6431 C
234.5786 421.0156 L
239.9683 422.2202 244.0225 415.0244 240.6924 408.9355 C
f246.3101 428.3428 m
245.1069 427.8638 L
245.0332 427.2104 244.9644 426.4497 244.9521 425.6699 C
244.4473 426.2725 243.9087 426.8418 243.4404 427.2979 C
242.2119 426.8809 L
242.9165 426.3408 245.7334 423.394 246.2593 421.9922 C
245.7905 423.3872 246.1157 427.4502 246.3101 428.3428 C
f239.1455 425.9189 m
240.3965 425.5591 247.1353 419.0527 248.6885 415.1572 C
247.4497 419.1133 248.5425 428.4932 249.3032 429.5176 C
249.3643 429.5898 L
247.7847 428.9229 L
247.1968 426.9165 246.752 423.3301 246.8828 420.2373 C
245.0044 422.8008 242.4443 425.1558 240.7036 426.4014 C
239.0537 425.9351 L
239.1455 425.9189 L
fUu214.5645 406.2119 m
212.5122 404.2607 213.8335 399.6689 210.5913 396.9414 C
219.9058 393.166 219.2339 402.3613 220.7646 400.8379 C
222.5347 399.4453 216.2725 393.9619 225.3013 389.9346 C
233.7168 395.1016 226.7661 399.7207 228.3359 401.3262 C
229.6406 403.1035 230.2227 393.8311 238.9565 398.8408 C
235.3511 401.2012 236.0532 405.8486 233.7563 407.5068 C
228.2886 411.7402 229.1465 420.0054 234.5786 421.0156 C
233.8286 424.6431 L
224.7656 422.626 225.8174 401.2178 224.5532 401.0215 C
223.2754 401.0537 221.4512 422.3604 212.1611 423.1987 C
211.9121 419.5029 L
217.4453 419.2227 219.4111 411.1172 214.5645 406.2119 C
f225.2339 423.3618 m
223.9385 423.2666 L
223.689 422.6646 223.4175 421.9302 223.1938 421.1787 C
222.8711 421.8877 222.5059 422.5723 222.1782 423.1294 C
220.877 423.0747 L
221.416 422.314 223.3306 418.7764 223.4565 417.2842 C
223.3809 418.7793 224.8003 422.5903 225.2339 423.3618 C
f217.6479 422.9492 m
218.7642 422.3569 223.5117 414.1553 223.9448 410.0469 C
223.8213 414.2148 227.4268 422.8877 228.4365 423.7031 C
228.5156 423.7539 L
226.8115 423.5366 L
225.7104 421.6602 224.2866 418.5293 223.582 415.4258 C
222.4707 418.3291 220.6338 421.3843 219.2861 423.0361 C
217.5635 422.9897 L
217.6479 422.9492 L
fUu188.6567 410.5625 m
186.1592 409.2578 186.2129 404.542 182.3267 402.7295 C
190.3032 396.6025 192.1167 405.5732 193.189 403.7285 C
194.5229 401.9033 187.0015 398.3164 194.6401 391.9932 C
204.1572 394.7822 198.6768 401.0479 200.626 402.1963 C
202.3418 403.4648 200.4478 394.498 210.1899 396.9717 C
207.3472 400.166 209.2666 404.4629 207.4971 406.665 C
203.3711 412.293 206.3916 419.9121 211.9121 419.5029 C
212.1611 423.1987 L
202.8726 423.646 198.1733 402.7627 196.8896 402.875 C
195.6719 403.2842 199.626 424.3237 190.9448 427.5776 C
189.7046 424.0879 L
194.9185 422.27 194.6802 414.0967 188.6567 410.5625 C
f203.5327 424.2568 m
202.2568 424.4824 L
201.8555 423.9668 201.3936 423.311 200.9805 422.6602 C
200.8618 423.4395 200.6973 424.209 200.5342 424.8442 C
199.27 425.1367 L
199.5913 424.3047 200.4678 420.3091 200.1899 418.8379 C
200.5142 420.2798 202.9087 423.6221 203.5327 424.2568 C
f196.147 425.8979 m
197.0234 424.9214 199.4233 415.9043 198.7212 411.7344 C
199.728 415.8311 205.5098 423.1719 206.7041 423.7129 C
206.7944 423.7422 L
205.0928 423.9746 L
203.5474 422.5605 201.3179 419.7881 199.813 417.0146 C
199.5342 420.1719 198.583 423.5796 197.7256 425.4883 C
196.0771 425.96 L
196.147 425.8979 L
fUu164.9165 421.813 m
162.1333 421.1943 160.8994 416.6309 156.6978 415.9756 C
162.689 407.8906 166.9043 416.0957 167.4189 413.998 C
168.2104 411.8877 159.9961 410.4609 165.6343 402.3242 C
175.5269 402.377 171.9717 409.9297 174.1509 410.4893 C
176.1802 411.3125 171.876 403.1045 181.9448 402.8594 C
180.0693 406.7002 183.0947 410.3486 181.9907 412.9551 C
179.4976 419.374 184.54 426.0361 189.7046 424.0879 C
190.9448 427.5776 L
182.145 430.5107 171.9395 411.7002 170.7544 412.1865 C
169.6821 412.8877 179.1792 432.0176 171.7197 437.5679 C
169.5815 434.5435 L
174.1416 431.4165 171.6182 423.4956 164.9165 421.813 C
f182.9336 430.918 m
181.7817 431.5122 L
181.2568 431.1279 180.6445 430.6421 180.064 430.1172 C
180.1572 430.8911 180.2021 431.667 180.2129 432.3135 C
179.0728 432.9351 L
179.1348 432.0059 178.9365 428.0005 178.2656 426.6528 C
178.978 427.9697 182.1646 430.4849 182.9336 430.918 C
f176.2622 434.5049 m
176.894 433.4102 176.688 423.958 174.9229 420.2153 C
176.9766 423.8247 184.5659 429.3901 185.8442 429.5498 C
185.938 429.5518 L
184.375 430.2603 L
182.4673 429.2402 179.6118 427.2661 177.4072 425 C
177.9692 428.0635 177.9834 431.6113 177.6992 433.7271 C
176.2124 434.5859 L
176.2622 434.5049 L
fUu145.0801 439.0347 m
142.2529 439.2031 139.8418 435.1416 135.5815 435.606 C
139.1777 426.2085 145.481 433.0161 145.374 430.8203 C
145.5737 428.583 137.2715 429.4009 140.5234 420.0703 C
150.0728 417.4844 148.6782 425.6943 150.9331 425.6553 C
153.0708 425.856 146.7524 419.1621 156.3696 416.209 C
155.606 420.415 159.4619 423.0522 159.1309 425.897 C
158.5044 432.8047 165.103 437.7905 169.5815 434.5435 C
171.7197 437.5679 L
164.0107 442.772 149.1191 427.4053 148.1094 428.1899 C
147.2603 429.1494 161.5981 445.0571 155.8506 452.375 C
152.9785 450.0356 L
156.5508 445.8086 151.9829 438.8535 145.0801 439.0347 C
f164.8984 442.9648 m
163.9219 443.8203 L
163.3169 443.5962 162.5996 443.2983 161.9023 442.9526 C
162.2036 443.6772 162.4595 444.4165 162.647 445.041 C
161.7036 445.937 L
161.5522 445.064 160.2412 441.2119 159.2378 440.1006 C
160.27 441.1685 164.0078 442.7192 164.8984 442.9648 C
f159.4331 448.2251 m
159.7065 446.957 157.0171 437.9536 154.2856 434.8003 C
157.2275 437.7197 166.0654 441.0557 167.3218 440.8394 C
167.415 440.8184 L
166.0991 441.9248 L
164.0273 441.5088 160.6611 440.2852 157.9663 438.7397 C
159.3813 441.5908 160.2632 444.9204 160.5908 447.0693 C
159.4043 448.314 L
159.4331 448.2251 L
fUu130.5796 460.9424 m
127.9229 461.8765 124.5132 458.6172 120.5381 460.2183 C
121.5015 450.2065 129.3027 455.0127 128.6841 452.9678 C
128.2593 450.7476 120.5117 453.7935 121.0942 443.8975 C
129.6133 438.8413 130.4644 447.125 132.6313 446.4834 C
134.7305 446.0947 126.894 441.3711 135.332 435.9224 C
135.7432 440.1929 140.1992 441.7246 140.5952 444.5161 C
141.8926 451.3701 149.5112 454.3506 152.9785 450.0356 C
155.8506 452.375 L
149.8608 459.4883 131.3765 448.6665 130.583 449.6797 C
130.0464 450.8447 148.1294 462.3208 144.5747 470.8921 C
141.1782 469.415 L
143.415 464.3638 137.2744 458.9541 130.5796 460.9424 C
f150.7446 459.4141 m
150.0435 460.5059 L
149.3906 460.4458 148.6089 460.3447 147.8354 460.1934 C
148.3145 460.8062 148.7725 461.457 149.124 462.0088 C
148.4775 463.1362 L
148.0903 462.333 145.7573 458.9565 144.5024 458.1621 C
145.7939 458.9194 149.8525 459.437 150.7446 459.4141 C
f146.8994 465.9399 m
146.7856 464.6318 141.8315 456.7168 138.3086 454.3877 C
141.9941 456.4512 151.3032 457.2295 152.5156 456.7246 C
152.5981 456.6787 L
151.5986 458.0767 L
149.5078 458.2417 145.9805 457.9937 142.9121 457.1934 C
145.022 459.5474 146.874 462.5767 147.6841 464.5083 C
146.897 466.0337 L
146.8994 465.9399 L
fUu122.5977 485.9707 m
120.2729 487.5869 116.0449 485.3682 112.7158 487.9956 C
110.895 478.0947 119.7808 480.6162 118.5889 478.8062 C
117.5889 476.7866 110.9351 481.8193 108.8428 472.1392 C
115.6372 464.9438 118.7266 472.7017 120.624 471.4907 C
122.6089 470.5703 113.6753 468.1079 120.3721 460.5859 C
121.8936 464.5776 126.6274 464.8599 127.7773 467.4468 C
130.7593 473.6499 139.0747 474.5186 141.1782 469.415 C
144.5747 470.8921 L
140.7041 479.3213 119.9956 473.9312 119.5444 475.1313 C
119.3164 476.3931 139.7935 482.5181 138.752 491.7446 C
135.082 491.2451 L
135.9194 485.7842 128.3721 482.2153 122.5977 485.9707 C
f141.5415 479.0229 m
141.1919 480.27 L
140.5537 480.3906 139.7808 480.5063 139.0015 480.5718 C
139.6313 481.0322 140.2295 481.5288 140.7095 481.9624 C
140.3804 483.2168 L
139.7427 482.5381 136.6909 479.9521 135.2422 479.521 C
136.6909 479.8994 140.7012 479.2891 141.5415 479.0229 C
f139.6162 486.3408 m
139.2412 485.1323 132.1943 478.834 128.2568 477.5674 C
132.291 478.5298 141.5425 476.7891 142.5308 475.9644 C
142.5962 475.8975 L
142.0483 477.5225 L
140.002 478.2197 136.6035 478.9541 133.4487 479.0195 C
136.0732 480.7012 138.6611 483.1074 140.0269 484.7607 C
139.6367 486.4307 L
139.6162 486.3408 L
fUu121.6187 512.2251 m
119.8184 514.4038 115.2227 513.3877 112.665 516.8164 C
108.2852 507.7681 117.4453 507.8232 115.8589 506.3975 C
114.3384 504.7261 109.3145 511.3398 104.6523 502.6055 C
109.3145 493.8721 114.3384 500.4858 115.8589 498.8135 C
117.4453 497.3877 108.2852 497.4429 112.665 488.3955 C
115.2222 491.8247 119.8179 490.8081 121.6191 492.9849 C
126.3032 498.1616 134.3735 496.7305 135.082 491.2451 C
138.752 491.7446 L
137.3198 500.9365 115.9297 501.3359 115.7642 502.6055 C
115.9297 503.874 137.3198 504.2749 138.752 513.4658 C
135.082 513.9658 L
134.3735 508.4805 126.3032 507.0483 121.6187 512.2251 C
f138.0527 500.4194 m
138.0186 501.7207 L
137.4287 502.0103 136.7075 502.3315 135.9678 502.6055 C
136.7075 502.8804 137.4287 503.1987 138.0186 503.4888 C
138.0532 504.792 L
137.3013 504.3057 133.5615 502.6304 132.0645 502.6055 C
133.5615 502.5806 137.3013 500.9058 138.0527 500.4194 C
f138.1592 508.0181 m
137.3789 506.9561 129.0469 502.7568 124.8105 502.6055 C
129.0469 502.4541 137.3789 498.2559 138.1592 497.1938 C
138.2061 497.1113 L
138.0894 498.8281 L
136.3896 500.0625 133.2407 501.6914 130.2021 502.6055 C
133.2407 503.5195 136.3896 505.1484 138.0894 506.3828 C
138.2061 508.0996 L
138.1592 508.0181 L
fUu127.7769 537.7632 m
126.6279 540.3516 121.894 540.6343 120.3726 544.626 C
113.6753 537.103 122.6089 534.6406 120.624 533.7202 C
118.7271 532.5103 115.6377 540.2686 108.8428 533.0718 C
110.9355 523.3931 117.5894 528.4253 118.5889 526.4048 C
119.7808 524.5947 110.8955 527.1162 112.7163 517.2163 C
116.0449 519.8438 120.2729 517.625 122.5977 519.2393 C
128.3721 522.9946 135.9194 519.4268 135.082 513.9658 C
138.752 513.4658 L
139.7935 522.6929 119.3164 528.8169 119.5444 530.0796 C
119.9951 531.2788 140.7041 525.8896 144.5747 534.3184 C
141.1782 535.7959 L
139.0747 530.6924 130.7593 531.5601 127.7769 537.7632 C
f140.3804 521.9946 m
140.709 523.2471 L
140.229 523.6807 139.6313 524.1797 139.0015 524.6392 C
139.7813 524.7051 140.5532 524.8184 141.1914 524.9395 C
141.5415 526.1885 L
140.7012 525.9219 136.6909 525.3115 135.2422 525.6899 C
136.6909 525.2588 139.7427 522.6729 140.3804 521.9946 C
f142.5313 529.2471 m
141.543 528.4229 132.291 526.6812 128.2568 527.6436 C
132.1943 526.377 139.2417 520.0796 139.6162 518.8711 C
139.6367 518.7803 L
140.0269 520.4502 L
138.6611 522.1035 136.0732 524.5098 133.4487 526.1914 C
136.6035 526.2568 140.002 526.9912 142.0483 527.6885 C
142.5962 529.3135 L
142.5313 529.2471 L
fUu140.5947 560.6943 m
140.1997 563.4873 135.7437 565.019 135.333 569.2891 C
126.8936 563.8398 134.7305 559.1162 132.6313 558.7275 C
130.4648 558.0869 129.6143 566.3706 121.0942 561.3135 C
120.5122 551.4185 128.2598 554.4644 128.6841 552.2432 C
129.3027 550.1982 121.5015 555.0044 120.5386 544.9937 C
124.5137 546.5947 127.9233 543.3354 130.5791 544.2676 C
137.2739 546.2559 143.415 540.8472 141.1782 535.7959 C
144.5747 534.3184 L
148.1294 542.8901 130.0459 554.3652 130.583 555.5313 C
131.376 556.5435 149.8608 545.7227 155.8506 552.8359 C
152.9785 555.1753 L
149.5112 550.8604 141.8921 553.8398 140.5947 560.6943 C
f148.478 542.0757 m
149.123 543.2007 L
148.772 543.7524 148.3149 544.4053 147.8354 545.0176 C
148.6094 544.8672 149.3896 544.7637 150.0425 544.7036 C
150.7451 545.7974 L
149.8525 545.7739 145.7939 546.2915 144.5024 547.0488 C
145.7573 546.2539 148.0903 542.8779 148.478 542.0757 C
f152.5161 548.4873 m
151.3037 547.9824 141.9941 548.7598 138.3086 550.8232 C
141.8315 548.4941 146.7861 540.5796 146.8999 539.2715 C
146.897 539.1772 L
147.6841 540.7026 L
146.874 542.6343 145.022 545.6636 142.9121 548.0176 C
145.9805 547.2168 149.5078 546.9692 151.5986 547.1343 C
152.5981 548.5322 L
152.5161 548.4873 L
fUu159.1304 579.3135 m
159.4624 582.1592 155.6064 584.7964 156.3701 589.0024 C
146.7524 586.0488 153.0708 579.355 150.9331 579.5557 C
148.6792 579.5171 150.0737 587.7275 140.5234 585.1406 C
137.272 575.811 145.5747 576.6289 145.374 574.3906 C
145.481 572.1948 139.1777 579.0024 135.582 569.6055 C
139.8423 570.0703 142.2534 566.0088 145.0796 566.1753 C
151.9824 566.3569 156.5508 559.4023 152.9785 555.1753 C
155.8506 552.8359 L
161.5981 560.1538 147.2598 576.0605 148.1094 577.021 C
149.1182 577.8047 164.0107 562.439 171.7197 567.6431 C
169.5815 570.6675 L
165.103 567.4204 158.5039 572.4058 159.1304 579.3135 C
f161.7046 559.2744 m
162.646 560.1689 L
162.4585 560.793 162.2046 561.5342 161.9023 562.2583 C
162.6001 561.9131 163.3154 561.6133 163.9209 561.3892 C
164.8989 562.2471 L
164.0078 562.4917 160.27 564.0425 159.2378 565.1104 C
160.2412 563.999 161.5522 560.147 161.7046 559.2744 C
f167.3228 564.3721 m
166.0659 564.1563 157.2275 567.4912 154.2856 570.4106 C
157.0171 567.2573 159.707 558.2544 159.4336 556.9863 C
159.4043 556.897 L
160.5908 558.1416 L
160.2632 560.2905 159.3813 563.6201 157.9663 566.4712 C
160.6611 564.9258 164.0273 563.7021 166.0991 563.2861 C
167.415 564.3926 L
167.3228 564.3721 L
fUu181.9897 592.2559 m
183.0957 594.8633 180.0703 598.5107 181.9458 602.3516 C
171.876 602.1064 176.1802 593.8979 174.1509 594.7217 C
171.9727 595.2817 175.5278 602.834 165.6343 602.8867 C
159.9971 594.7505 168.2114 593.3232 167.4189 591.2129 C
166.9043 589.1152 162.689 597.3203 156.6987 589.2358 C
160.8999 588.5811 162.1343 584.0171 164.9155 583.397 C
171.6177 581.7148 174.1416 573.7944 169.5815 570.6675 C
171.7197 567.6431 L
179.1792 573.1934 169.6812 592.3232 170.7544 593.0249 C
171.9385 593.5107 182.145 574.7007 190.9448 577.6333 C
189.7046 581.123 L
184.54 579.1748 179.4966 585.8369 181.9897 592.2559 C
f179.0737 572.2764 m
180.2114 572.897 L
180.2007 573.5435 180.1577 574.3203 180.064 575.0938 C
180.645 574.5688 181.2554 574.082 181.7803 573.6982 C
182.9341 574.2935 L
182.1646 574.7261 178.978 577.2412 178.2656 578.5581 C
178.9365 577.2104 179.1348 573.2051 179.0737 572.2764 C
f185.8452 575.6611 m
184.5664 575.8213 176.9766 581.3862 174.9229 584.9956 C
176.688 581.2529 176.8945 571.8013 176.2627 570.7061 C
176.2124 570.625 L
177.6992 571.4839 L
177.9834 573.5996 177.9692 577.1475 177.4072 580.2109 C
179.6118 577.9448 182.4673 575.9707 184.375 574.9507 C
185.938 575.6592 L
185.8452 575.6611 L
fUu207.4961 598.5459 m
209.2676 600.748 207.3486 605.0454 210.1909 608.2397 C
200.4478 610.7134 202.3418 601.7461 200.626 603.0146 C
198.6777 604.1626 204.1582 610.4292 194.6401 613.2178 C
187.0029 606.895 194.5239 603.3076 193.189 601.4824 C
192.1162 599.6372 190.3032 608.6089 182.3276 602.4814 C
186.2139 600.6689 186.1602 595.9536 188.6558 594.6484 C
194.6792 591.1143 194.9185 582.9404 189.7046 581.123 C
190.9448 577.6333 L
199.626 580.8872 195.6709 601.9263 196.8896 602.3359 C
198.1719 602.4478 202.8726 581.5649 212.1611 582.0122 C
211.9121 585.708 L
206.3916 585.2988 203.3701 592.9175 207.4961 598.5459 C
f199.2705 580.0742 m
200.5322 580.3667 L
200.6953 581.0015 200.8628 581.7715 200.9805 582.5508 C
201.3945 581.8999 201.854 581.2437 202.2549 580.728 C
203.5337 580.9541 L
202.9087 581.5889 200.5142 584.9312 200.1899 586.373 C
200.4678 584.9019 199.5913 580.9063 199.2705 580.0742 C
f206.7051 581.4985 m
205.5107 582.0396 199.728 589.3799 198.7212 593.4766 C
199.4233 589.3071 197.0244 580.29 196.1479 579.3135 C
196.0771 579.251 L
197.7256 579.7227 L
198.583 581.6313 199.5342 585.0391 199.813 588.1968 C
201.3179 585.4233 203.5474 582.6504 205.0928 581.2363 C
206.7944 581.4688 L
206.7051 581.4985 L
fUu233.7554 597.7041 m
236.0542 599.3618 235.3525 604.0098 238.9575 606.3701 C
230.2227 611.3794 229.6406 602.1074 228.3359 603.8848 C
226.7671 605.4902 233.7178 610.1099 225.3013 615.2769 C
216.2739 611.2485 222.5356 605.7651 220.7646 604.3726 C
219.2339 602.8491 219.9058 612.0444 210.5928 608.27 C
213.835 605.5425 212.5132 600.9502 214.5635 598.9985 C
219.4102 594.0938 217.4453 585.9888 211.9121 585.708 C
212.1611 582.0122 L
221.4512 582.8506 223.2744 604.1572 224.5532 604.1899 C
225.8164 603.9927 224.7661 582.585 233.8286 580.5679 C
234.5786 584.1953 L
229.147 585.2056 228.2876 593.4707 233.7554 597.7041 C
f220.8779 582.1362 m
222.1768 582.0815 L
222.5044 582.6387 222.8716 583.3232 223.1938 584.0322 C
223.418 583.2808 223.6875 582.5469 223.937 581.9448 C
225.2349 581.8486 L
224.8003 582.6206 223.3809 586.4316 223.4565 587.9268 C
223.3306 586.4346 221.416 582.897 220.8779 582.1362 C
f228.4375 581.5078 m
227.4277 582.3232 223.8213 590.9961 223.9448 595.1641 C
223.5117 591.0557 218.7651 582.854 217.6489 582.2617 C
217.5635 582.2212 L
219.2861 582.1748 L
220.6338 583.8267 222.4707 586.8813 223.582 589.7847 C
224.2866 586.6816 225.7104 583.5508 226.8115 581.6743 C
228.5156 581.457 L
228.4375 581.5078 L
fUu258.8198 589.8398 m
261.4927 590.832 262.0718 595.48 266.1626 596.7324 C
259.1182 603.9248 256.0757 595.2495 255.2681 597.2295 C
254.1958 599.2168 262.1387 601.7417 255.4395 609.0483 C
245.645 607.6514 250.2021 600.6421 248.1201 599.7944 C
246.2256 598.7051 249.3535 607.4019 239.3511 606.2803 C
241.7275 602.6938 239.2388 598.7007 240.6914 596.2754 C
244.0215 590.187 239.9683 582.9907 234.5786 584.1953 C
233.8286 580.5679 L
242.9355 578.8223 250.4702 598.8857 251.7178 598.5776 C
252.8867 598.0566 246.0693 577.7241 254.2217 573.2969 C
255.9287 576.5845 L
251 579.0786 252.3862 587.2046 258.8198 589.8398 C
f242.2129 578.3301 m
243.439 577.9136 L
243.9067 578.3696 244.4482 578.938 244.9521 579.541 C
244.9653 578.7612 245.0317 578.001 245.1055 577.3477 C
246.311 576.8682 L
246.1157 577.7607 245.7905 581.8237 246.2593 583.2188 C
245.7334 581.8169 242.9165 578.8701 242.2129 578.3301 C
f249.3037 575.6934 m
248.5435 576.7173 247.4497 586.0972 248.6885 590.0537 C
247.1353 586.1577 240.3975 579.6519 239.1465 579.292 C
239.0537 579.2759 L
240.7036 578.8096 L
242.4443 580.0552 245.0044 582.4102 246.8828 584.9736 C
246.752 581.8809 247.1968 578.2944 247.7847 576.2881 C
249.3643 575.6211 L
249.3037 575.6934 L
fUu280.8047 575.46 m
283.6279 575.6753 285.4932 580.0542 289.7451 580.1362 C
284.9097 588.9585 279.6025 581.3809 279.395 583.5508 C
278.8955 585.7441 287.2295 586.0508 282.748 594.8652 C
272.939 596.145 275.4321 588.1904 273.1953 587.9277 C
271.0894 587.4155 276.4561 594.9302 266.5215 596.5483 C
267.8726 592.5234 264.3672 589.3076 265.0996 586.5659 C
266.686 579.8535 260.7915 573.9619 255.9287 576.5845 C
254.2217 573.2969 L
262.5649 569.2109 275.2217 586.4263 276.3325 585.7925 C
277.3086 584.9629 265.2754 567.2817 271.9341 560.7788 C
274.4629 563.4854 L
270.3511 567.188 273.9688 574.7402 280.8047 575.46 C
f261.7104 568.8901 m
262.7803 568.1558 L
263.3511 568.4624 264.0225 568.8574 264.668 569.2964 C
264.4688 568.54 264.3169 567.7749 264.2173 567.1328 C
265.2773 566.3804 L
265.3105 567.2671 266.0771 571.2451 266.9214 572.4834 C
266.0293 571.2656 262.5601 569.2554 261.7104 568.8901 C
f267.8354 564.4194 m
267.3789 565.6211 268.8467 574.9326 271.1094 578.4058 C
268.5918 575.1196 260.2896 570.6099 259.022 570.6636 C
258.9292 570.6753 L
260.373 569.7441 L
262.3921 570.4741 265.5278 572.0952 267.9966 574.0039 C
267.0039 571.0181 266.5454 567.5547 266.5229 565.3965 C
267.8765 564.3359 L
267.8354 564.4194 L
fUu298.1338 555.7163 m
300.9072 555.1626 303.8301 558.8496 308.0068 557.8203 C
305.6914 567.605 298.5752 561.7515 298.9478 563.8896 C
299.0586 566.1387 307.1719 564.1992 305.2188 573.8916 C
296.0972 577.7407 296.3745 569.4219 294.1426 569.7637 C
292.0068 569.8618 299.1523 575.6216 290.0371 579.8584 C
290.2183 575.5835 286.0156 573.4668 285.9946 570.6411 C
285.6436 563.6777 278.4761 559.6724 274.4629 563.4854 C
271.9341 560.7788 L
278.8438 554.5479 295.708 567.7905 296.6025 566.874 C
297.3052 565.8013 280.9312 551.9688 285.6543 543.9639 C
288.8169 545.8916 L
285.8652 550.5688 291.2764 556.8027 298.1338 555.7163 C
f277.957 554.499 m
278.8096 553.5195 L
279.4561 553.6738 280.2036 553.8691 280.938 554.1147 C
280.5396 553.4365 280.1836 552.7368 279.9111 552.1416 C
280.7153 551.1196 L
280.9878 551.9668 282.8198 555.6147 283.9644 556.5801 C
282.8091 555.6719 278.8525 554.6045 277.957 554.499 C
f282.6582 548.5498 m
282.5752 549.8525 286.4316 558.3877 289.5884 561.1611 C
286.2583 558.6484 277.0835 556.5708 275.8398 556.9297 C
275.751 556.9634 L
276.9185 555.7012 L
279.0093 555.8174 282.5181 556.5796 285.4082 557.7559 C
283.626 555.127 282.2534 551.9106 281.6797 549.8599 C
282.6738 548.4575 L
282.6582 548.5498 L
fUu309.4932 532.0283 m
312.0508 530.7563 315.8369 533.5049 319.543 531.3701 C
319.9902 541.4326 311.5723 537.728 312.4678 539.6709 C
313.1865 541.811 320.4561 537.7339 321.2178 547.6162 C
313.5127 553.8164 311.499 545.7012 309.4619 546.6445 C
307.3643 547.2803 315.8643 550.9385 308.2207 557.4795 C
307.2148 553.292 302.6016 552.3867 301.8164 549.667 C
299.6543 543.085 291.6079 541.1191 288.8169 545.8916 C
285.6543 543.9639 L
290.6011 536.1064 310.4014 544.3076 311.0273 543.1846 C
311.4414 541.9751 291.9443 533.0674 294.2676 524.0938 C
297.8345 525.0913 L
296.2925 530.3906 303.1797 534.9312 309.4932 532.0283 C
f289.7471 536.3018 m
290.2793 535.1211 L
290.9316 535.0903 291.7163 535.083 292.5005 535.126 C
291.9409 534.584 291.4268 534.0146 291.0054 533.5166 C
291.4775 532.3081 L
291.999 533.061 294.7402 536.0718 296.0801 536.6831 C
294.6968 536.1094 290.6221 536.1563 289.7471 536.3018 C
f292.6631 529.3198 m
292.8906 530.5737 298.9956 537.7793 302.7314 539.5762 C
298.8291 538.0513 289.4688 538.5293 288.3545 539.2017 C
288.2798 539.2588 L
289.064 537.7319 L
291.1699 537.3125 294.6309 537.0469 297.7876 537.4258 C
295.4375 535.4082 293.1265 532.6362 292.0591 530.8354 C
292.6514 529.2266 L
292.6631 529.3198 L
fUu313.9902 506.147 m
316.0752 504.2305 320.4863 505.8545 323.5234 502.8062 C
326.6719 512.3521 317.4746 511.0659 318.9531 512.6982 C
320.21 514.5596 326.1338 508.6753 329.502 517.9658 C
323.7354 526.0132 319.6279 518.7598 317.9063 520.2168 C
316.1084 521.4092 325.2529 522.6123 319.6533 530.9819 C
317.6289 527.2441 312.9072 527.6157 311.3906 525.2061 C
307.5508 519.4609 299.2422 519.7544 297.8345 525.0913 C
294.2676 524.0938 L
296.9785 515.2222 318.1943 517.709 318.4912 516.4663 C
318.5566 515.1807 297.3604 511.9282 297.2266 502.6055 C
300.9307 502.6055 L
300.8145 508.1514 308.7412 510.647 313.9902 506.147 C
f296.1494 515.6206 m
296.3584 514.3418 L
296.9692 514.1333 297.7139 513.9116 298.4731 513.7393 C
297.7822 513.3687 297.1167 512.9575 296.5771 512.5923 C
296.7437 511.3032 L
297.4126 511.8833 300.8604 514.0391 302.3408 514.2661 C
300.8555 514.0898 297.0005 515.251 296.1494 515.6206 C
f297.0537 508.0947 m
297.6494 509.2524 305.4199 514.5269 309.5273 515.2451 C
305.4131 514.8447 296.4336 517.832 295.6206 518.7949 C
295.561 518.8691 L
295.8691 517.1812 L
297.7534 516.2007 301.1191 515.022 304.1855 514.5176 C
301.2871 513.2017 298.5068 511.1826 296.8896 509.7231 C
297.0195 508.0078 L
297.0537 508.0947 L
fUU(Adobe PatternOnPath Brush Tool) 1 0 35 XP
%040302010000803F0000000000000001000000005061747465726E204272
%7573682031
/Adobe_Brushed_Path () XT
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
