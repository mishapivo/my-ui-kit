%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8.0.1
%%For: (S ) ( )
%%Title: (040.ai)
%%CreationDate: (11/1/2005) (1:26 PM)
%%BoundingBox: 194 453 365 643
%%HiResBoundingBox: 194.1191 453.8345 364.2715 642.2427
%%DocumentProcessColors:
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%+ 0 0 0 1 (orn)
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 297.5 420.5 297.5 420.5
%AI3_TileBox: 17 19 577 823
%AI3_DocumentPreview: None
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 1
%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 2
%AI8_OpenToView: -286 860 1 1148 792 18 1 1 2 40 0 0
%AI5_OpenViewLayers: 77
%%PageOrigin:17 19
%%AI3_PaperRect:-16 824 579 -18
%%AI3_Margin:16 -20 -18 18
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 116 128 8
%%BeginData: 11316 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD2FFFA8A852522727FD07F827F8F8F852527D7DFD5BFFA85227FD
%09F827F8FD0427FD0AF87DA8FD53FFA85227FD05F85252A8A87DF8275227
%F852FFFFA852F8F8F8272727FD05F87DA8FD4DFFA852FD04F827F8F8F827
%F852A8A8F87DFFA8A8A8F852A8F827A8FFA827F8A8A87D52FD05F87DA8FD
%48FFA852F8F8F82752FF2727A8FFFFA82752277DFF2727277DFFF8277DFF
%525252FF5252FFA827F8F827FD04F827FD45FFA827FD04F87DA8FF7DF8A8
%7DF8277DFFF8F8FF7D27FF7D27FF52F8FF52277D2752FFF852F87DA8A852
%F82727F827F852A8FD40FF7D52F8F8F827F82727F852527DFFF8A87DF8A8
%FF27FF27A8FFFF27A87D7DA8F8A8FF7D27FF52F8FFA85227A8A8F8A8FF52
%F8F8F852FD3EFF27F8F8F827F852FFFFFFA827F8A87D27FFFF5227FF52FF
%F8FFFFFF7D52FF7D7D27FFFFFFF8FF27A8A8F8527DF8FF2752FFA82727F8
%F8F87DFD3AFF7DF8F8F87DFF5252FF27F8F8FFFF27FF7D52FFFFFFF87D7D
%7DF852275227272752F8527DA8A8F8FF7DFF2752FFFF27A8A82727F85227
%FD04F827A8FD36FFA827F8F827A8FFFFF8A85252FF7DF8A87D7D52277D52
%27FD12F827277DF8FFFFFF27A87D2752FFFFFFA852F827F8F827FD34FF7D
%27F827F8F8F82752F8FF7D52FFFF7DF8FF5227FD05F827277D52A8A8A87D
%A8A8A87D7D5227FD05F82752A8FF52A8A852FF5227F852FF27527DF8F827
%A8FD31FF52F8F827F87DA8FF7D27F8FF5252FFFF7DFD06F87D7DFD11FFA8
%A85227FD05F8A852FF27277DFFF8A85227FFA8F8F8F87DFD2FFF27F8F87D
%F8A87D5252A8FF527D7D27A827F8F8F8277DFD1AFF7D27F8F8F8525227FF
%FFFF52A8A827FF527DF8F8F852FD2CFFA8F8F8F87D2752A8F87D7DF87DFF
%7D52FD04F87DA8FD1EFFA82727F8F8F8A8FFFFF8A87D27F8272727F8F8F8
%52A8FD29FFA8F8F8F8A8FF277DA827FFFFA8F85227F8F8277DFD23FFA87D
%F8F8F8527D27FF5252FD04FF7DF827F827A8FD27FFA8F8F8F852527D277D
%A8F8FFFFA852F8F8F87DFD28FF52F8F8F827A852FF5227F827A85227F8F8
%27A8FD25FFA8F8F8F827527D272727FF27A8A827F8F852FD2BFFA852F8F8
%27FF2727A8FF277DA8F8A827F827FD24FFA8F8F8F827A8FFFFFFA8277D7D
%F8F8F8277DFD2EFFA8F8F8F827A8FFFF7D52FFF8FFA827F827A8FD21FFA8
%F8F82727A852F8F827A8FFA827F8F852FD32FF27F8F87DFFFF277DA8277D
%7DA827F827FD21FFF8F8F87D27FFF8FFFF7DF852F8F8F8A8FD34FF52F8F8
%277DF8FF7DF8272727F8F8F827FD1FFF27F827FF527DFFF8FFFFFFA8F8F8
%27FD37FFA827F8F87DFF27FD04FFA8F827F852FD1DFF27F8F8A8FF7D27FF
%F87DFFA8F8F827FD39FFA827F82727FF7D52F8277D7DF8F8F87DFD1BFF7D
%F8F852F8F8F827A8A8F8A8F8F852FD3BFFA827F82727277DA85227FF2752
%F8F8A8FD19FFA8F8F82727A8A8A82727FF52F8F827FD3DFF7D27F8F8A8FF
%FFA8F8FF27A827F8F8FD19FF27F82752FF7D7D7DFFFFA8F8F852FD40FF27
%F827FFFF5252FF27A8FF27F827FD17FF52F827F8FF27275227F87DF8F8F8
%FD41FFA827F827A8F8A8A8F8A87DA8F8F87DFD15FFA8F8F85252FFF8A8FF
%FFA8F8F827FD43FFA827F8F87DFFF8272727F852F827A8FD14FFF827277D
%27FF277DFFFF27F8F8FD45FFA8F8F87D27A8FFFFFFA8F827F852FD13FF52
%F827FFA8F8A8A8F8FF7DF8F8FD47FF7DF827A87D52275252FFF8F8F8A8FD
%11FFA8F8F8A8527D2752FF52F8F8F87DFD48FFF8F8F82752A87DF8A85227
%F8F8FD11FF52F827F827527D2752FF27F852FD4AFFF8F852FFFFFF27A852
%52F8F87DFD0FFFA8F8F8F87DFD04FF7D7DF8F8A8FD4AFFA8F8F8A8FF7DF8
%A852527DF827A8FD0EFF27F8F87DA827F8F8277DF82752FD4CFF7DF827A8
%277DFFF8A8FF27F87DFD0DFF7DF8F8F8A82752FFA87DF8F827FD4DFFA8F8
%F8F87DFF2727527D7DF8F8FD0DFF52F852F8FF277DFFFFA8F8F8FD4FFF7D
%F8F8FF277D5252F82727F87DFD0BFFA8F8F8A8F8A8A8F8A8FF27F852FD50
%FFF8F827FD05FF27F8F827FD0BFF52F827FF5252FF52F87DF827FD51FFA8
%F82727F8F8F827FF2727F8A8FD09FFA8F8F8A8A87DF87DFF7DF8F852FD52
%FF27F852A8FFA827527DF8F827FD09FF7DF8272727527D2752A8F8F8FD53
%FF7DF8F8FFFFFF277D7D52F8F8A8FD08FF27F8F827A8FD04FF52F852FD54
%FF27F852FF7DF8A8522752F852FD07FFA8F8F827FF7DF8F8F827F8F8A8FD
%54FFA8F8275227A8FFF8A8A827F8FD07FF7DF827527DF8A8FFFF27F827FD
%56FF27F827A8FFF852A8FFF8F87DFD06FF27F8F87D7D27FFFFFF27F8A8FD
%56FF52F8527D275227F8527DF852FD05FFA8F8F85227FFF87DFFA8F827FD
%57FFA8F8F8A8FFFFFFA827F8F8F8FD05FF7DF852A827A8A8F85227F852FD
%58FF27F827F827277DFF2727F8A8FD04FF27F852FF2727A8FF52F8F8A8FD
%58FF52F827A87D7DF87D5227F87DFD04FF27F8FF5227F85252A8F827FD5A
%FFF8F8FFFFFF7D52A8F8F827FFFFFFA8F827F8277DFFFFFF52F827FD5AFF
%27F8A8FFA8F8A87D27F8F8FFFFFF7DF82727FFA852522727F8A8FD5AFF52
%F8527DF8A8FF277D27F8A8FFFF52F8F87D7DF8527DA8F8F8A8FD5AFFA8F8
%F827A8FF5227FF272752FFFF27F8F8FF27A8FFFF7DF827FD5CFFF8F8FF7D
%27F87DFF7DF852FFFFF8F8F8A85227FFFF7DF852FD5CFFF8F827A87D7DF8
%2752F8F8FFA8F827277DFF2727A852F87DFD5CFF52F85252A8FFFF5227F8
%F8FF7DF8277DF8A8A87DF8F8F8A8FD5CFF52F8F85227F852FFF827F8FF7D
%F87DFF7DF87DFFFFF8F8FD5DFFA8F827FFFFA8277D7DF8F87D27F87DA8F8
%2727525227F8FD5DFFA8F8F8FFFFFF277D5227F87D52F87DF87DFFFFA87D
%F852FD5EFFF8F8FFFF2727FF5227F85227F8F87DA87DFD04F852FD5EFF27
%F827F852A87DF87DF852F8F827FF2727A8FF7DF87DFD16FFFD11F827FD19
%F827FD08F8FD14FF27F87DFFFF7DF87D7DF827F8F827FFF8FFFFFF52F852
%FD16FF27F8FD0427F8F82727F8FD0427F8272727F8272727F8F82727F8FD
%0427F8F82727F8F8272727F8272727F8272727F82727FD14FF27F8A85227
%F852FFA8F827F8F827FF2752FFFF7DF8A8FD16FFA8A827FFFFFF27A87DFF
%277DFFFFA827FFFFA8F8FFFFFF5252FF7D7D52FFFFFFF8FF7DFF27A8FFFF
%A827FFA8A827FFFFFF5252A8FD14FF52F87DFFFFA82727A8F827F8F8F87D
%A827F852F8F87DFD16FF7DA8F8A8FFA8F8A852A87D27FFFF7D52FFF8FF27
%7DFFFFF8A87D7DA8F8A8FF7D27FF52A87D27FFFF5252FF27FFF8A8FFFFF8
%A87DFD14FF7DF8F82752A8FF2752F827F8277DF8A8FFA85227F8A8FD16FF
%F8FF5227A82752FFF87DA8277DA8F8FF7D27A8A8F8A85252FF27F8FF2752
%7D277DFFF87DFF277D7DF8FF7D27A87D27A85252FF52FD14FF52F852A852
%F87DA8FD04F827FF7DF8527DA827F87DFD16FF5227FF522752FF2752F87D
%A852277DA8F82727A87D2752A87DF82727FF272752FF2752F8A8A82727A8
%A8F82727A8522752A85227FD14FF7DF852FFFF7DF8FF27F8F8F827FF7D27
%52A8A852F8A8FD17FF2727A8A87D2727FF7DF852A8A8522752FF52277DA8
%7D52F8A8A82727A8A8A82752FFA8F852A8A852F87DFF27277DA87D52F8FD
%15FF52F852FFFFA8F8FF27F8F8F8277DF87DFFA87DF8F87DFD16FF7D5252
%F827F852527D527DF827F827277D527D2727F827277D52522752F827F8FD
%04527D2727F827277D277D2727F827277D52FD14FF7DF8527D52F87D7DFD
%05F8277DFF27275227F8A8FD16FFFD11F827FD19F827FD08F8FD14FF52F8
%F82752FFFF2752F827F8F8F8FF2752A8FF52F87DFD16FFA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA87DA8
%7DA87DA87DA87DA87DA87DA87DA87DFD14FF52F87DFFFF7D2727A8F827F8
%F852FFF8FFFFFF7DF87DFD5EFF27F87D7D272752FF7DF827F8F8F8FF2752
%A8FF52F852FD5EFF27F87DA8FF52F87DA8F82752F8277DFF5227F827F852
%FD5EFF27F8272752FF7DF87DF85227F852F852FFFFA852F827FD5EFFF8F8
%FFA82727FF2752F85252F87DA827275252FFF827FD5EFFF827FFFFFF277D
%7D27F87D522752FF52F852FFFFF8F8FD5DFF7DF827FFFFFFF87D5227F8A8
%7DF8527D27A8FF5227F8F8A8FD5CFF7DF8275227F87DFF27F8F8A87DF8F8
%277DFFF8277D52F87DFD5CFF27F8277D7DFFFF5227F8F8FFFFF8F8F8FF27
%52FFFF7DF852FD5CFF27F8FF7DA87D2727A8F827FFFF27F8F8FF277DFFFF
%A8F827FD5CFFF8F8FF7DF82752FF52F827FFFF52F8F8A87D27527D7DF8F8
%FD5BFF7DF8F852A8FF5227A852F87DFFFF7DF827F8FFA8522727F8F87DFD
%5AFF52F85252F87DFFF87DF8F8A8FFFFA8F8F82727A8FFFFFF7DF87DFD5A
%FF27F87DFFA827A87D27F8F8FD04FFF8F87D7D27F8F85252F8F8FD59FFA8
%F8F8FFFFFF527D7D27F827FD04FF52F87DFF5227FFA852F8F8A8FD58FF7D
%F8277DA87D277D7D27F87DFD04FF52F827A8F8FFA8F82752F852FD58FFF8
%F82727F8277DFFF827F8A8FD05FFF8275252FF277DFFA8F8F8FD57FFA827
%F8FD05FF2727F827FD06FF27F827527D27FFFFFFF8F87DFD56FF7DF85252
%272727F85227F852FD06FF7DF827527D27A8FFFF52F852FD56FFF8F827FF
%FF2727FFFF27F8A8FD06FFA8F8F8F8FF52FD06F8A8FD54FF7DF8F852F8A8
%A8F87DA8F827FD08FF52F82727FD05FF522752FD54FF52F87DFFA8F8FF52
%5252F852FD08FF7DF82727F852525227A8F8F8A8FD52FFA8F8F8A8FFFF52
%52A827F8F8A8FD09FFF8F8A8A852277DFF7DF8F87DFD52FF27F827FFFFFF
%277D7D27F852FD0AFF52F827FF5227FF27F852F8F8FD51FF7DF8F827F8F8
%F827A827F8F87DFD0AFFA8F8F8FFF8FF7D27A8FF27F852FD50FF52F87DFD
%05FF52F8F8F8FD0CFF27F852F8FF277DFFFFA8F8F8A8FD4EFF7DF8F87D52
%277D5227F827F87DFD0CFFA8F8F8F8FF277DFFFF7D27F827FD4EFFF8F8F8
%7DFF52277D7DA8F827FD0EFF27F82752A8F8F8F82752F8F87DFD4CFF52F8
%27A8F8A8A8F87DFFF8F852FD0EFFA8F8F8F87DFD05FF52F8F8FD4BFFA8F8
%F8A8FFA8F8FF527D7DF8F8FD10FF27FD04F87D522727FFF8F827FD49FFA8
%27F852FFFFFF277D7D2727F87DFD11FFF8F87D7D525227FF5227F8F87DFD
%48FF52F8F8F87DA8A8F8A85252F827FD12FF52F827A8A8F8FF7DF8A87DF8
%F8A8FD46FF7DF8F8A87D27272752A8F8F8F87DFD13FF27F852A852FF277D
%FFFF52F827FD45FFA8F8F87D52A8FFFFFFA827F8F852FD14FF7DF8F87D27
%FFF8FFFFFF7DF8F827A8FD42FFA8F8F8F87DA827F82727FD04F8FD16FF52
%F8F8F8A852275227275227F852FD42FF27F827A8F8A8A8277DA8A8F8F8A8
%FD17FFF8F8F852A87D527DFFFF27F8F852FD40FF27F8F8FFFF5227FFF8A8
%A827F852FD19FFF8F8F8527DA8A87D27FF27F8F852FD3EFF27F8F8FFFFFF
%A827FF52A852F827FD1AFF7DF8F82727F827F8FF7DF87DF8F852FD3CFFF8
%27F827F87DA87DF8FFF852F8F8A8FD1BFF52F827A8FF7D27FF277DFFA827
%F827A8FD38FFA8F8F827A8FFA8272727A87D27F8F87DFD1DFF27F827A87D
%52FFF8FFFFFF7DF8F827A8FD36FFA8F8F8F87D7D27A8FFFFFF7DF8F8F827
%FD1FFF27F8275252FFF8A8FF7D275227F8277DFD34FF7DF8F827A8F8FF52
%2727522727F8F827FD20FFA8F8F827F8FF27F8F8277DFF5227F8F852FD31
%FFA827F8F852FFFF277DA8F8A852A827F8F8FD22FFA827F82727FD05FF27
%FF5227F8F827A8FD2EFF7D27F8F8F8FFFFFF527DFFF8FFFF27F827FD24FF
%A8FD04F8525227F827FF277DA8F8F8F852A8FD2AFFA827F8F827A827F8A8
%FF5252A8F8A8F8F8F8FD26FFA827F827527D7D527DFFF8FFFFFF27F8F827
%52FD28FF52F8F8F8527D7DFF7DF8F827FF5252F8F827FD28FFA8F8F827A8
%FF277D7D27FFFFA8F85227F8F8F87DA8FD23FF52F8F8F827A8F8FF277DA8
%FFFFFF52F8F8F827FD2AFFA827F8277D5252FFF87D522752FF7D7DF8F8F8
%2752FD1FFFA852F8F8F827A8FFFF27A8A8F8272752F827F8F827FD2CFFA8
%27F8F827F8A87D27527DFF27A87D277D27F8F8F82752FD19FFA87D27F8F8
%F82752F8FFFFFF27A87D27A87D5227F8F852FD2FFF52F8F8F8277DFFFFA8
%2727FF7D52FFFFA8FD05F82752A8FD12FF7D5227FD05F8A87DFF5227A8FF
%27A87D27FFA827F8277DFD31FF7DFD07F87DF8FF527DFFFF5227A87D27FD
%06F827527D7DA87DA87DA87D7D525227FD06F8527DFF27A85252FF7DF8F8
%27FFF87D5227F827A8FD34FF27F8F827A8FFFFF8A87D27FF7D27A8A87D7D
%27A85252FD12F827525227FFFFFF277DA8F87DA8FFFFFF2727F8F8F852FD
%37FF52F8F8F827FF2752A827F827A8FFF8FF527DFFFFA8F87DA852F8FD04
%27F82727F8277D7DFFF8FF52FF2752FFFF27A87D2727F82727FD05F8A8FD
%3AFF52F8F8F87DF87DFD04FF2727A8A827FFFF7D27FF52FFF8FFFFFF5252
%FFFF5252FFFFFFF8FF52A8A8F8527D27FF5252FFA87D27F8F82752FD3DFF
%7D27FD05F82727F852277DA8F87D7DF8A8A827FF277DFFFF277DA827FFF8
%A8FFA827FFF827A8A827277DA8F8A87D52F8F8F852A8FD40FF7D52F8F8F8
%2752FFFF7DF8FF7DF8F8A8A827F8FF5252FF7DF8FF5227FF7D27A8277DFF
%F827277DFFA87DF85227F8F8F852FD45FFA827FD04F852A82727A8FFFF7D
%27272752FFF827F87DA8F8F87DFF522752FF5227FF7D27FD07F852A8FD48
%FFA87D27F8F8F82727F82727F852FFA8F87DFFA8FFA82727A8F852A8FFA8
%52F8A8A8A85227F8F8F8277DFD4EFF5252FD05F827277D52A87DF8F85227
%F827FFFFA827FD04F827FD05F82752A8FD53FFA87D27FD04F827F8F8F827
%F8FD042752FD09F8277DFD5BFFA87D7D2727FD0CF82752527DA8FD2EFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(New Pattern 1)
0 A
u800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
-7894 8612 m
-7888.8975 8612 L
-7888.8975 8606.3301 L
-7894 8606.3301 L
-7894 8612 L
n0 O
0 0 0 1 (orn) 0 0 Xk
-7894 8606.3301 m
-7894 8607.2813 L
-7888.8975 8607.2813 L
-7888.8975 8606.3301 L
-7894 8606.3301 L
f-7894 8610.6465 m
-7894 8609.4004 -7893.0542 8607.7188 -7891.4482 8607.7188 c
-7889.8433 8607.7188 -7888.8975 8609.4004 -7888.8975 8610.6465 C
-7888.8975 8609.4287 L
-7888.8975 8608.5146 -7889.8433 8607.2813 -7891.4482 8607.2813 c
-7893.0542 8607.2813 -7894 8608.5146 -7894 8609.4287 C
-7894 8610.6465 L
f*u
1 D
-7888.8975 8611.0488 m
-7888.8975 8612 L
-7894 8612 L
-7894 8611.0488 L
-7893.1362 8611.0488 L
-7892.9614 8609.8086 -7892.3662 8608.5039 -7891.4482 8608.5039 c
-7890.5322 8608.5039 -7889.937 8609.8086 -7889.7622 8611.0488 C
-7888.8975 8611.0488 L
f0 D
-7892.667 8611.0488 m
-7890.2295 8611.0488 L
-7890.3818 8610 -7890.8086 8608.9551 -7891.4482 8608.9551 c
-7892.0889 8608.9551 -7892.5151 8610 -7892.667 8611.0488 C
f*U
U%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
0 0 0 1 (orn) 0 0 Xk
(orn) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe PatternOnPath Brush Tool/ Pattern Brush 1/) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Pattern Brush 1)
(1 / New Pattern 1/ / / / / 5 0.403922 0.137255 0.12549 /  1 0 1 0 1 0 ) -
(1 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 -1 255 102 0 0 50 Lb
(oval) Ln
0 A
%_u%_0 R
%_0 0 0 1 (orn) 0 0 XK
%_800 Ar
%_0 J 0 j 2.6296 w 1 M []0 d%_%AI3_Note:%_0 D
%_0 XR
%_201.5737 548.0386 m
%_201.5737 500.1479 236.4536 461.187 279.3281 461.187 c
%_322.2021 461.187 357.083 500.1479 357.083 548.0386 c
%_357.083 595.9268 322.2021 634.8901 279.3281 634.8901 c
%_236.4536 634.8901 201.5737 595.9268 201.5737 548.0386 c
%_s%_U%_0 Ap
0 A
u800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
201.5737 548.0386 m
201.5737 500.1479 236.4536 461.187 279.3281 461.187 c
322.2021 461.187 357.083 500.1479 357.083 548.0386 c
357.083 595.9268 322.2021 634.8901 279.3281 634.8901 c
236.4536 634.8901 201.5737 595.9268 201.5737 548.0386 c
nu0 O
0 0 0 1 (orn) 0 0 Xk
194.1191 548.0386 m
196.6201 548.0386 L
196.6558 543.3931 196.9639 538.7495 197.5669 534.1372 C
195.0889 533.7969 L
194.4707 538.5234 194.1543 543.2808 194.1191 548.0386 C
f205.4692 548.0386 m
202.2373 548.085 197.7246 545.5454 198.0288 541.1523 C
198.3184 536.7593 203.1382 534.854 206.3335 535.3413 C
203.1611 534.9058 L
200.8291 534.5488 197.1719 536.6494 196.8809 541.0742 C
196.5737 545.4995 199.9082 548.0728 202.2671 548.0386 C
205.4692 548.0386 L
f*u
1 D
207.3818 535.4854 m
209.8594 535.8257 L
209.335 539.8721 209.064 543.9507 209.0283 548.0386 C
206.5273 548.0386 L
206.5771 545.9067 L
203.3369 545.4219 199.8877 543.7412 200.0884 541.292 C
200.2231 538.8438 203.8613 537.6445 207.1401 537.6045 C
207.3818 535.4854 L
f0 D
206.603 544.7485 m
206.6709 542.7451 206.813 540.7427 207.0093 538.7495 C
204.2075 538.833 201.376 539.6885 201.272 541.3726 C
201.1426 543.0576 203.8394 544.2871 206.603 544.7485 C
f*U
Uu195.0889 533.7969 m
197.5669 534.1372 L
198.2295 529.5327 199.1821 524.9702 200.4321 520.4844 C
198.0259 519.8013 L
196.7437 524.4009 195.7671 529.0776 195.0889 533.7969 C
f206.3335 535.3413 m
203.1284 534.9492 198.9932 531.8154 199.9053 527.5005 C
200.8228 523.1899 205.8086 521.96 208.9448 522.9014 C
205.8643 522.0269 L
203.5645 521.3359 199.7026 522.9219 198.7793 527.2651 C
197.8594 531.6123 200.8223 534.6201 203.1611 534.9058 C
206.3335 535.3413 L
f*u
1 D
209.9624 523.1904 m
212.3687 523.8735 L
211.2783 527.7954 210.4438 531.7891 209.8594 535.8257 C
207.3818 535.4854 L
207.7197 533.3833 L
204.5698 532.46 201.3965 530.3242 201.9263 527.9233 C
202.3896 525.5137 206.1807 524.835 209.4204 525.2495 C
209.9624 523.1904 L
f0 D
207.9023 532.2407 m
208.2607 530.2725 208.644 528.3037 209.1357 526.3647 C
206.3569 526.0596 203.4106 526.5088 203.0874 528.166 C
202.7368 529.8198 205.2261 531.4058 207.9023 532.2407 C
f*U
Uu198.0259 519.8013 m
200.4321 520.4844 L
201.6992 516.0024 203.3223 511.623 205.2065 507.3599 C
202.9229 506.3389 L
200.9893 510.7134 199.3257 515.2056 198.0259 519.8013 C
f208.9448 522.9014 m
205.833 522.0688 202.1401 518.3755 203.6714 514.2314 C
205.1943 510.0884 210.3086 509.5859 213.2852 510.9712 C
210.3618 509.6641 L
208.1772 508.6475 204.1235 509.6641 202.5898 513.8394 C
201.0469 518.0146 203.5957 521.4204 205.8643 522.0269 C
208.9448 522.9014 L
f*u
1 D
214.251 511.4028 m
216.5347 512.4233 L
214.896 516.1367 213.4756 519.9556 212.3687 523.8735 C
209.9624 523.1904 L
210.5811 521.1558 L
207.5693 519.7935 204.7661 517.2461 205.6123 514.9355 C
206.4189 512.6172 210.271 512.4844 213.4072 513.354 C
214.251 511.4028 L
f0 D
210.9155 520.0498 m
211.5776 518.1646 212.189 516.2568 212.9761 514.4189 C
210.2949 513.731 207.2666 513.7393 206.7275 515.3403 C
206.1699 516.9365 208.3857 518.8486 210.9155 520.0498 C
f*U
Uu202.9229 506.3389 m
205.2065 507.3599 L
207.0806 503.0898 209.3291 498.9829 211.8423 495.0474 C
209.7344 493.7007 L
207.1538 497.7422 204.8467 501.9585 202.9229 506.3389 C
f213.2852 510.9712 m
210.2949 509.6875 207.2212 505.5283 209.2979 501.6216 C
211.4224 497.7422 216.5625 498.0039 219.2988 499.812 C
216.6006 498.0879 L
214.5928 496.7612 210.4248 497.166 208.2847 501.0767 C
206.1909 505.0137 208.1738 508.7256 210.3618 509.6641 C
213.2852 510.9712 L
f*u
1 D
220.1904 500.3818 m
222.2983 501.7285 L
220.1216 505.1377 218.1631 508.7026 216.5347 512.4233 C
214.251 511.4028 L
215.1367 509.4727 L
212.3389 507.6865 209.9902 504.79 211.1157 502.6006 C
212.3037 500.4502 216.0679 500.8452 219.0537 502.1733 C
220.1904 500.3818 L
f0 D
215.6367 508.4341 m
216.54 506.6533 217.4585 504.8809 218.4834 503.1685 C
215.9307 502.0938 212.9668 501.6787 212.1602 503.1626 C
211.3853 504.666 213.3291 506.8926 215.6367 508.4341 C
f*U
Uu209.7344 493.7007 m
211.8423 495.0474 L
214.3672 491.1206 217.1382 487.335 220.2617 483.8413 C
218.3862 482.1865 L
215.1753 485.7793 212.3276 489.6675 209.7344 493.7007 C
f219.2988 499.812 m
216.5059 498.0869 214.1035 493.5313 216.7495 489.9741 C
219.4194 486.4331 224.5054 487.5137 226.8975 489.6958 C
224.4961 487.5776 L
222.75 485.9829 218.5205 485.7124 215.8301 489.2822 C
213.1616 492.8687 214.5503 496.8218 216.6006 498.0879 C
219.2988 499.812 L
f*u
1 D
227.6904 490.396 m
229.5659 492.0508 L
226.8765 495.0522 224.4868 498.3281 222.2983 501.7285 C
220.1904 500.3818 L
221.3408 498.6021 L
218.8843 496.4546 216.9263 493.1904 218.3999 491.2148 C
219.8979 489.2627 223.5337 490.2061 226.3169 492.0059 C
227.6904 490.396 L
f0 D
222.0034 497.6621 m
223.1187 496.0088 224.3569 494.4502 225.5771 492.8779 C
223.2158 491.4248 220.3838 490.5923 219.3477 491.9282 C
218.3198 493.2725 219.959 495.8013 222.0034 497.6621 C
f*U
Uu218.3862 482.1865 m
220.2617 483.8413 L
223.3706 480.3389 226.751 477.0684 230.3818 474.0869 C
228.7988 472.1504 L
225.0601 475.2202 221.582 478.585 218.3862 482.1865 C
f226.8975 489.6958 m
224.4082 487.5718 222.7363 482.6938 225.9258 479.5957 C
229.1343 476.5171 233.9541 478.3662 235.9819 480.939 C
233.9556 478.4595 L
232.4688 476.5723 228.3618 475.6621 225.127 478.7681 C
221.9092 481.8921 222.6709 486.0205 224.4961 487.5776 C
226.8975 489.6958 L
f*u
1 D
236.6514 481.7578 m
238.2344 483.6943 L
235.1387 486.2383 232.2417 489.0391 229.5659 492.0508 C
227.6904 490.396 L
229.1167 488.8384 L
227.0176 486.333 225.5596 482.7734 227.3594 481.0811 C
229.104 479.3389 232.6235 480.9365 235.0415 483.1191 C
236.6514 481.7578 L
f0 D
229.9019 488.002 m
231.2769 486.5713 232.6943 485.1763 234.1851 483.8711 C
232.0757 482.0444 229.3838 480.7422 228.1831 481.9351 C
226.9521 483.0996 228.1455 485.8208 229.9019 488.002 C
f*U
Uu228.7988 472.1504 m
230.3818 474.0869 L
234.0029 471.0933 237.9146 468.4385 242.0254 466.1313 C
240.7983 463.9517 L
236.5586 466.3315 232.5278 469.0684 228.7988 472.1504 C
f235.9819 480.939 m
233.8823 478.4585 233.0059 473.3486 236.6704 470.7988 C
240.3779 468.3101 244.8159 470.9663 246.3667 473.8423 C
244.7954 471.0518 L
243.6597 468.9443 239.7607 467.3374 236.0205 469.8496 C
232.3218 472.4214 232.4199 476.6455 233.9556 478.4595 C
235.9819 480.939 L
f*u
1 D
246.8853 474.7642 m
248.1123 476.9438 L
244.6421 478.8906 241.3203 481.1377 238.2344 483.6943 C
236.6514 481.7578 L
238.2988 480.4482 L
236.6035 477.5928 235.8262 473.9443 237.8364 472.5024 C
239.9004 471.1475 243.0356 473.2153 245.063 475.8071 C
246.8853 474.7642 L
f0 D
239.2061 479.7529 m
240.8018 478.5835 242.4209 477.4492 244.1021 476.4121 C
242.3447 474.2715 239.9155 472.5425 238.5068 473.4814 C
237.1279 474.4692 237.8452 477.3364 239.2061 479.7529 C
f*U
Uu240.7983 463.9517 m
242.0254 466.1313 L
246.1362 463.8228 250.4551 461.8682 254.9238 460.3174 C
254.1123 457.9517 L
249.4966 459.5527 245.0381 461.5703 240.7983 463.9517 C
f246.3667 473.8423 m
244.7061 471.0146 244.7344 465.8413 248.8135 463.9888 C
252.9009 462.1548 256.8032 465.5913 257.7964 468.6875 C
256.7568 465.6587 L
256.0317 463.3936 252.4673 461.0869 248.3418 462.9395 C
244.2227 464.8086 243.5767 468.9775 244.7954 471.0518 C
246.3667 473.8423 L
f*u
1 D
258.1401 469.688 m
258.9517 472.0537 L
255.2114 473.3545 251.583 474.9956 248.1123 476.9438 C
246.8853 474.7642 L
248.7246 473.7593 L
247.5796 470.7217 247.3838 466.8545 249.6606 465.8716 C
251.9106 464.8394 254.6538 467.5044 256.1782 470.4155 C
258.1401 469.688 L
f0 D
249.7402 473.2461 m
251.4829 472.3232 253.3052 471.5698 255.1201 470.8154 C
253.7612 468.3574 251.6968 466.2661 250.1475 466.9536 C
248.5815 467.6128 248.8223 470.6357 249.7402 473.2461 C
f*U
Uu254.1123 457.9517 m
254.9238 460.3174 L
259.3955 458.77 264.0283 457.6895 268.7129 457.0137 C
268.3594 454.5376 L
263.5181 455.2358 258.7305 456.354 254.1123 457.9517 C
f257.7964 468.6875 m
256.6904 465.6621 257.6411 460.5117 262.0103 459.458 C
266.3823 458.4297 269.5635 462.5171 269.9644 465.7739 C
269.5117 462.604 L
269.2178 460.2139 266.1553 457.2993 261.7402 458.3398 C
257.3276 459.4023 255.9502 463.4536 256.7568 465.6587 C
257.7964 468.6875 L
f*u
1 D
270.1138 466.8213 m
270.4678 469.2974 L
266.5605 469.8623 262.6943 470.7568 258.9517 472.0537 C
258.1401 469.688 L
260.1309 469.0562 L
259.5391 465.7954 260.0835 462.0625 262.4941 461.4648 C
264.9033 460.8901 267.1025 464.0166 268.0483 467.1309 C
270.1138 466.8213 L
f0 D
261.2119 468.7109 m
263.1123 468.2148 265.0068 467.6934 266.9414 467.3535 C
266.0762 464.7344 264.4155 462.1982 262.7725 462.6182 C
261.1279 463.0454 260.7832 465.9658 261.2119 468.7109 C
f*U
Uu268.3594 454.5376 m
268.7129 457.0137 L
273.3999 456.3618 278.1484 456.0684 282.8765 456.333 C
282.9941 453.8345 L
278.1094 453.5625 273.2036 453.8633 268.3594 454.5376 C
f269.9644 465.7739 m
269.4375 462.5356 271.3472 457.7241 275.835 457.4819 C
280.3213 457.2813 282.6763 461.9482 282.46 465.1724 C
282.6108 461.9736 L
282.7695 459.6211 280.3115 456.1289 275.7808 456.333 C
271.2485 456.5757 269.1245 460.2275 269.5117 462.604 C
269.9644 465.7739 L
f*u
1 D
282.4102 466.229 m
282.2925 468.7275 L
278.3418 468.4995 274.375 468.7568 270.4678 469.2974 C
270.1138 466.8213 L
272.1812 466.5386 L
272.2168 463.2827 273.4536 459.6758 275.9321 459.5444 C
278.4082 459.4604 279.9766 462.8682 280.3208 466.1704 C
282.4102 466.229 L
f0 D
273.3105 466.4438 m
275.2637 466.23 277.228 466.1987 279.1919 466.1445 C
278.834 463.3979 277.6836 460.6812 275.9878 460.7295 C
274.2905 460.7959 273.4072 463.6855 273.3105 466.4438 C
f*U
Uu282.9941 453.8345 m
282.8765 456.333 L
287.6045 456.5713 292.312 457.2412 296.917 458.3398 C
297.5034 455.9087 L
292.7451 454.7729 287.8794 454.0801 282.9941 453.8345 C
f282.46 465.1724 m
282.5488 461.8999 285.3311 457.5356 289.7817 458.1528 C
294.2251 458.8037 295.6729 463.7764 294.8418 466.9424 C
295.5928 463.8296 L
296.2026 461.5083 294.4321 457.6699 289.9443 457.0137 C
285.4492 456.3892 282.6748 459.5742 282.6108 461.9736 C
282.46 465.1724 L
f*u
1 D
294.5938 467.9707 m
294.0073 470.4023 L
290.1626 469.4873 286.2397 468.9292 282.2925 468.7275 C
282.4102 466.229 L
283.1074 466.228 283.7983 466.3198 284.4917 466.3711 C
285.1392 463.1763 287.0356 459.8037 289.4897 460.1968 C
291.9502 460.5029 292.8267 464.2764 292.5542 467.5215 C
293.2368 467.6592 293.9233 467.7783 294.5938 467.9707 C
f0 D
285.6216 466.4673 m
287.5742 466.6499 289.5225 466.9224 291.4473 467.2998 C
291.6172 464.5098 291.0054 461.5859 289.3218 461.3711 C
287.6426 461.1079 286.2383 463.7373 285.6216 466.4673 C
f*U
Uu297.5034 455.9087 m
296.917 458.3398 L
301.5283 459.4209 306.0117 461 310.3154 462.9399 C
311.3418 460.6592 L
306.8994 458.6567 302.2676 457.0264 297.5034 455.9087 C
f294.8418 466.9424 m
295.54 463.7739 299.1006 459.979 303.3594 461.4058 C
307.5879 462.9028 308.0811 468.0562 306.6855 471.0103 C
307.999 468.0898 L
309.0215 465.9253 308.0029 461.8281 303.7334 460.3179 C
299.4336 458.8755 296.1025 461.5137 295.5928 463.8296 C
294.8418 466.9424 L
f*u
1 D
306.251 471.9751 m
305.2246 474.2559 L
301.6084 472.6255 297.8574 471.2998 294.0073 470.4023 C
294.5938 467.9707 L
296.6152 468.4932 L
297.8706 465.417 300.3252 462.605 302.6895 463.3589 C
305.0146 464.2065 305.2158 467.9624 304.335 471.1279 C
306.251 471.9751 L
f0 D
297.708 468.7954 m
299.5869 469.3721 301.4541 469.9839 303.2803 470.7188 C
303.958 468.0352 303.9014 465.0488 302.3047 464.481 C
300.6855 463.9658 298.8203 466.2568 297.708 468.7954 C
f*U
Uu311.3418 460.6592 m
310.3154 462.9399 L
314.6201 464.8818 318.7432 467.2041 322.6367 469.8501 C
324.0498 467.7866 L
320.0371 465.0586 315.7852 462.6631 311.3418 460.6592 C
f306.6855 471.0103 m
307.9736 467.9932 312.1602 464.9512 316.0674 467.1343 C
319.9609 469.3286 319.5205 474.5073 317.6377 477.1523 C
319.4473 474.5098 L
320.8232 472.5767 320.5625 468.3457 316.6318 466.1318 C
312.6895 463.9272 308.9443 465.876 307.999 468.0898 C
306.6855 471.0103 L
f*u
1 D
317.04 478.0254 m
315.627 480.0894 L
312.3232 477.8462 308.8418 475.8887 305.2246 474.2559 C
306.251 471.9751 L
308.1484 472.8574 L
309.916 470.1333 312.9131 467.687 315.0547 468.9331 C
317.2168 470.1323 316.707 473.917 315.2783 476.8784 C
317.04 478.0254 L
f0 D
309.1641 473.3716 m
310.9385 474.2275 312.6318 475.2505 314.3232 476.2637 C
315.4883 473.709 315.9434 470.8081 314.4727 469.9673 C
313.0137 469.0981 310.7207 471.0854 309.1641 473.3716 C
f*U
Uu324.0498 467.7866 m
322.6367 469.8501 L
326.5254 472.5054 330.1514 475.5176 333.5303 478.7686 C
335.2676 476.9688 L
331.791 473.6235 328.0576 470.5229 324.0498 467.7866 C
f317.6377 477.1523 m
319.4092 474.4585 324.0977 472.1514 327.5469 474.9785 C
330.9814 477.8115 329.7031 482.812 327.3848 485.1357 C
329.6084 482.832 L
331.3105 481.1265 331.7412 476.9453 328.2754 474.0879 C
324.7969 471.2354 320.7373 472.5449 319.4473 474.5098 C
317.6377 477.1523 L
f*u
1 D
326.6504 485.8975 m
324.9131 487.6968 L
322.0186 484.9131 318.9277 482.3408 315.627 480.0894 C
317.04 478.0254 L
318.748 479.251 L
321.0059 476.8286 324.3203 475.019 326.2402 476.5771 C
328.1494 478.1377 327.0059 481.7837 325.1211 484.4414 C
326.6504 485.8975 L
f0 D
319.6777 479.915 m
321.2314 481.1411 322.7998 482.3501 324.2646 483.6895 C
325.8115 481.4038 326.8164 478.5464 325.4902 477.4956 C
324.1611 476.4434 321.6221 477.9224 319.6777 479.915 C
f*U
Uu335.2676 476.9688 m
333.5303 478.7686 L
336.8955 482.0317 340.042 485.5244 342.8271 489.2832 C
344.8252 487.7798 L
341.9639 483.9185 338.7295 480.3262 335.2676 476.9688 C
f327.3848 485.1357 m
329.6221 482.7393 334.5732 481.2891 337.5322 484.6035 C
340.46 487.9395 338.376 492.6958 335.7549 494.6021 C
338.3135 492.6772 L
340.2285 491.2852 341.3477 487.2056 338.3955 483.8423 C
335.4121 480.4995 331.25 481.0732 329.6084 482.832 C
327.3848 485.1357 L
f*u
1 D
334.9092 495.2383 m
332.9102 496.7417 L
330.5078 493.4917 327.7949 490.4937 324.9131 487.6968 C
326.6504 485.8975 L
328.1621 487.3691 L
330.7549 485.3887 334.3398 484.1304 335.9844 485.9692 C
337.5898 487.8354 335.9355 491.2012 333.6104 493.5645 C
334.9092 495.2383 L
f0 D
328.9463 488.2061 m
330.334 489.6279 331.6162 491.1489 332.9033 492.665 C
334.8047 490.6465 336.1924 488.04 335.0947 486.7544 C
333.9795 485.4805 331.1787 486.5737 328.9463 488.2061 C
f*U
Uu344.8252 487.7798 m
342.8271 489.2832 L
345.627 493.0288 348.1445 496.9761 350.3721 501.0771 C
352.5742 499.8916 L
350.2881 495.6821 347.7031 491.6284 344.8252 487.7798 C
f335.7549 494.6021 m
338.3408 492.5908 343.4492 491.9429 345.8457 495.6675 C
348.2148 499.4038 345.4854 503.7651 342.5801 505.2715 C
345.3994 503.7539 L
347.5303 502.6499 349.2051 498.814 346.8145 495.0483 C
344.4004 491.293 340.21 491.2017 338.3135 492.6772 C
335.7549 494.6021 L
f*u
1 D
341.6484 505.7729 m
339.4463 506.9585 L
337.5088 503.3975 335.3271 499.978 332.9102 496.7417 C
334.9092 495.2383 L
336.1523 496.9512 L
339.0234 495.4028 342.8115 494.6812 344.1055 496.7793 C
345.4551 498.835 343.2246 501.9595 340.6064 503.9229 C
341.6484 505.7729 L
f0 D
336.8145 497.8916 m
337.96 499.5205 339.0195 501.2134 340.0352 502.9282 C
342.2441 501.2061 344.0273 498.835 343.1055 497.418 C
342.2139 495.9795 339.2969 496.6128 336.8145 497.8916 C
f*U
Uu352.5742 499.8916 m
350.3721 501.0771 L
352.5947 505.1826 354.4619 509.4678 356.0674 513.8398 C
358.418 512.9868 L
356.7725 508.502 354.8564 504.106 352.5742 499.8916 C
f342.5801 505.2715 m
345.3965 503.6973 350.6104 503.7861 352.4004 507.8301 C
354.1836 511.8701 350.8525 515.7832 347.748 516.8579 C
350.7588 515.7661 L
353.0381 514.9771 355.249 511.4321 353.4502 507.3604 C
351.6475 503.2852 347.4541 502.6045 345.3994 503.7539 C
342.5801 505.2715 L
f*u
1 D
346.7539 517.2188 m
344.4023 518.0718 L
343.001 514.2588 341.3789 510.5239 339.4463 506.9585 C
341.6484 505.7729 L
342.6201 507.6597 L
345.7344 506.5391 349.5098 506.4253 350.5156 508.6724 C
351.5342 510.9067 348.8711 513.6714 346.0088 515.2266 C
346.7539 517.2188 L
f0 D
343.1494 508.6841 m
343.9824 510.4985 344.8613 512.2939 345.5762 514.1616 C
347.9746 512.7974 350.1621 510.6807 349.4316 509.1567 C
348.7227 507.6211 345.791 507.792 343.1494 508.6841 C
f*U
Uu358.418 512.9868 m
356.0674 513.8398 L
357.6855 518.2104 358.9248 522.7129 359.8779 527.2656 C
362.3252 526.7539 L
361.3496 522.0864 360.0781 517.4702 358.418 512.9868 C
f347.748 516.8579 m
350.7959 515.7012 355.8877 516.5586 357.1182 520.7993 C
358.291 525.0513 354.4424 528.4502 351.2158 529.0776 C
354.3506 528.4219 L
356.7197 527.9609 359.4072 524.769 358.2246 520.4854 C
356.9863 516.2124 352.9902 514.9185 350.7588 515.7661 C
347.748 516.8579 L
f*u
1 D
350.1807 529.2939 m
347.7324 529.8062 L
346.8984 525.8203 345.8184 521.8828 344.4023 518.0718 C
346.7539 517.2188 L
347.4629 519.2227 L
350.7178 518.561 354.4102 519.0127 355.1318 521.3633 C
355.7754 523.7305 352.8027 526.0732 349.7373 527.2104 C
350.1807 529.2939 L
f0 D
347.8223 520.3198 m
348.416 522.2305 348.9922 524.146 349.4521 526.0952 C
352.0313 525.082 354.4443 523.313 353.9902 521.6875 C
353.5 520.0693 350.5527 519.8232 347.8223 520.3198 C
f*U
Uu362.3252 526.7539 m
359.8779 527.2656 L
360.8525 531.8159 361.4834 536.437 361.7764 541.0752 C
364.2715 540.9053 L
363.9707 536.1543 363.3242 531.4185 362.3252 526.7539 C
f351.2158 529.0776 m
354.417 528.3604 359.3027 529.9326 359.9502 534.2944 C
360.502 538.665 356.2256 541.4971 352.9473 541.6748 C
356.1416 541.458 L
358.5488 541.3271 361.6465 538.5405 361.0898 534.1377 C
360.4385 529.7437 356.6992 527.896 354.3506 528.4219 C
351.2158 529.0776 L
f*u
1 D
351.8916 541.7466 m
349.3965 541.916 L
349.1416 537.8413 348.5879 533.7891 347.7324 529.8062 C
350.1807 529.2939 L
350.6133 531.3779 L
353.8906 531.1895 357.5156 532.1494 357.9053 534.5757 C
358.1855 537.0112 354.9473 538.9141 351.7471 539.6177 C
351.8916 541.7466 L
f0 D
350.7988 532.5195 m
351.1455 534.4932 351.4199 536.4771 351.6152 538.4727 C
354.3174 537.8262 356.9229 536.4131 356.7295 534.7368 C
356.4629 533.0679 353.5742 532.4121 350.7988 532.5195 C
f*U
Uu364.2715 540.9053 m
361.7764 541.0752 L
362.1123 545.7104 362.1123 550.3657 361.7764 555.001 C
364.2715 555.1709 L
364.6152 550.4214 364.6152 545.6548 364.2715 540.9053 C
f352.9473 541.6748 m
356.2236 541.4072 360.8359 543.6362 360.8857 548.0396 C
360.8359 552.4399 356.2236 554.6689 352.9473 554.4014 C
356.1416 554.6182 L
358.5479 554.8149 361.9873 552.4712 362.0361 548.0396 C
361.9873 543.6045 358.5479 541.2612 356.1416 541.458 C
352.9473 541.6748 L
f*u
1 D
351.8916 554.3296 m
349.3965 554.1602 L
349.6943 550.0889 349.6943 545.9873 349.3965 541.916 C
351.8916 541.7466 L
352.0352 543.873 L
355.3008 544.1382 358.7666 545.5845 358.8213 548.0396 C
358.7666 550.4893 355.3008 551.9355 352.0352 552.2007 C
351.8916 554.3296 L
f0 D
352.0605 545.0313 m
352.1367 547.0366 352.1367 549.042 352.0605 551.0474 C
354.8242 550.772 357.5967 549.7256 357.6348 548.0396 C
357.5967 546.3501 354.8242 545.3057 352.0605 545.0313 C
f*U
Uu364.2715 555.1709 m
361.7764 555.001 L
361.4834 559.6387 360.8525 564.2603 359.8779 568.8105 C
362.3262 569.3223 L
363.3242 564.6577 363.9707 559.9219 364.2715 555.1709 C
f352.9473 554.4014 m
356.2256 554.5791 360.502 557.4111 359.9502 561.7842 C
359.3027 566.1436 354.417 567.7158 351.2158 566.9985 C
354.3506 567.6543 L
356.6992 568.1802 360.4385 566.3325 361.0898 561.9409 C
361.6465 557.5356 358.5488 554.749 356.1416 554.6182 C
352.9473 554.4014 L
f*u
1 D
350.1807 566.7822 m
347.7324 566.27 L
348.5889 562.2871 349.1416 558.2349 349.3965 554.1602 C
351.8916 554.3296 L
351.748 556.4561 L
354.9473 557.1597 358.1855 559.0625 357.9043 561.5034 C
357.5156 563.9243 353.8916 564.8838 350.6133 564.6958 C
350.1807 566.7822 L
f0 D
351.6152 557.606 m
351.4189 559.6016 351.1455 561.5854 350.7988 563.5586 C
353.5742 563.6655 356.4629 563.0078 356.7295 561.3418 C
356.9229 559.6631 354.3164 558.2515 351.6152 557.606 C
f*U
Uu362.3262 569.3223 m
359.8779 568.8105 L
358.9258 573.3633 357.6855 577.8657 356.0674 582.2363 C
358.418 583.0894 L
360.0781 578.606 361.3496 573.9897 362.3262 569.3223 C
f351.2158 566.9985 m
354.4424 567.626 358.291 571.0249 357.1172 575.2793 C
355.8877 579.5176 350.7959 580.375 347.748 579.2183 C
350.7588 580.3101 L
352.9902 581.1577 356.9863 579.8638 358.2236 575.5933 C
359.4072 571.3071 356.7197 568.1147 354.3506 567.6543 C
351.2158 566.9985 L
f*u
1 D
346.7539 578.8574 m
344.4023 578.0044 L
345.8184 574.1934 346.8984 570.2559 347.7324 566.27 C
350.1807 566.7822 L
349.7373 568.8633 L
352.8027 570.0005 355.7764 572.3433 355.1309 574.7153 C
354.4102 577.0605 350.7188 577.5127 347.4639 576.8511 C
346.7539 578.8574 L
f0 D
349.4512 569.9834 m
348.9912 571.9326 348.416 573.8481 347.8223 575.7583 C
350.5527 576.2539 353.5 576.0068 353.9902 574.3911 C
354.4443 572.7632 352.0303 570.9951 349.4512 569.9834 C
f*U
Uu358.418 583.0894 m
356.0674 582.2363 L
354.4619 586.6084 352.5947 590.8936 350.3721 594.999 C
352.5742 596.1846 L
354.8564 591.9702 356.7725 587.5742 358.418 583.0894 C
f347.748 579.2183 m
350.8525 580.293 354.1836 584.2061 352.3994 588.2485 C
350.6104 592.29 345.3965 592.3789 342.5801 590.8047 C
345.3994 592.3223 L
347.4541 593.4717 351.6475 592.791 353.4492 588.7178 C
355.249 584.6445 353.0371 581.0991 350.7588 580.3101 C
347.748 579.2183 L
f*u
1 D
341.6484 590.3032 m
339.4463 589.1177 L
341.3789 585.5522 343.001 581.8174 344.4023 578.0044 C
346.7539 578.8574 L
346.0098 580.8472 L
348.8721 582.4023 351.5352 585.167 350.5137 587.4058 C
349.5107 589.6484 345.7354 589.5352 342.6211 588.4146 C
341.6484 590.3032 L
f0 D
345.5752 581.9165 m
344.8613 583.7847 343.9814 585.5801 343.1484 587.394 C
345.791 588.2852 348.7227 588.4546 349.4307 586.9219 C
350.1621 585.3955 347.9736 583.2798 345.5752 581.9165 C
f*U
Uu352.5742 596.1846 m
350.3721 594.999 L
348.1445 599.1001 345.627 603.0469 342.8271 606.793 C
344.8252 608.2964 L
347.7031 604.4478 350.2881 600.394 352.5742 596.1846 C
f342.5801 590.8047 m
345.4854 592.311 348.2158 596.6724 345.8438 600.4106 C
343.4492 604.1333 338.3408 603.4854 335.7549 601.4741 C
338.3135 603.3989 L
340.21 604.8745 344.4004 604.7832 346.8135 601.0303 C
349.2051 597.2622 347.5293 593.4263 345.3994 592.3223 C
342.5801 590.8047 L
f*u
1 D
334.9092 600.8379 m
332.9102 599.3345 L
335.3271 596.0981 337.5088 592.6787 339.4463 589.1177 C
341.6484 590.3032 L
340.6074 592.1509 L
343.2266 594.1143 345.457 597.2393 344.1045 599.2988 C
342.8135 601.3926 339.0254 600.6714 336.1533 599.123 C
334.9092 600.8379 L
f0 D
340.0342 593.1504 m
339.0186 594.8647 337.959 596.5576 336.8135 598.1865 C
339.2959 599.4644 342.2139 600.0967 343.1045 598.6602 C
344.0273 597.2412 342.2432 594.8711 340.0342 593.1504 C
f*U
Uu344.8252 608.2964 m
342.8271 606.793 L
340.042 610.5518 336.8955 614.0444 333.5303 617.3076 C
335.2676 619.1074 L
338.7295 615.75 341.9639 612.1577 344.8252 608.2964 C
f335.7549 601.4741 m
338.376 603.3804 340.46 608.1367 337.5313 611.4746 C
334.5732 614.7871 329.6221 613.3369 327.3848 610.9404 C
329.6084 613.2446 L
331.25 615.0029 335.4121 615.5762 338.3936 612.2358 C
341.3477 608.8706 340.2285 604.791 338.3135 603.3989 C
335.7549 601.4741 L
f*u
1 D
326.6504 610.1792 m
324.9131 608.3794 L
327.7949 605.5825 330.5078 602.5845 332.9102 599.3345 C
334.9092 600.8379 L
333.6123 602.5098 L
335.9375 604.873 337.5918 608.2388 335.9824 610.1089 C
334.3418 611.9434 330.7568 610.6855 328.1631 608.7056 C
326.6504 610.1792 L
f0 D
332.9014 603.4131 m
331.6143 604.9292 330.333 606.4502 328.9443 607.8721 C
331.1777 609.5034 333.9795 610.5957 335.0928 609.3237 C
336.1924 608.0361 334.8037 605.4307 332.9014 603.4131 C
f*U
Uu335.2676 619.1074 m
333.5303 617.3076 L
330.1523 620.5586 326.5254 623.5708 322.6367 626.2261 C
324.0498 628.29 L
328.0576 625.5537 331.791 622.4526 335.2676 619.1074 C
f327.3848 610.9404 m
329.7031 613.2642 330.9824 618.2646 327.5449 621.0996 C
324.0986 623.9248 319.4092 621.6182 317.6377 618.9243 C
319.4473 621.5664 L
320.7373 623.5313 324.7969 624.8408 328.2734 621.9902 C
331.7412 619.1309 331.3105 614.9497 329.6084 613.2446 C
327.3848 610.9404 L
f*u
1 D
317.04 618.0513 m
315.6279 615.9873 L
318.9277 613.7354 322.0195 611.1636 324.9131 608.3794 C
326.6504 610.1792 L
325.123 611.6338 L
327.0078 614.291 328.1523 617.937 326.2393 619.501 C
324.3223 621.0557 321.0088 619.2461 318.751 616.8242 C
317.04 618.0513 L
f0 D
324.2627 612.3882 m
322.7988 613.7275 321.2295 614.9365 319.6758 616.1626 C
321.6211 618.1553 324.1611 619.6328 325.4883 618.582 C
326.8164 617.5298 325.8115 614.6733 324.2627 612.3882 C
f*U
Uu324.0498 628.29 m
322.6367 626.2261 L
318.7441 628.8726 314.6211 631.1943 310.3164 633.1367 C
311.3418 635.4175 L
315.7852 633.4131 320.0381 631.0176 324.0498 628.29 C
f317.6377 618.9243 m
319.5205 621.5693 319.9609 626.748 316.0654 628.9434 C
312.1611 631.125 307.9746 628.0835 306.6855 625.0664 C
307.999 627.9868 L
308.9443 630.2007 312.6895 632.1489 316.6299 629.9463 C
320.5635 627.7305 320.8242 623.4995 319.4473 621.5664 C
317.6377 618.9243 L
f*u
1 D
306.251 624.1016 m
305.2256 621.8208 L
308.8428 620.188 312.3232 618.2305 315.6279 615.9873 C
317.04 618.0513 L
315.2803 619.1968 L
316.709 622.1582 317.2197 625.9429 315.0527 627.1445 C
312.916 628.3887 309.918 625.9424 308.1514 623.2183 C
306.251 624.1016 L
f0 D
314.3213 619.8145 m
312.6299 620.8271 310.9375 621.8501 309.1621 622.7061 C
310.7197 624.9917 313.0137 626.9785 314.4707 626.1108 C
315.9434 625.2686 315.4873 622.3682 314.3213 619.8145 C
f*U
Uu311.3418 635.4175 m
310.3164 633.1367 L
306.0127 635.0767 301.5283 636.6558 296.9175 637.7368 C
297.5039 640.1685 L
302.2686 639.0503 306.9004 637.4199 311.3418 635.4175 C
f306.6855 625.0664 m
308.0811 628.0205 307.5879 633.1738 303.3574 634.6719 C
299.1016 636.0977 295.5405 632.3027 294.8423 629.1348 C
295.5933 632.2476 L
296.103 634.563 299.4346 637.2012 303.7314 635.7598 C
308.0039 634.249 309.0225 630.1514 307.999 627.9868 C
306.6855 625.0664 L
f*u
1 D
294.5942 628.106 m
294.0078 625.6748 L
297.8579 624.7769 301.6084 623.4512 305.2256 621.8208 C
306.251 624.1016 L
304.3369 624.9478 L
305.2188 628.1138 305.0176 631.8691 302.6875 632.7188 C
300.3281 633.4712 297.8735 630.6597 296.6177 627.583 C
294.5942 628.106 L
f0 D
303.2783 625.3589 m
301.4521 626.0938 299.585 626.7056 297.7061 627.2822 C
298.8193 629.8203 300.6865 632.1108 302.3027 631.5967 C
303.9023 631.0283 303.957 628.042 303.2783 625.3589 C
f*U
Uu297.5039 640.1685 m
296.9175 637.7368 L
292.3125 638.8354 287.605 639.5059 282.877 639.7441 C
282.9951 642.2427 L
287.8804 641.9971 292.7461 641.3042 297.5039 640.1685 C
f294.8423 629.1348 m
295.6733 632.3008 294.2256 637.2734 289.7793 637.9248 C
285.3315 638.541 282.5493 634.1772 282.4604 630.9048 C
282.6113 634.1035 L
282.6753 636.5029 285.4502 639.6875 289.9419 639.0635 C
294.4326 638.4072 296.2031 634.5684 295.5933 632.2476 C
294.8423 629.1348 L
f*u
1 D
282.4106 629.8481 m
282.293 627.3496 L
286.2402 627.1479 290.1631 626.5898 294.0078 625.6748 C
294.5942 628.106 L
293.9248 628.2983 293.2388 628.4175 292.5566 628.5552 C
292.8296 631.7998 291.9536 635.5737 289.4873 635.8809 C
287.0391 636.2729 285.1421 632.9009 284.4946 629.7056 C
283.8003 629.7568 283.1084 629.8491 282.4106 629.8481 C
f0 D
291.4453 628.7778 m
289.5205 629.1548 287.5723 629.4277 285.6196 629.6099 C
286.2378 632.3398 287.6431 634.9692 289.3198 634.7061 C
291.0059 634.4912 291.6167 631.5674 291.4453 628.7778 C
f*U
Uu282.9951 642.2427 m
282.877 639.7441 L
278.1489 640.0088 273.4004 639.7153 268.7134 639.0635 C
268.3599 641.5396 L
273.2041 642.2139 278.1099 642.5146 282.9951 642.2427 C
f282.4604 630.9048 m
282.6768 634.1289 280.3218 638.7959 275.8325 638.5952 C
271.3477 638.353 269.438 633.5415 269.9648 630.3032 C
269.5122 633.4731 L
269.125 635.8496 271.249 639.5015 275.7783 639.7441 C
280.312 639.9482 282.77 636.4561 282.6113 634.1035 C
282.4604 630.9048 L
f*u
1 D
270.1143 629.2559 m
270.4683 626.7798 L
274.3755 627.3203 278.3423 627.5776 282.293 627.3496 C
282.4106 629.8481 L
280.3237 629.9067 L
279.9795 633.2085 278.4116 636.6167 275.9297 636.5327 C
273.4565 636.4014 272.2197 632.7949 272.1836 629.5386 C
270.1143 629.2559 L
f0 D
279.1899 629.9326 m
277.2266 629.8789 275.2617 629.8472 273.3091 629.6328 C
273.4063 632.3916 274.291 635.2813 275.9858 635.3477 C
277.6841 635.396 278.833 632.6792 279.1899 629.9326 C
f*U
Uu268.3599 641.5396 m
268.7134 639.0635 L
264.0288 638.3877 259.3955 637.3071 254.9243 635.7598 C
254.1128 638.1255 L
258.7305 639.7231 263.5186 640.8413 268.3599 641.5396 C
f269.9648 630.3032 m
269.5645 633.5601 266.3828 637.6479 262.0078 636.6187 C
257.6416 635.5654 256.6909 630.415 257.7969 627.3896 C
256.7578 630.4185 L
255.9507 632.623 257.3281 636.6748 261.7383 637.7368 C
266.1558 638.7778 269.2183 635.8633 269.5122 633.4731 C
269.9648 630.3032 L
f*u
1 D
258.1406 626.3892 m
258.9526 624.0234 L
262.6953 625.3203 266.561 626.2148 270.4683 626.7798 C
270.1143 629.2559 L
268.0513 628.9468 L
267.1055 632.061 264.9067 635.1875 262.4922 634.6113 C
260.0864 634.0151 259.542 630.2827 260.1338 627.0215 C
258.1406 626.3892 L
f0 D
266.9399 628.7236 m
265.0049 628.3833 263.1104 627.8618 261.2104 627.3652 C
260.7822 630.1113 261.1284 633.0317 262.7705 633.458 C
264.416 633.8789 266.0757 631.3428 266.9399 628.7236 C
f*U
Uu254.1128 638.1255 m
254.9243 635.7598 L
250.4556 634.209 246.1367 632.2544 242.0259 629.9458 C
240.7988 632.1255 L
245.0386 634.5063 249.4971 636.5244 254.1128 638.1255 C
f257.7969 627.3896 m
256.8037 630.4858 252.9014 633.9224 248.8115 632.0874 C
244.7349 630.2358 244.7065 625.062 246.3672 622.2349 C
244.7964 625.0254 L
243.5771 627.0991 244.2231 631.2681 248.3398 633.1362 C
252.4678 634.9902 256.0322 632.6836 256.7578 630.4185 C
257.7969 627.3896 L
f*u
1 D
246.8862 621.3125 m
248.1133 619.1333 L
251.5835 621.0811 255.2119 622.7227 258.9526 624.0234 C
258.1406 626.3892 L
256.1807 625.6626 L
254.6563 628.5732 251.9136 631.2393 249.6587 630.2041 C
247.3867 629.2236 247.582 625.3564 248.7271 622.3188 C
246.8862 621.3125 L
f0 D
255.1182 625.2607 m
253.3037 624.5063 251.481 623.7529 249.7388 622.8301 C
248.8218 625.4404 248.582 628.4644 250.1455 629.1226 C
251.6978 629.8105 253.7607 627.7188 255.1182 625.2607 C
f*U
Uu240.7988 632.1255 m
242.0259 629.9458 L
237.915 627.6387 234.0034 624.9839 230.3823 621.9897 C
228.7993 623.9268 L
232.5283 627.0088 236.5591 629.7456 240.7988 632.1255 C
f246.3672 622.2349 m
244.8164 625.1108 240.3784 627.7671 236.6685 625.2764 C
233.0063 622.7285 233.8828 617.6187 235.9824 615.1382 C
233.9561 617.6177 L
232.4204 619.4316 232.3223 623.6553 236.0186 626.2256 C
239.7612 628.7397 243.6602 627.1328 244.7964 625.0254 C
246.3672 622.2349 L
f*u
1 D
236.6519 614.3188 m
238.2349 612.3823 L
241.3213 614.9395 244.6426 617.1865 248.1133 619.1333 C
246.8862 621.3125 L
245.0654 620.271 L
243.0381 622.8633 239.9033 624.9307 237.835 623.5728 C
235.8286 622.1338 236.606 618.4858 238.3013 615.6304 C
236.6519 614.3188 L
f0 D
244.1006 619.6636 m
242.4194 618.6265 240.8008 617.4922 239.2046 616.3228 C
237.8447 618.7397 237.1289 621.6074 238.5054 622.5938 C
239.916 623.5347 242.3442 621.8047 244.1006 619.6636 C
f*U
Uu228.7993 623.9268 m
230.3823 621.9897 L
226.7515 619.0083 223.3711 615.7383 220.2622 612.2354 C
218.3867 613.8901 L
221.583 617.4922 225.0605 620.8569 228.7993 623.9268 C
f235.9824 615.1382 m
233.9546 617.7109 229.1348 619.5601 225.9243 616.4795 C
222.7373 613.3828 224.4087 608.5054 226.8979 606.3809 C
224.4966 608.4995 L
222.6714 610.0566 221.9102 614.1846 225.1255 617.3071 C
228.3623 620.4146 232.4692 619.5049 233.9561 617.6177 C
235.9824 615.1382 L
f*u
1 D
227.6914 605.6812 m
229.5669 604.0264 L
232.2422 607.0381 235.1396 609.8389 238.2349 612.3823 C
236.6519 614.3188 L
235.0439 612.9595 L
232.626 615.1421 229.1064 616.7397 227.3584 614.9941 C
225.562 613.3057 227.0195 609.7461 229.1191 607.2402 C
227.6914 605.6812 L
f0 D
234.1836 612.2041 m
232.6934 610.8989 231.2759 609.5039 229.9009 608.0732 C
228.145 610.2549 226.9531 612.9771 228.1821 614.1401 C
229.3848 615.335 232.0752 614.0313 234.1836 612.2041 C
f*U
Uu218.3867 613.8901 m
220.2622 612.2354 L
217.1392 608.7422 214.3682 604.9565 211.8428 601.0298 C
209.7354 602.3765 L
212.3281 606.4092 215.1763 610.2979 218.3867 613.8901 C
f226.8979 606.3809 m
224.5063 608.5635 219.4199 609.644 216.7485 606.1011 C
214.1045 602.5459 216.5063 597.9902 219.2998 596.2646 C
216.6011 597.9893 L
214.5508 599.2554 213.1621 603.2085 215.8291 606.7925 C
218.5215 610.3647 222.7505 610.0938 224.4966 608.4995 C
226.8979 606.3809 L
f*u
1 D
220.1909 595.6953 m
222.2988 594.3486 L
224.4873 597.7485 226.8774 601.0244 229.5669 604.0264 C
227.6914 605.6812 L
226.3188 604.0728 L
223.5361 605.8726 219.8999 606.8164 218.3989 604.8599 C
216.9282 602.8887 218.8862 599.6245 221.3428 597.4766 C
220.1909 595.6953 L
f0 D
225.5762 603.1968 m
224.356 601.6245 223.1182 600.0659 222.0029 598.4131 C
219.959 600.2749 218.3203 602.8047 219.3467 604.147 C
220.3843 605.4844 223.2158 604.6514 225.5762 603.1968 C
f*U
Uu209.7354 602.3765 m
211.8428 601.0298 L
209.3296 597.0942 207.0815 592.9873 205.207 588.7173 C
202.9233 589.7383 L
204.8472 594.1187 207.1543 598.335 209.7354 602.3765 C
f219.2998 596.2646 m
216.5635 598.0732 211.4229 598.335 209.2969 594.4531 C
207.2217 590.5488 210.2954 586.3896 213.2856 585.106 C
210.3623 586.4131 L
208.1743 587.3516 206.1914 591.0635 208.2842 594.998 C
210.4253 598.9111 214.5938 599.3159 216.6011 597.9893 C
219.2998 596.2646 L
f*u
1 D
214.2515 584.6743 m
216.5352 583.6533 L
218.1636 587.374 220.1221 590.939 222.2988 594.3486 C
220.1909 595.6953 L
219.0557 593.9058 L
216.0698 595.2339 212.3057 595.6294 211.1152 593.4746 C
209.9922 591.2896 212.3403 588.3926 215.1382 586.6064 C
214.2515 584.6743 L
f0 D
218.4824 592.9063 m
217.4575 591.1938 216.5396 589.4214 215.6362 587.6411 C
213.3291 589.1831 211.3857 591.4106 212.1597 592.9121 C
212.9673 594.3984 215.9307 593.9824 218.4824 592.9063 C
f*U
Uu202.9233 589.7383 m
205.207 588.7173 L
203.3228 584.4541 201.6997 580.0747 200.4326 575.5928 C
198.0264 576.2759 L
199.3262 580.8716 200.9897 585.3638 202.9233 589.7383 C
f213.2856 585.106 m
210.3091 586.4907 205.1943 585.9888 203.6709 581.8428 C
202.1406 577.7017 205.833 574.0083 208.9453 573.1758 C
205.8647 574.0503 L
203.5962 574.6567 201.0469 578.0625 202.5894 582.2354 C
204.1235 586.4131 208.1777 587.4297 210.3623 586.4131 C
213.2856 585.106 L
f*u
1 D
209.9629 572.8867 m
212.3691 572.2036 L
213.4761 576.1211 214.8965 579.9399 216.5352 583.6533 C
214.2515 584.6743 L
213.4087 582.7251 L
210.272 583.5947 206.4204 583.4624 205.6118 581.1387 C
204.7676 578.833 207.5703 576.2861 210.582 574.9238 C
209.9629 572.8867 L
f0 D
212.9751 581.6558 m
212.1885 579.8179 211.5771 577.9102 210.915 576.0249 C
208.3853 577.2271 206.1704 579.1406 206.7271 580.7344 C
207.2671 582.3374 210.2949 582.3447 212.9751 581.6558 C
f*U
Uu198.0264 576.2759 m
200.4326 575.5928 L
199.1821 571.1069 198.2295 566.5444 197.5669 561.9399 C
195.0889 562.2803 L
195.7671 566.9995 196.7437 571.6763 198.0264 576.2759 C
f208.9453 573.1758 m
205.8086 574.1172 200.8228 572.8872 199.9053 568.5742 C
198.9932 564.2617 203.1284 561.1279 206.3335 560.7354 C
203.1611 561.1714 L
200.8228 561.457 197.8594 564.4653 198.7788 568.8096 C
199.7026 573.1553 203.5649 574.7412 205.8647 574.0503 C
208.9453 573.1758 L
f*u
1 D
207.3818 560.5918 m
209.8594 560.251 L
210.4443 564.2881 211.2788 568.2817 212.3691 572.2036 C
209.9629 572.8867 L
209.4209 570.8301 L
206.1812 571.2446 202.3901 570.5664 201.9258 568.1514 C
201.397 565.7554 204.5703 563.6201 207.7202 562.6963 C
207.3818 560.5918 L
f0 D
209.1353 569.71 m
208.644 567.771 208.2603 565.8027 207.9023 563.834 C
205.2261 564.6704 202.7368 566.2573 203.0874 567.9082 C
203.4111 569.5684 206.3569 570.0166 209.1353 569.71 C
f*U
Uu195.0889 562.2803 m
197.5669 561.9399 L
196.9644 557.3276 196.6558 552.6841 196.6201 548.0386 C
194.1191 548.0386 L
194.1543 552.7969 194.4707 557.5537 195.0889 562.2803 C
f206.3335 560.7354 m
203.1382 561.2231 198.3179 559.3179 198.0283 554.9224 C
197.7246 550.5317 202.2373 547.9922 205.4692 548.0386 C
202.2671 548.0386 L
199.9082 548.0044 196.5742 550.5776 196.8809 555.0005 C
197.1719 559.4277 200.8291 561.5283 203.1611 561.1714 C
206.3335 560.7354 L
f*u
1 D
206.5273 548.0386 m
209.0283 548.0386 L
209.064 552.1265 209.335 556.2051 209.8594 560.251 C
207.3818 560.5918 L
207.1406 558.4751 L
203.8618 558.4355 200.2231 557.2363 200.0884 554.7822 C
199.8882 552.3389 203.3369 550.6582 206.5771 550.1729 C
206.5273 548.0386 L
f0 D
207.0093 557.3252 m
206.813 555.332 206.6709 553.3296 206.603 551.3262 C
203.8394 551.7891 201.1426 553.0195 201.272 554.7021 C
201.376 556.3887 204.2075 557.2432 207.0093 557.3252 C
f*U
UU(Adobe PatternOnPath Brush Tool) 1 0 35 XP
%040302010000803F0000000000010001000000005061747465726E204272
%7573682031
/Adobe_Brushed_Path () XT
u%_0 R
%_0 0 0 1 (orn) 0 0 XK
%_2.3333 w 1 M%_242.9028 550.0186 m
%_319.1855 550.0186 l
%_S%_U%_0 Ap
0 A
u800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
242.9028 550.0186 m
319.1855 550.0186 l
Nu0 O
0 0 0 1 (orn) 0 0 Xk
242.9028 543.4038 m
242.9028 545.623 L
255.6167 545.623 L
255.6167 543.4038 L
242.9028 543.4038 L
f242.9028 553.4751 m
242.9028 550.5679 245.2593 546.644 249.2607 546.644 C
253.2598 546.644 255.6167 550.5679 255.6167 553.4751 C
255.6167 550.6338 L
255.6167 548.501 253.2598 545.623 249.2607 545.623 C
245.2593 545.623 242.9028 548.501 242.9028 550.6338 C
242.9028 553.4751 L
f*u
1 D
255.6167 554.4141 m
255.6167 556.6333 L
242.9028 556.6333 L
242.9028 554.4141 L
245.0552 554.4141 L
245.4907 551.52 246.9736 548.4761 249.2607 548.4761 C
251.5435 548.4761 253.0264 551.52 253.4619 554.4141 C
255.6167 554.4141 L
f0 D
246.2241 554.4141 m
252.2979 554.4141 L
251.918 551.9668 250.8545 549.5288 249.2607 549.5288 C
247.6646 549.5288 246.6025 551.9668 246.2241 554.4141 C
f*U
Uu255.6167 543.4038 m
255.6167 545.623 L
268.3306 545.623 L
268.3306 543.4038 L
255.6167 543.4038 L
f255.6167 553.4751 m
255.6167 550.5679 257.9731 546.644 261.9746 546.644 C
265.9736 546.644 268.3306 550.5679 268.3306 553.4751 C
268.3306 550.6338 L
268.3306 548.501 265.9736 545.623 261.9746 545.623 C
257.9731 545.623 255.6167 548.501 255.6167 550.6338 C
255.6167 553.4751 L
f*u
1 D
268.3306 554.4141 m
268.3306 556.6333 L
255.6167 556.6333 L
255.6167 554.4141 L
257.769 554.4141 L
258.2046 551.52 259.6875 548.4761 261.9746 548.4761 C
264.2573 548.4761 265.7402 551.52 266.1758 554.4141 C
268.3306 554.4141 L
f0 D
258.938 554.4141 m
265.0112 554.4141 L
264.6318 551.9668 263.5684 549.5288 261.9746 549.5288 C
260.3784 549.5288 259.3164 551.9668 258.938 554.4141 C
f*U
Uu268.3306 543.4038 m
268.3306 545.623 L
281.0439 545.623 L
281.0439 543.4038 L
268.3306 543.4038 L
f268.3306 553.4751 m
268.3306 550.5679 270.687 546.644 274.6885 546.644 C
278.6875 546.644 281.0439 550.5679 281.0439 553.4751 C
281.0439 550.6338 L
281.0439 548.501 278.6875 545.623 274.6885 545.623 C
270.687 545.623 268.3306 548.501 268.3306 550.6338 C
268.3306 553.4751 L
f*u
1 D
281.0439 554.4141 m
281.0439 556.6333 L
268.3306 556.6333 L
268.3306 554.4141 L
270.4824 554.4141 L
270.918 551.52 272.4014 548.4761 274.6885 548.4761 C
276.9707 548.4761 278.4541 551.52 278.8896 554.4141 C
281.0439 554.4141 L
f0 D
271.6519 554.4141 m
277.7251 554.4141 L
277.3457 551.9668 276.2822 549.5288 274.6885 549.5288 C
273.0923 549.5288 272.0303 551.9668 271.6519 554.4141 C
f*U
Uu281.0439 543.4038 m
281.0439 545.623 L
293.7578 545.623 L
293.7578 543.4038 L
281.0439 543.4038 L
f281.0439 553.4751 m
281.0439 550.5679 283.4009 546.644 287.4023 546.644 C
291.4014 546.644 293.7578 550.5679 293.7578 553.4751 C
293.7578 550.6338 L
293.7578 548.501 291.4014 545.623 287.4023 545.623 C
283.4009 545.623 281.0439 548.501 281.0439 550.6338 C
281.0439 553.4751 L
f*u
1 D
293.7578 554.4141 m
293.7578 556.6333 L
281.0439 556.6333 L
281.0439 554.4141 L
283.1963 554.4141 L
283.6318 551.52 285.1152 548.4761 287.4023 548.4761 C
289.6846 548.4761 291.168 551.52 291.6035 554.4141 C
293.7578 554.4141 L
f0 D
284.3657 554.4141 m
290.439 554.4141 L
290.0596 551.9668 288.9961 549.5288 287.4023 549.5288 C
285.8062 549.5288 284.7441 551.9668 284.3657 554.4141 C
f*U
Uu293.7578 543.4038 m
293.7578 545.623 L
306.4717 545.623 L
306.4717 543.4038 L
293.7578 543.4038 L
f293.7578 553.4751 m
293.7578 550.5679 296.1147 546.644 300.1162 546.644 C
304.1152 546.644 306.4717 550.5679 306.4717 553.4751 C
306.4717 550.6338 L
306.4717 548.501 304.1152 545.623 300.1162 545.623 C
296.1147 545.623 293.7578 548.501 293.7578 550.6338 C
293.7578 553.4751 L
f*u
1 D
306.4717 554.4141 m
306.4717 556.6333 L
293.7578 556.6333 L
293.7578 554.4141 L
295.9102 554.4141 L
296.3457 551.52 297.8286 548.4761 300.1162 548.4761 C
302.3984 548.4761 303.8818 551.52 304.3174 554.4141 C
306.4717 554.4141 L
f0 D
297.0796 554.4141 m
303.1523 554.4141 L
302.7734 551.9668 301.71 549.5288 300.1162 549.5288 C
298.5195 549.5288 297.4575 551.9668 297.0796 554.4141 C
f*U
Uu306.4717 543.4038 m
306.4717 545.623 L
319.1855 545.623 L
319.1855 543.4038 L
306.4717 543.4038 L
f306.4717 553.4751 m
306.4717 550.5679 308.8281 546.644 312.8301 546.644 C
316.8291 546.644 319.1855 550.5679 319.1855 553.4751 C
319.1855 550.6338 L
319.1855 548.501 316.8291 545.623 312.8301 545.623 C
308.8281 545.623 306.4717 548.501 306.4717 550.6338 C
306.4717 553.4751 L
f*u
1 D
319.1855 554.4141 m
319.1855 556.6333 L
306.4717 556.6333 L
306.4717 554.4141 L
308.624 554.4141 L
309.0596 551.52 310.543 548.4761 312.8301 548.4761 C
315.1123 548.4761 316.5957 551.52 317.0313 554.4141 C
319.1855 554.4141 L
f0 D
309.793 554.4141 m
315.8662 554.4141 L
315.4873 551.9668 314.4238 549.5288 312.8301 549.5288 C
311.2334 549.5288 310.1719 551.9668 309.793 554.4141 C
f*U
UU(Adobe PatternOnPath Brush Tool) 1 0 35 XP
%040302010000803F0000000000010001000000005061747465726E204272
%7573682031
/Adobe_Brushed_Path () XT
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
