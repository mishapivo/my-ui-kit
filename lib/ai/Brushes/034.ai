%!PS-Adobe-3.0 
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 8.0.1
%%For: (S ) ( )
%%Title: (034.ai)
%%CreationDate: (10/26/2005) (4:07 PM)
%%BoundingBox: 39 370 308 639
%%HiResBoundingBox: 39.7627 370.8652 307.4502 638.5532
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%DocumentCustomColors: (metal)
%%CMYKCustomColor: 0 0 0 1 (metal)
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 298.5 420.3887 298.5 420.3887
%AI3_TileBox: 16 16 576 820
%AI3_DocumentPreview: None
%AI5_ArtSize: 595.2756 841.8898
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -309 835.8887 1 1012 723 18 1 1 7 63 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:16 16
%%AI3_PaperRect:-16 824 579 -18
%%AI3_Margin:16 -20 -18 18
%AI7_GridSettings: 14.1732 5 14.1732 5 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI7_Thumbnail: 128 128 8
%%BeginData: 12650 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD3BFF7D52FD05F82727A8FD74FF7DF82752A8FFA8A8FF7D7DF8F8
%52FD68FF7D27F8527DFD04FF27F8A8FFFFFFA8F8277DFFFFFF7D2727FFFF
%FFA87D27F8277DFD5CFFA8F8F852A87D27F852A82727FD05FF27F8F852FD
%04FFA82727A852F8277D7D7DF8277DFD57FF7D5227F87DFFFFFFA8F85227
%F827FFFF52F852FF7DF8F852FF52F827FFFF27F82727277DFFFFFF522727
%5252FD52FFA8FFA852F8277DFFA852F87DFF7DF8FFFF52F8F8F8277D7D52
%A8FD04F852FFA8F87DFF7DF827FFA87DF8F852A8FFFFA8FD4CFF7DFF52F8
%2752A8FF7D27F8F827A8FFFFF8A8FFA8FD05F852527D52FD05F87DFF7D27
%A8FFA827F8F8277DA8FF5227F852FFA8FD48FFA8277DA8FD04F827FD08FF
%5227FFFF7DFD04F8527DF8F87D27FD04F87DFFFF2752FD08FF27FD04F8FF
%5227A8FD44FF7D52F8F8A852FD05F8FF272752FFFFFFA8F8A8FD04FF7DF8
%527DFD04F8A8522752FD04FFA8F8FFFFFFA87D2727FFFD05F852FFF8F827
%7DA8FD3EFFA827F827525227FF27FD04F85252FD04F87DFF5227FFFF7D27
%2752FFFF52FD04F827FFFF7D27277DFFFF5227FF7DFD04F87D27FD04F827
%FF52277D27F827A8FD3BFFA82752FFFFFFF8A8FFA8FD04F8A827F8F8F827
%FFFFF8FFFF52F8527D2727FF52FD04F87DA827F87D52F852FFA8F8A8FFFD
%05F8A8F8F8F827A8FF7D27A8FFA852F8FD3BFF5227FFFFFF2727FF5252A8
%7D52277DFD04F852FF27F8F827F8A8FFFFFF52F8A827F8F8277DF827FFFF
%FF7D27F827F827FF7DFD04F87D27277D525252FF2752FFFFFF2752FD3AFF
%F87D5252F827A87DF8F8F8277DA87DFF7D5227FF7D27FF7DF852A8FF7D27
%F852F8FF2752FFFD04277DA8A8272752FFF8A8FF52277DFFA8A8A827F8F8
%F87DFFF827277D5227FD39FF7DF8F85252A8FFFFFD05F8A8F8F827FFFFFF
%A8F87DFFFFFF52F8F8277DFFFFFFA8FFA8FD04FF7D27F8F852A8FFFF7DF8
%A8FFFFFF52F827A8FD04F827FFFF7D7D5227F8A8FD38FF5252FD05FF7DFD
%04F87DFFF8F8F8FFFFA82752FD1CFF7DF8A8FFFFF8F8F8FF52FD04F87DFD
%05FF5252FD32FFA87D27FD04F827527DA8FFFFFF7D27F8F8A8FF27F827FF
%52F852FD1EFF52F87DFF27F852FFFFF8F8277DA8FFFFFF7D52FD05F82752
%FD2CFF52F8277DA8FFFFA87D5227F8277DA8FFFFFFA8FFFFFFA8A827277D
%FD20FFA8272752FD05FFA8FFFFFF7D52F827527DA8FFFFA87D52F852FD28
%FFA8F8277DFFFFFFA8FD05FFA87D27F8F85252A87D7D52F8F87DA8FD23FF
%5227F85252A87D7D5227F82752A8FD06FFA8FFFFA827F8A8FD25FF7DF87D
%FFFFFFA8F8F8F827A8FD04FFA8F8A852522727277DA8FD28FFA852522727
%277D7D277DFD05FF27F8F8F87DFFFFFF522752FD23FFA8F87D7DA8A8FF27
%FD04F8A8FFA85252F852FD38FF2727277DA8FFA8FD04F852FFFF7DA8F8F8
%A8FD22FFF87DA827F852FF27FD04F8FF27F85252277DFD38FF7DF87D2727
%27FFFD04F827FF27F8F8A85227FD21FF5227FFA8F827F8FFFD04F8525227
%FFFFA8F8FD39FFA8F8A8FFFF275252FD04F8A8F8F8F87DFF2752FD1FFFA8
%F8A8FFA852F852A8A87D7D7DFF27A8FFFF2752FD3AFF5227A8FF7D27A87D
%52A87DFF27F827FFFFA8F8FD1FFF7D27FD05FFA827F8F8277DFFF87D52F8
%52A8FD3BFF27F827A8F8FF7D27F8F8F8FFA8FD04FF2752FD1EFF277DFFA8
%2727F8A8F827F8F8F8FFF8F827FD3FFFA852F8F8FFFD05F8A8F8F8527DFF
%7D52FD1EFFF87DFFFD04F87DF8F827F8F8FFF852FD42FF7DF8FFFD05F8A8
%FD04F8A8A8F8FD1EFFF8FFA8FD04F87D27F8F827F8FF7DFD44FF7DFFFD04
%F82752FD04F8FFFFF8FD1EFFF8A8FFFD04F87DA8F8F8F827A8FD47FFFD04
%F87D7DFD04F8FFFFF8FD1CFF7D52F8A8FF52F8F852FD54FF52F8F827FFA8
%F852A8FD17FFA87DF8F827277DFFA8A8A852FD04F852FD4AFF7DF8F8F827
%52FFA8A8FF7DF852F8F852FD14FFA827277D27FF527DFFFFFF2727A87DF8
%7DFD4CFF7DF8A87D2727FFFFFF527DFF275252F8A8FD12FF2727FF5252FF
%7DF8FFFFA8F8FFFF5227FD4EFF2727FFFFF8A8FFFF277DFF2752FF5227FD
%12FFF8FFFF527DFFFFF8A8FF7D52FFFFF8FD4FFFA8F8A8FF277DFFFFF8FF
%FF7D27FFA8F8A8FD10FF7D27FFFFF8A8FFFF277DFF5252FF2752FD50FF27
%27A87D27FF5252FFFF7D27FFFF277DFD10FF527DFF5227FFFFFF7D27A827
%27F852FD52FF52F8F8277D527DFFFFFFF852A87D27FD10FFF852F827A8FF
%7DFFA8F8F8527DA8FD54FFA87D2727F8FFA87DFFFF27F827F8A8FD0EFF27
%F827A8FF7DF8F87DFF27A8FD5AFF7D27FF7DF8277DFF7D52F852FD0DFF7D
%7DA8FFFF7DF8F8F827FF5252FD5AFF7D27FF27F8F8F852FFFFFF527DFD0D
%FFA85227A852FD04F8FF5252FD5AFF277DA8FD04F87DA82752FD0EFF27FD
%04F87DFD04F8A8A827FD5AFF277DA8FD04F852FD04F852A8FD0AFFA8FD05
%F87D27F852FFFFA852FD5AFF27A8FFFF52F8F8A8FD05F8FD0CFF27FD04F8
%527DA8FFFFFF7D27FD5AFF5252FFFFFFA87D27FD04F827FD0AFF7DA87DFD
%04F827A8F8F852FF527DFD5AFF5252FF52F827A827FD04F852FF52FD08FF
%5252A827F8527D7D7DF8F8F8A8F8A8FD5AFFA8F8FFF8F8F8A87DA827F827
%FF2752FD08FF27F8FFFFFF5227F8FF27F8277DF8FD5CFF277D52F852FFF8
%F87DFFFFFFF827FD07FFA8F82752FF27F8F8F852FFFFFFF87DFD5CFF5227
%FFFFFF7DF8F8F827FF7DF8F87DFD06FF277D7D27FF27F8F8F852FFFF7D27
%FD5EFFF87DFFFF27FD04F8FF277D5227FD05FF7DF8A8FFF8FF52F8F8F827
%FFA8F87DFD5EFF7DF8A8FF52F8F8F852FFF8A8FFF87DFD04FF2752FFFFF8
%FFFFF82752FFA82752FD60FF7DF8A8FF7DF8F8A8FFF8FFFF7D27FD04FFF8
%A8FF5227FFFF7DFFFF7DF852FD62FF7DF87DFFFF7DFFFF2727FF7DF8FD04
%FF527D7DF8A8FD04FF27277DFD64FFA8F827A8FFFFFF7DF87D7D27FD04FF
%5227F87DFFFFA852F8F8A8FD67FFF8F827FFFFFF7DF8277DFD05FFF852FF
%FF52F852FF277DFD66FF5227A852F852FFFF27F8FD06FF52277DF8277DFF
%FF27F8FD65FFA8F827FFFFA827F87D2752FD06FFA8F8F8A8FFFFFF52F852
%52FD64FF7D272752FFFFFF7D27F8FD06FFA827F8FD04FFA8F8A87DF8FD64
%FFF8A87DF87DFFFFFFA827F8FD05FF5227FFFFA87DFF2752FFFFF8FD64FF
%F8A8FF5252FFA8A8FFFF2727FFFFFF7DF8FFA852F8F8A8277DFF5227FD1B
%FF27F827277DA8FD07FF527D7DA8FD06FFA8FFA8FFFFFFA87D527DA8FD07
%FF5252F8F827FD1BFF277DFF7D27FFF8F852FFA82752FFFFF8A8FF27F8F8
%F87D7D27FF277DFD1BFFA8FFA87D27F852FD04FFA8F8275227F827272752
%FF5252FF52F827F8272752F8277DFD04FF52F8527DA8A8FD1CFF7D27FFF8
%7D52F8F8F827FF7D27FF7D27FFFFFD05F8FFF852F8FD1CFF277DFFFFFFA8
%27F8A8FF52F852A8FFFFFF7DF827FF27F8F827A852F87DFD04FF27F827FF
%7DF827A8FFFFFF7D27FD1CFFF82727FFFD05F8FFFFF87D527DFFFF52F8F8
%F852FFFFF852FD1CFF2727FD05FF7DF8522752F8527DFF7D2752FF27FD04
%F852FF52F87DFFA827F8272727F87DFD05FFF852FD1CFF2727A8FF52F8F8
%F852FFFF7D27F8A8FFFFA827F8527D5252A8F8FD1CFF2727FF52F8F8A8FF
%7DF87DFFA827F8F8277DFFFF27FD04F827FFFF7DF8F8F827A8FF52F87DFF
%A8F8F87DFF2727FD1CFFF87D5227A852F8F8FFFFFF7DF8F8FFA8277DA852
%7DF8F8F827FD1DFF52FF27FD04F8FFFF7DF8A8FD05FFA8277D52FD04F87D
%7D52A8FD05FFA8277DFFA827F8F8F852FF7DFD1CFFA852F8F8F87D52A852
%52A8FFF8F8A8F8F8F87D7DFD05F827FD1CFF7D7DFD06F8FFFF7DF8A8FFFF
%A852F8F8F85227F8F85227F8F8F852FFFFFFA8F852FFFF27FD05F8A87DFD
%1BFF7D27FD05F87D52F8F8F87DF8F87D27F8F8527DFD05F852FD1CFF2752
%7DFD04F8A8FFFFFF5227FFFF7DFD05F8FD047DFD05F852FFFF2752FFFFFF
%7D27F8F8F8A82752FD1CFF52FD05F87D7DF8F8F8A8F8F8FFA85252A8527D
%F8F8F827A8FD1CFF27F8527DF827FD06FF2727FFA827FD04F8FD047DFD04
%F827FFFF2727FD05FFA852F87D27F827FD1BFFA8FF27F8F8F87D527D7D27
%A8FFF8277DFFFFFFF8F852A8277DA827FD1CFF27F8F8A8FFA827F8F827A8
%FFA82752FFA827F827A8A8F8F87DA8F8F8F8FFFF52F8FFFFA827F8F827A8
%FFA8F8F852FD1CFFF8A852527D52F827FFFFFFA8F8277DFFFF27F8F8F827
%FFA8F827FD1CFF27F8F8A87DF87DA8A827F82727F82727FFA8A8A8FF52F8
%F852FFFF7DFFA8272727F827F852A8FF52F87DFFF8F827FD1CFF27F8A8FF
%52F8F8F852FFFF52527DF8FFFFFD04F827FF2727F8FD1CFF27F87D7DF87D
%FD04FF7DF827FFFF52F8A8FFFFFFA8F8F8A8FFFFFF7D2727FFFF52F87DFD
%04FF52F87D7DF852FD1CFFF85227FFFD05F8FFFF277DA8F87DFF27F8F8F8
%527DF8FF277DFD1BFF52A87DF827F8F82752F8F852FD04FF7DF827527DA8
%A87DA87D52F8277DFD04FF7DF8275227F82727F87DA827FD1BFF7D27FF27
%527DF8F8F827FF7DF8FFFF7D27A8FF52F8F8FF277DFF7D27FD1BFFA8FFA8
%FFFFFFA87D527DA8FD07FF7D5227FD04F82752A8FD08FF527D7DFD22FF27
%7DFF7D27A827F852A8FFF87DFFFFFF2727A8FF7D7DFF2727FFA8F8FD64FF
%F8A8FF5227FF7DA8FFFFF827FD05FF2727FD04FF7DF8A8A8F8FD64FF27A8
%A8F8A8FD04FF2727FD06FFA8F8F87DFFFFFF5227277DFD64FF5227F852FF
%FFFFA8F8F8A8FD06FF52277D2727A8FFFF2727A8FD65FFF827FFFFA827F8
%A82752FD05FFA8F827FFA852F852A82752FD66FF7DF8A827F852FFFF52F8
%A8FD04FF7D27277DFFFFFF52F8F8FD68FF27F852A8FFFFA8F8277DFD04FF
%277D7DF87DFFFFFFA827F87DFD64FF7DF827A8FFFFFFA8F87D7D27FD04FF
%F87DFF2727FFFF7DFFFF7DF87DFD62FF52277DFFFF7DFFFF2752FFA8F8FD
%04FF2752FFFFF8FFA8F8F852A8A8F852FD60FF52F8A8FF52F8F8A8FFF8A8
%FF5227FD04FF7DF8FFFFF8FF7DF8F8F852FFA8F8A8FD5EFF7D27A8FF27F8
%F8F852FFF8FFFF277DFD05FF27527D27FFFD04F827FFFF7DF8FD5DFFA827
%52FFFF27F8F8F827FF277D7DF8FD06FFA827277DFF27F8F8F87DFFFFFF27
%52FD5CFF7D27FFFFFF7DF8F8F827FF7D27F8A8FD07FF27F8A8FFA852F8F8
%A852F8275227FD5CFFF87D27F827FFF8F852FFFFFFF827FD08FF5252FF27
%F827A87DA8F8F8F8FFF8FD5BFFA827A8F8F8F87D7DA852F852FF5252FD08
%FF52A852FD04F8277D27F852FF5252FD5AFF7D27FF52F8F8A827FD04F852
%A87DFD0AFF27FD04F827A8A8FFFFFF5252FD5AFF277DFFFFFFA87D52FD04
%F827FD0CFFFD05F87DF8F852FFFFA827FD5AFF277DFFA852F8277DFD05F8
%A8FD0AFFA852F8F8F8277DFD04F8FFA852FD5AFF27A8A827F8F8F8A8FD04
%F852FD0DFFA82727A87DFD04F8A87D27FD5AFF5252A8FD04F852A82752A8
%FD0DFFA87DFFFFFF52F8F8F827FF527DFD5AFF5252FF27F8F8F87DFFFFA8
%7D7DFD0DFF27F8527DFF7D27F87DFF277DFD5AFF7DF8FF7DF8F87DFF7D27
%F827FD0EFFA8F8272727FFFFA8FFFFF827277DA8FD55FF7D52F8F8A8FF7D
%FFA852F852F8FD10FF277DA852F8FFFFFF7D277D27F8F827FD51FFA852F8
%F827A8277DFFFFFF2752FF5252FD10FF7D27FFFF27A8FFFF527DFF527DA8
%2752FD50FF5227FF5252FF7D27FFFFA8F8FFFF277DFD10FFA8F8A8FF277D
%FFFFF8FFFF7D27FFA8F8A8FD4EFFA8F8FFFF5252FFA8F8A8FF5252FFFFF8
%A8FD11FF2752FF7D52FF7D27FFFFA827FFFF5252FD4EFF2752FFFFF8FFFF
%FFF8A8FF5252FF5252FD12FFA8F8275227FF5252FFFFFFF8277DA8F87DFD
%4CFF52F87DA82727FFFFFF5252FF275227F8A8FD14FF5227F852F87DFFFF
%A8FF5227F8F8F87DFD4AFF7DF8F8F8277DFFA8A8FF7D2752F8F87DA8FD17
%FF7D27F87DFF27F8F852A8FD05FF7DFD47FFA8FD05FF27F8F827FFA8F852
%7DFD1CFFF8FFFFFD04F8A87DFD04F8FD48FF27F8F8F8A87DFD04F8FFFFF8
%FD1EFFF8A8A8FD04F85227FD04F8FF7DFD44FF52FFF827F8F8277DFD04F8
%A8FFF8FD1EFFF8A8A8FD04F8A8FD05F8FFF87DFD42FF7DF8FFF8F827F8F8
%7DFD04F8FF7D27FD1EFF2752FF7D52F8F87DFD05F8FFF8F827A8FD3EFFA8
%27F8F8FFF8F8F827F8A8F82727A8FF7D27FD1EFF7D52FD06FFF8F8F8277D
%FFF8A852F852FD3CFF52F852A8F8FFA827F8F852FD06FF277DFD1EFFA8F8
%A8FFFF27F827FF7DA8527DA8277DFFA82752FD3AFF5227A8FFA827FF7D7D
%7DA8A852F827A8FF7DF8A8FD1FFF5227FFA8F8F8F8FFFD04F8525252FFFF
%A8F8A8FD39FFF8FFFFFF277D52FD04F8FFF827F8A8FF5252FD20FFA8F852
%A8F8F827FFFD05F8FFF8F82752F87DFD38FF7DF85252F827A8FD04F827FF
%27F8277D52F8FD22FFA82752A8A8FFFF52FD04F8A8FFA87D522727FD38FF
%5227527DA8FFFFFD04F827FFFFA8A87DF8FD24FF52F852FFFFFF7DF8F8F8
%27A8FD04FF7D277D7D2727275252A8FD28FFA87D2727275252A8F8A8FD04
%FFA827F8F8F8A8FFFFFF7DF87DFD25FFA82727A8FFFFA8FD07FF7D27F827
%527D7DA85252F82752FD24FF7DF827527D7DA8525227F8277DA8FD05FFA8
%FFFFFFA827F8A8FD27FFA852F82752A8A8FF7D7D5227F8527DA8FFFFA8A8
%FFFFFFA85227F87DFD20FF7DF8277DA8FFFFFFA8FFFFFFA87D27F8F8527D
%A8A8FF7D7D27F852FD2CFF7D52FD04F827527DFD04FFA827F8F8FFFF52F8
%52FF7DF87DFD1EFF52277DFF27F852FFFF27F8277DFD04FFA85227F8F8F8
%27277DA8FD32FF2752FD05FF7DFD04F852FFF8F8F8FFFFA8F87DFD1CFF52
%F8A8FFFFF8F8F8FF52FD04F87DFD05FF5252FD38FFA8F827527D7DFFFF27
%FD04F8A827F852FFFFFFA8F8A8FFFFA87DF8F8277DFD06FFA8FFFFFF7D52
%F82752FFFFFF7D27A8FFFFFF27F8F8A8FD05F8FFFFA87D5227F87DFD39FF
%F8527D2727F8FF7DFD04F87D7DA8A87D2752A87DF8FF52F827A8A87DF8F8
%27F8A85227FFF827F82752FF7D27F87DA8F87DFF272752FF7DA87D27F8F8
%F87DA827F8525252F8FD3AFF5252FFFFFF5227FF527D7D7D27527DFD04F8
%7DFF52F8272727A8FFFFFF2727A852F8F827FFF852FFFFFFA8F8FD0427FF
%52FD04F87D27527DA8527DFF5252FFFFFF277DFD3BFFF852A8FFA8F87DFF
%A8FD04F8A8FD05F8FFA8F8A8FF27F8527DF827A852FD04F852FF27277D52
%F852FFFFF8A8FFFD05F87DFD04F8A8FFA8F8FFFFFF52F8A8FD3BFFA827F8
%277D2752FF27FD04F8277DFD04F87DFF5252FFFF7D52277DFFFF27FD04F8
%52FFFF7D2727A8FFFF5252FF7DFD04F85252FD04F827FF27527D27F852A8
%FD3EFFA87D27F8F8FF27FD05F8A827F852A8FFFFA8F8A8FD04FF52F827A8
%FD04F87D52F87DA8FFFFFF7DF8A8FFFFA8522727FFFD05F852A8F8F8527D
%A8FD43FFA8527DFFFD04F827FD08FF7D27FFFFA8FD04F8527DF8F87D52F8
%F8F8277DFFFF5252FD08FF52FD04F8A87D27FD49FFA8FF52F82752FFA87D
%27F8F8277DFFA8F87DFF7DFD05F8527D7D52FD05F8A8FFA8F8FFFFA827F8
%F82752FFA85227F827FF7DFD4CFFA8FFFFFF52F8277DA8FF27F87DFF7D27
%FFFF52FD04F8A8527D7D27F8F8F87DFFFFF8A8FF7DF852FFFF7D27F852A8
%FFA8FD52FF525227F852FFFFFF7DF82727F827A8FF27F827FF52F8F852A8
%52F827A8FF27F8F852F87DFFFFA852F8275252FD57FFA827F87DA8A827F8
%52FF2727FD05FF52F8F827FD05FF2727A87DF8277DA8522727A8FD5CFF7D
%27F8277DA8FFFFFF27277DFFFFFF7DF8F8A8FFFFFF7DF827A8FFFFFF5227
%F8277DFD68FF7D27F87DA8FF7DA8FFA87D27F87DFD73FFA87D27F8F8F8FD
%04277DFD3AFFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(New Pattern 2)
0 A
u800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
-7893 8611.8887 m
-7837.6426 8611.8887 L
-7837.6426 8595.0488 L
-7893 8595.0488 L
-7893 8611.8887 L
n0 O
0 0 0 1 (metal) 0 x
-7870.938 8601.4453 m
-7872.0942 8601.4453 -7873.7129 8603.0645 -7874.5801 8603.9316 C
-7873.5967 8604.9141 -7872.2095 8607.3418 -7870.938 8607.3418 c
-7869.6665 8607.3418 -7868.2305 8605.2607 -7866.7759 8604.7988 C
-7868.5098 8603.0645 -7869.7817 8601.4453 -7870.938 8601.4453 c
f-7893 8597.168 m
-7891.582 8598.0107 -7889.7505 8599.8613 -7893 8601.793 C
-7893 8597.168 L
f-7893 8602.834 m
-7891.8682 8603.9658 -7889.6953 8605.2617 -7889.6953 8607.1113 c
-7889.6953 8608.9609 -7892.3154 8609.3652 -7893 8611.1582 C
-7893 8602.834 L
f-7887.3833 8605.7236 m
-7888.5391 8605.7236 -7889.811 8604.1055 -7891.5454 8602.3711 C
-7890.0913 8601.9082 -7888.6543 8599.8271 -7887.3833 8599.8271 c
-7886.1118 8599.8271 -7884.7241 8602.2559 -7883.7407 8603.2383 C
-7884.6079 8604.1055 -7886.2271 8605.7236 -7887.3833 8605.7236 c
f*u
1 D
-7851.1758 8603.8184 m
-7851.9678 8604.7695 -7852.769 8605.7266 -7853.6279 8606.6348 C
-7853.1616 8607.0938 -7852.5938 8607.6035 -7851.9849 8608.1035 C
-7851.9849 8608.0449 -7851.9849 8607.9131 Y
-7851.3174 8607.9131 -7850.7383 8607.5332 -7850.0674 8607.0938 c
-7849.2383 8606.5527 -7848.2993 8605.9375 -7846.9873 8605.9375 c
-7844.8394 8605.9375 -7842.8433 8608.0186 -7841.6514 8609.2617 C
-7840.0718 8610.8887 L
-7841.7231 8610.5078 L
-7843.2466 8610.1543 -7844.6343 8610.5723 -7845.8594 8610.9395 c
-7846.6279 8611.1699 -7847.3535 8611.3887 -7848.0273 8611.3887 c
-7850.0762 8611.3887 -7853.6919 8607.9697 -7854.3306 8607.3496 C
-7856.9302 8609.8984 -7860.1553 8611.8887 -7865.3218 8611.8887 c
-7870.4873 8611.8887 -7873.7119 8609.8984 -7876.313 8607.3496 C
-7876.9502 8607.9697 -7880.5664 8611.3887 -7882.6152 8611.3887 c
-7883.2886 8611.3887 -7884.0142 8611.1699 -7884.7832 8610.9395 c
-7886.0078 8610.5723 -7887.397 8610.1543 -7888.9194 8610.5078 C
-7890.5713 8610.8887 L
-7888.9922 8609.2617 L
-7887.7993 8608.0186 -7885.8042 8605.9375 -7883.6558 8605.9375 c
-7882.3433 8605.9375 -7881.4038 8606.5527 -7880.5762 8607.0938 c
-7879.9038 8607.5332 -7879.3247 8607.9131 -7878.6577 8607.9131 C
-7878.6577 8608.0449 -7878.6577 8608.1035 V
-7878.0498 8607.6035 -7877.481 8607.0938 -7877.0142 8606.6348 C
-7877.8735 8605.7266 -7878.6743 8604.7695 -7879.4673 8603.8184 c
-7882.7969 8599.8232 -7885.9434 8596.0488 -7893 8596.0488 C
-7893 8595.0488 L
-7887.8818 8595.0488 -7884.6519 8596.9629 -7882.061 8599.4434 C
-7881.1294 8598.5566 -7877.8306 8595.5488 -7875.9097 8595.5488 c
-7875.2358 8595.5488 -7874.5103 8595.7676 -7873.7417 8595.998 c
-7872.5166 8596.3662 -7871.1279 8596.7842 -7869.606 8596.4297 C
-7867.9546 8596.0488 L
-7869.5327 8597.6758 L
-7870.7256 8598.9199 -7872.7217 8601 -7874.8687 8601 c
-7876.1816 8601 -7877.1206 8600.3857 -7877.9487 8599.8438 c
-7878.6206 8599.4043 -7879.2002 8599.0254 -7879.8672 8599.0254 C
-7879.8672 8598.8926 -7879.8672 8598.834 V
-7880.4111 8599.2813 -7880.9126 8599.7324 -7881.3496 8600.1523 C
-7880.4146 8601.1221 -7879.5518 8602.1543 -7878.6982 8603.1777 c
-7875.3926 8607.1436 -7872.271 8610.8887 -7865.3218 8610.8887 c
-7858.3711 8610.8887 -7855.2495 8607.1436 -7851.9438 8603.1777 c
-7851.0913 8602.1543 -7850.228 8601.1221 -7849.293 8600.1523 C
-7849.73 8599.7324 -7850.231 8599.2813 -7850.7754 8598.834 C
-7850.7754 8598.8926 -7850.7754 8599.0254 Y
-7851.4424 8599.0254 -7852.022 8599.4043 -7852.6934 8599.8438 c
-7853.522 8600.3857 -7854.4609 8601 -7855.7734 8601 c
-7857.9214 8601 -7859.917 8598.9199 -7861.1094 8597.6758 C
-7862.689 8596.0488 L
-7861.0366 8596.4297 L
-7859.5142 8596.7842 -7858.126 8596.3662 -7856.9009 8595.998 c
-7856.1318 8595.7676 -7855.4063 8595.5488 -7854.7329 8595.5488 c
-7852.813 8595.5488 -7849.5137 8598.5566 -7848.5815 8599.4434 C
-7845.9902 8596.9629 -7842.7617 8595.0488 -7837.6426 8595.0488 C
-7837.6426 8596.0488 L
-7844.7002 8596.0488 -7847.8457 8599.8232 -7851.1758 8603.8184 c
f0 D
-7851.5664 8598.2109 m
-7852.7847 8597.291 -7854.0186 8596.5488 -7854.7329 8596.5488 c
-7855.2598 8596.5488 -7855.8862 8596.7383 -7856.6128 8596.9561 c
-7857.5337 8597.2324 -7858.6182 8597.5547 -7859.8174 8597.5605 C
-7858.7568 8598.6299 -7857.2241 8600 -7855.7734 8600 c
-7854.7593 8600 -7854.022 8599.5176 -7853.2417 8599.0068 c
-7852.7246 8598.6689 -7852.168 8598.3887 -7851.5664 8598.2109 C
f-7879.0762 8598.2109 m
-7878.4746 8598.3887 -7877.918 8598.6689 -7877.4014 8599.0068 c
-7876.6206 8599.5176 -7875.8833 8600 -7874.8687 8600 c
-7873.4185 8600 -7871.8857 8598.6299 -7870.8247 8597.5605 C
-7872.0239 8597.5547 -7873.1089 8597.2324 -7874.0298 8596.9561 c
-7874.7559 8596.7383 -7875.3823 8596.5488 -7875.9097 8596.5488 c
-7876.625 8596.5488 -7877.8574 8597.291 -7879.0762 8598.2109 C
f-7879.4487 8608.7266 m
-7880.0503 8608.5498 -7880.6074 8608.2695 -7881.123 8607.9316 c
-7881.9038 8607.4199 -7882.6416 8606.9375 -7883.6558 8606.9375 c
-7885.1064 8606.9375 -7886.6392 8608.3086 -7887.7002 8609.377 C
-7886.501 8609.3828 -7885.416 8609.7051 -7884.4951 8609.9824 c
-7883.769 8610.2002 -7883.1426 8610.3887 -7882.6152 8610.3887 c
-7881.9009 8610.3887 -7880.667 8609.6465 -7879.4487 8608.7266 C
f-7851.1934 8608.7266 m
-7849.9761 8609.6465 -7848.7422 8610.3887 -7848.0273 8610.3887 c
-7847.501 8610.3887 -7846.8735 8610.2002 -7846.147 8609.9824 c
-7845.2266 8609.7051 -7844.1426 8609.3828 -7842.9424 8609.377 C
-7844.0034 8608.3086 -7845.5361 8606.9375 -7846.9873 8606.9375 c
-7848.001 8606.9375 -7848.7383 8607.4199 -7849.519 8607.9316 c
-7850.0352 8608.2695 -7850.5918 8608.5498 -7851.1934 8608.7266 C
f*U
-7865.3218 8605.377 m
-7868.5713 8607.3086 -7866.7393 8609.1582 -7865.3218 8610.002 C
-7863.9033 8609.1582 -7862.0718 8607.3086 -7865.3218 8605.377 C
f-7865.3218 8596.0117 m
-7866.0054 8597.8047 -7868.626 8598.209 -7868.626 8600.0586 c
-7868.626 8601.9082 -7866.4526 8603.2031 -7865.3218 8604.3359 C
-7864.1895 8603.2031 -7862.0166 8601.9082 -7862.0166 8600.0586 c
-7862.0166 8598.209 -7864.6367 8597.8047 -7865.3218 8596.0117 C
f-7859.7046 8601.4453 m
-7858.5479 8601.4453 -7856.9297 8603.0645 -7856.0625 8603.9316 C
-7857.0454 8604.9141 -7858.4326 8607.3418 -7859.7046 8607.3418 c
-7860.9761 8607.3418 -7862.4121 8605.2607 -7863.8662 8604.7988 C
-7862.1328 8603.0645 -7860.8608 8601.4453 -7859.7046 8601.4453 c
f-7837.6426 8597.168 m
-7839.061 8598.0107 -7840.8921 8599.8613 -7837.6426 8601.793 C
-7837.6426 8597.168 L
f-7837.6426 8602.834 m
-7838.7744 8603.9658 -7840.9473 8605.2617 -7840.9473 8607.1113 c
-7840.9473 8608.9609 -7838.3271 8609.3652 -7837.6426 8611.1582 C
-7837.6426 8602.834 L
f-7843.2593 8605.7236 m
-7842.103 8605.7236 -7840.8311 8604.1055 -7839.0977 8602.3711 C
-7840.5518 8601.9082 -7841.9878 8599.8271 -7843.2593 8599.8271 c
-7844.5313 8599.8271 -7845.9185 8602.2559 -7846.9014 8603.2383 C
-7846.0342 8604.1055 -7844.415 8605.7236 -7843.2593 8605.7236 c
fU%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration]) Pc
0 0 0 1 (metal) 0 x
(metal) Pc
PB
%AI5_EndPalette
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe PatternOnPath Brush Tool)
(Pattern Brush 1)
(1 / New Pattern 2/ / / / / 5 0.843137 0.882353 0.870588 /  1 0 1 0 1 0) -
( 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe PatternOnPath Brush Tool/ Pattern Brush 1/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI5_End_NonPrinting--
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
uu800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
126.2393 490.2998 m
220.9746 490.2998 L
220.9746 519.1187 L
126.2393 519.1187 L
126.2393 490.2998 L
n0 O
0 0 0 1 (metal) 0 x
163.9941 508.1719 m
162.0156 508.1719 159.2461 505.4009 157.7617 503.917 C
159.4443 502.2358 161.8184 498.0811 163.9941 498.0811 c
166.1709 498.0811 168.6279 501.6426 171.1172 502.4331 C
168.1504 505.4009 165.9736 508.1719 163.9941 508.1719 c
f126.2393 515.4917 m
128.666 514.0498 131.7998 510.8828 126.2393 507.5771 C
126.2393 515.4917 L
f126.2393 505.7954 m
128.1758 503.8584 131.8945 501.6406 131.8945 498.4756 c
131.8945 495.3101 127.4102 494.6182 126.2393 491.5498 C
126.2393 505.7954 L
f135.8516 500.8501 m
133.8721 500.8501 131.6953 503.6196 128.7285 506.5874 C
131.2178 507.3799 133.6748 510.9409 135.8516 510.9409 c
138.0273 510.9409 140.4023 506.7847 142.084 505.1035 C
140.5996 503.6196 137.8301 500.8501 135.8516 500.8501 c
f*u
1 D
220.9746 517.4072 m
220.9746 519.1187 L
212.2148 519.1187 206.6885 515.8428 202.2539 511.5981 C
200.6602 513.1152 195.0137 518.2627 191.7266 518.2627 c
190.5742 518.2627 189.332 517.8887 188.0166 517.4941 c
185.9199 516.8638 183.5449 516.1489 180.9395 516.7554 C
178.1123 517.4072 L
180.8145 514.623 L
182.8555 512.4937 186.2705 508.9341 189.9463 508.9341 c
192.1924 508.9341 193.7998 509.9854 195.2178 510.9126 c
196.3662 511.6646 197.3584 512.313 198.5 512.313 C
198.5 512.5405 198.5 512.6406 V
199.4307 511.8755 200.2891 511.103 201.0361 510.3848 C
199.4365 508.7251 197.96 506.9585 196.499 505.207 c
190.8428 498.4204 185.501 492.0112 173.6064 492.0112 c
161.7129 492.0112 156.3701 498.4204 150.7139 505.207 c
149.2539 506.9585 147.7773 508.7251 146.1768 510.3848 C
146.9248 511.103 147.7832 511.8755 148.7139 512.6406 C
148.7139 512.5405 148.7139 512.313 Y
149.8555 512.313 150.8467 511.6646 151.9961 510.9126 c
153.4141 509.9854 155.0205 508.9341 157.2676 508.9341 c
160.9434 508.9341 164.3584 512.4937 166.3984 514.623 C
169.1006 517.4072 L
166.2744 516.7554 L
163.6689 516.1489 161.293 516.8638 159.1963 517.4941 c
157.8809 517.8887 156.6396 518.2627 155.4863 518.2627 c
152.2002 518.2627 146.5537 513.1152 144.959 511.5981 C
140.5244 515.8428 134.999 519.1187 126.2393 519.1187 C
126.2393 517.4072 L
138.3164 517.4072 143.7002 510.9478 149.3994 504.1108 c
150.7549 502.4829 152.126 500.8452 153.5957 499.291 C
152.7979 498.5054 151.8252 497.6333 150.7832 496.7773 C
150.7832 496.8779 150.7832 497.1035 Y
149.6426 497.1035 148.6504 497.7534 147.501 498.5054 c
146.083 499.4312 144.4766 500.4844 142.2305 500.4844 c
138.5547 500.4844 135.1396 496.9229 133.0986 494.7954 C
130.3965 492.0112 L
133.2227 492.6631 L
135.8281 493.2681 138.2041 492.5527 140.3008 491.9243 c
141.6162 491.5298 142.8574 491.1553 144.0107 491.1553 c
147.5176 491.1553 153.7051 497.0063 154.7969 498.0679 C
159.2471 493.7056 164.7656 490.2998 173.6064 490.2998 c
182.4473 490.2998 187.9668 493.7056 192.416 498.0679 C
193.5088 497.0063 199.6963 491.1553 203.2021 491.1553 c
204.3555 491.1553 205.5977 491.5298 206.9131 491.9243 c
209.0088 492.5527 211.3848 493.2681 213.9902 492.6631 C
216.8174 492.0112 L
214.1152 494.7954 L
212.0742 496.9229 208.6592 500.4844 204.9834 500.4844 c
202.7373 500.4844 201.1299 499.4312 199.7119 498.5054 c
198.5635 497.7534 197.5713 497.1035 196.4297 497.1035 C
196.4297 496.8779 196.4297 496.7773 V
195.3887 497.6333 194.416 498.5054 193.6182 499.291 C
195.0879 500.8452 196.458 502.4829 197.8145 504.1108 c
203.5137 510.9478 208.8975 517.4072 220.9746 517.4072 C
f0 D
194.2803 512.3452 m
192.9434 511.4712 191.6816 510.6455 189.9463 510.6455 c
187.4639 510.6455 184.8408 512.9902 183.0254 514.8198 C
185.0781 514.8301 186.9336 515.3818 188.5098 515.8545 c
189.752 516.2271 190.8252 516.5513 191.7266 516.5513 c
192.9502 516.5513 195.0615 515.2813 197.1455 513.707 C
196.1162 513.4028 195.1641 512.9233 194.2803 512.3452 c
f155.4863 516.5513 m
156.3877 516.5513 157.4609 516.2271 158.7031 515.8545 c
160.2793 515.3818 162.1357 514.8301 164.1885 514.8198 C
162.373 512.9902 159.75 510.6455 157.2676 510.6455 c
155.5313 510.6455 154.2695 511.4712 152.9336 512.3452 c
152.0498 512.9233 151.0967 513.4028 150.0674 513.707 C
152.1523 515.2813 154.2627 516.5513 155.4863 516.5513 c
f144.0107 492.8667 m
143.1094 492.8667 142.0361 493.1895 140.7939 493.562 c
139.2178 494.0366 137.3623 494.5884 135.3086 494.5981 C
137.125 496.4268 139.748 498.7729 142.2305 498.7729 c
143.9658 498.7729 145.2275 497.9473 146.5635 497.0718 c
147.4482 496.4932 148.4004 496.0137 149.4297 495.7114 C
147.3447 494.1372 145.2344 492.8667 144.0107 492.8667 c
f200.6494 497.0718 m
201.9854 497.9473 203.248 498.7729 204.9834 498.7729 c
207.4658 498.7729 210.0889 496.4268 211.9043 494.5981 C
209.8516 494.5884 207.9951 494.0366 206.4199 493.562 c
205.1768 493.1895 204.1045 492.8667 203.2021 492.8667 c
201.9795 492.8667 199.8682 494.1372 197.7832 495.7114 C
198.8135 496.0137 199.7656 496.4932 200.6494 497.0718 c
f*U
173.6064 501.4434 m
168.0459 498.1377 171.1797 494.9727 173.6064 493.5288 C
176.0332 494.9727 179.168 498.1377 173.6064 501.4434 C
f173.6064 517.4707 m
172.4355 514.4023 167.9512 513.7104 167.9512 510.5449 c
167.9512 507.3799 171.6699 505.1636 173.6064 503.2251 C
175.5439 505.1636 179.2617 507.3799 179.2617 510.5449 c
179.2617 513.7104 174.7783 514.4023 173.6064 517.4707 C
f183.2188 508.1719 m
185.1973 508.1719 187.9678 505.4009 189.4512 503.917 C
187.7695 502.2358 185.3945 498.0811 183.2188 498.0811 c
181.043 498.0811 178.585 501.6426 176.0957 502.4331 C
179.0635 505.4009 181.2402 508.1719 183.2188 508.1719 c
f220.9746 515.4917 m
218.5479 514.0498 215.4131 510.8828 220.9746 507.5771 C
220.9746 515.4917 L
f220.9746 505.7954 m
219.0371 503.8584 215.3193 501.6406 215.3193 498.4756 c
215.3193 495.3101 219.8027 494.6182 220.9746 491.5498 C
220.9746 505.7954 L
f211.3623 500.8501 m
213.3408 500.8501 215.5176 503.6196 218.4854 506.5874 C
215.9961 507.3799 213.5381 510.9409 211.3623 510.9409 c
209.1865 510.9409 206.8115 506.7847 205.1299 505.1035 C
206.6133 503.6196 209.3838 500.8501 211.3623 500.8501 c
fUUu%_1 Ap
%_0 R
%_0 0 0 1 K
%_1.7113 w 1 M%_293.041 504.7095 m
%_293.041 438.7476 239.5684 385.2744 173.6064 385.2744 c
%_107.6445 385.2744 54.1719 438.7476 54.1719 504.7095 c
%_54.1719 570.6714 107.6445 624.144 173.6064 624.144 c
%_239.5684 624.144 293.041 570.6714 293.041 504.7095 c
%_s%_U%_0 Ap
0 A
u1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
293.041 504.7095 m
293.041 438.7476 239.5684 385.2744 173.6064 385.2744 c
107.6445 385.2744 54.1719 438.7476 54.1719 504.7095 c
54.1719 570.6714 107.6445 624.144 173.6064 624.144 c
239.5684 624.144 293.041 570.6714 293.041 504.7095 c
nu0 Ap
0 O
0 0 0 1 (metal) 0 x
290.5391 466.8652 m
291.2246 468.7852 289.2407 472.2954 288.228 474.0522 C
286.1147 472.8745 281.6064 471.8604 280.9375 469.9702 C
280.2832 468.0732 282.9556 464.666 282.7466 462.1206 C
286.6177 463.6978 289.8691 464.9585 290.5391 466.8652 C
f303.8242 504.7095 m
302.3184 502.0317 299.0723 499.0088 295.9087 504.7095 C
303.8242 504.7095 L
f294.1274 504.7095 m
292.1411 502.7529 289.8325 499.2246 286.6724 499.3984 C
283.5098 499.564 282.9189 503.6895 279.8818 504.7095 C
294.1274 504.7095 L
f288.7832 495.5063 m
288.9521 497.3906 291.8555 499.2764 294.8569 502.207 C
295.6265 499.7158 299.0576 496.9971 298.8428 494.7134 C
298.7129 492.4199 294.2656 490.4258 292.3794 489.0146 C
291.1113 490.6904 288.6895 493.6313 288.7832 495.5063 C
f*u
272.1387 438.2549 m
271.5117 440.2896 270.8525 442.2993 270.2856 444.2935 C
269.2124 444.0752 267.9863 443.7793 266.7529 443.439 C
266.8364 443.3838 267.0249 443.2598 Y
266.4707 442.3574 266.4746 441.2495 266.4609 439.9429 C
266.4263 438.3477 266.4629 436.4185 265.1143 434.7432 C
262.9678 431.9136 258.103 431.7598 255.3145 431.8101 C
254.1001 431.7969 252.8506 431.8433 251.6191 431.9019 C
253.7954 433.313 L
255.7715 434.6724 256.6494 436.7329 257.2622 438.6055 C
257.6655 439.771 258.064 440.8369 258.6616 441.6533 C
260.4512 444.0259 268.376 445.4814 269.8569 445.8887 C
268.2407 451.7891 267.7144 457.46 270.6523 464.5195 C
273.5581 471.5879 278.0103 475.1982 283.2471 478.249 C
282.5298 479.5718 277.936 486.2061 278.3389 489.1475 C
278.4634 490.1504 278.9707 491.1807 279.5112 492.29 C
280.4272 494.043 281.1914 496.1328 280.8008 498.4854 C
280.6719 499.333 280.4302 500.1841 280.2461 501.0254 C
281.1401 500.1968 282.0952 499.3433 282.9385 498.4766 C
284.9033 496.5435 288.3022 492.9907 287.7817 489.4766 C
287.5459 487.3379 286.2134 485.9912 285.0645 484.8481 C
284.1323 483.916 283.3389 483.1367 283.1475 482.0972 C
282.9268 482.1426 282.8286 482.1626 V
283.4487 481.0547 284.0957 479.9795 284.6914 479.0679 C
286.5093 480.0757 288.4526 481.0176 290.2554 482.0313 C
297.9648 486.186 305.4971 491.3804 305.7393 504.7095 C
307.4502 504.7095 L
307.4248 494.9526 303.2109 489.0986 298.4229 485.188 C
299.6729 483.3867 303.6465 476.3848 302.7109 472.7861 C
302.4482 471.5396 301.6865 470.3203 300.918 469.0381 C
299.7129 466.9785 298.2852 464.7373 297.9097 461.8677 C
297.7744 460.8281 297.6826 459.7661 297.5034 458.7314 C
297.0015 459.9702 296.4067 461.2212 295.8506 462.4351 C
294.6021 465.2227 292.2432 469.6436 293.2134 473.2461 C
293.7871 475.4722 295.1411 476.8442 296.3916 478.0884 C
297.416 479.0923 298.2251 479.9995 298.436 481.1841 C
298.6592 481.1426 298.7578 481.124 V
298.1792 482.2329 297.5757 483.249 297.0029 484.1304 C
295.0747 482.7671 293.0732 481.6133 291.1016 480.5347 C
283.1675 476.374 276.0776 473.5264 272.2334 463.8638 C
268.1104 454.3184 271.1616 447.2407 273.7534 438.7407 C
274.4595 436.5361 275.0015 434.3438 275.4019 432.0176 C
276.4355 432.2314 277.5869 432.5186 278.7881 432.8887 C
278.7051 432.9453 278.5176 433.0737 Y
279.2236 434.0479 279.2109 435.3159 279.2368 436.7222 C
279.2446 438.4785 279.29 440.3848 280.4038 442.3965 C
282.3267 445.5957 287.0181 447.1069 289.9517 448.1499 C
293.7012 449.6177 L
293.0659 448.7734 292.4824 447.9092 291.8071 447.0952 C
289.9526 444.8486 289.4922 442.1934 288.8481 439.9097 C
288.4736 438.4653 288.1123 437.0879 287.4761 435.9873 C
285.5659 432.8047 277.8545 430.6309 275.6494 430.2729 C
276.3164 424.0889 275.1353 416.999 268.2485 410.0674 C
267.0386 411.2773 L
276.3247 420.8721 274.5786 429.915 272.1387 438.2549 C
f1 D
280.4756 433.48 m
282.979 434.4722 285.3164 435.7363 286.0117 436.8726 C
286.5024 437.7227 286.8071 438.9004 287.1538 440.2515 C
287.6211 441.9521 288.0718 443.9731 289.0479 445.9482 C
286.5562 445.0107 283.1938 443.7373 281.8813 441.5327 C
281.0039 439.958 281.0029 438.4277 280.9736 436.7783 C
280.9595 435.6836 280.8154 434.5708 280.4756 433.48 C
f299.5508 479.5083 m
299.0703 478.4858 298.3301 477.6084 297.5703 476.8242 C
296.3887 475.6445 295.3311 474.5542 294.8687 472.812 C
294.1411 470.3535 295.7412 467.0352 296.7979 464.6221 C
297.5557 466.6924 298.5327 468.4834 299.4844 469.9932 C
300.2168 471.1875 300.8457 472.2329 301.0488 473.1958 C
301.3379 474.499 300.6641 477.0264 299.5508 479.5083 C
f282.0034 483.5967 m
282.4648 484.4668 283.0908 485.2432 283.8052 485.9517 C
284.9097 487.0195 285.897 488.0757 286.085 489.7007 C
286.4243 492.0293 284.3242 494.7222 282.5879 496.4883 C
282.4517 494.6289 281.7656 493.0034 281.082 491.6626 C
280.5703 490.6001 280.1313 489.6968 280.0317 488.8979 C
279.9019 487.8169 280.7764 485.7808 282.0034 483.5967 C
f265.1948 442.9805 m
262.7798 442.3057 260.6646 441.5225 260.0356 440.6328 C
259.5674 439.98 259.21 439.0503 258.8198 437.937 C
258.3286 436.5264 257.7192 434.8501 256.4785 433.4561 C
258.9678 433.4668 262.3091 433.9272 263.7559 435.7837 C
264.7925 437.0498 264.7632 438.5513 264.7813 440.0552 C
264.7842 441.0576 264.8989 442.0435 265.1948 442.9805 C
f*U
0 D
280.9463 460.251 m
279.8315 466.436 275.7407 464.6953 273.6348 463.2827 C
274.1504 460.7813 275.7695 456.6748 280.9463 460.251 C
f295.751 454.1123 m
293.3843 456.4976 294.521 461.165 291.479 462.2407 C
288.5479 463.2661 285.0562 460.5703 282.5918 459.5684 C
283.6865 457.0879 284.105 452.7754 286.9727 451.3936 C
289.8125 450.0337 292.4629 454.0679 295.751 454.1123 C
f283.0356 448.7935 m
282.1455 446.9575 278.3369 445.8418 276.3154 445.3506 C
275.7163 447.6431 273.1753 451.5874 274.0532 453.3916 C
275.0088 455.1597 279.1836 455.7349 280.9004 457.6519 C
282.4575 453.8262 283.9917 450.5757 283.0356 448.7935 C
f265.6841 412.6318 m
266.5186 415.5898 266.3623 420.0186 260.0874 418.2285 C
265.6841 412.6318 L
f258.8276 419.4883 m
258.8086 422.2744 259.6743 426.397 257.3154 428.5073 C
254.9614 430.6255 251.623 428.1328 248.7544 429.5615 C
258.8276 419.4883 L
f261.5576 429.7705 m
260.3232 428.3369 261.0693 424.9292 261.1162 420.7402 C
263.4277 421.9531 267.7505 421.4741 269.2354 423.2227 C
270.7773 424.9277 268.9937 429.5181 268.6914 431.8198 C
266.5757 431.5591 262.8271 431.1528 261.5576 429.7705 C
fUu229.5229 395.2803 m
231.3574 396.1699 232.4741 399.9785 232.9653 402 C
230.6724 402.5986 226.728 405.1396 224.9243 404.2627 C
223.1563 403.3066 222.5815 399.1318 220.6636 397.415 C
224.4897 395.8584 227.7407 394.3242 229.5229 395.2803 C
f265.6841 412.6318 m
262.7266 411.7979 258.2974 411.9531 260.0874 418.2285 C
265.6841 412.6318 L
f258.8276 419.4883 m
256.0415 419.5068 251.9189 418.6416 249.8086 421.0005 C
247.6904 423.3545 250.1831 426.6924 248.7544 429.5615 C
258.8276 419.4883 L
f248.5449 416.7578 m
249.9785 417.9922 253.3857 417.2461 257.5762 417.2002 C
256.3633 414.8887 256.8413 410.5645 255.0933 409.0801 C
253.3892 407.5391 248.7979 409.3223 246.4951 409.624 C
246.7563 411.7393 247.1621 415.4883 248.5449 416.7578 C
f*u
196.2856 388.0605 m
197.2979 389.8633 198.2402 391.8066 199.2476 393.624 C
198.3364 394.2197 197.2627 394.8672 196.1533 395.4873 C
196.1733 395.3887 196.2188 395.168 Y
195.1787 394.9766 194.3994 394.1836 193.4692 393.251 C
192.3242 392.1016 190.978 390.7695 188.8403 390.5342 C
185.3271 390.0137 181.7725 393.4121 179.8408 395.377 C
178.9741 396.2197 178.1206 397.1758 177.291 398.0693 C
178.1328 397.8848 178.9829 397.6436 179.8306 397.5146 C
182.1846 397.124 184.2725 397.8887 186.0259 398.8047 C
187.1348 399.3447 188.1646 399.8516 189.1689 399.9766 C
192.1099 400.3789 198.7432 395.7852 200.0688 395.0684 C
203.1167 400.3057 206.728 404.7568 213.7979 407.6641 C
220.856 410.6016 226.5264 410.0742 232.4287 408.46 C
232.834 409.9395 234.29 417.8643 236.6626 419.6543 C
237.4785 420.2515 238.5439 420.6499 239.7104 421.0532 C
241.5825 421.666 243.6445 422.5454 245.0029 424.5205 C
246.4146 426.6973 L
246.4731 425.4658 246.52 424.2168 246.5073 423.002 C
246.5562 420.2124 246.4033 415.3486 243.5732 413.2021 C
241.8975 411.8525 239.9678 411.8887 238.3745 411.8555 C
237.0659 411.8408 235.958 411.8447 235.0562 411.291 C
234.9321 411.4795 234.877 411.5625 V
234.5381 410.3301 234.2407 409.1035 234.022 408.0293 C
236.0166 407.4629 238.0259 406.8037 240.062 406.1777 C
248.4009 403.7373 257.4453 401.9922 267.0386 411.2773 C
268.2485 410.0674 L
261.3184 403.1816 254.2266 401.999 248.043 402.667 C
247.6855 400.4619 245.5127 392.751 242.3291 390.8398 C
241.2275 390.2031 239.8496 389.8418 238.4063 389.4678 C
236.123 388.8232 233.4663 388.3623 231.2207 386.5088 C
230.4077 385.834 229.5439 385.25 228.6997 384.6152 C
230.1655 388.3633 L
231.2095 391.2979 232.7207 395.9893 235.9189 397.9111 C
237.9312 399.0254 239.8374 399.0713 241.5933 399.0791 C
243 399.1055 244.2686 399.0918 245.2427 399.7979 C
245.3706 399.6104 245.4272 399.5283 V
245.7969 400.7285 246.0845 401.8799 246.2983 402.9141 C
243.9722 403.3145 241.7808 403.8564 239.5747 404.5625 C
231.0747 407.1533 223.9966 410.2051 214.4536 406.083 C
204.7891 402.2373 201.9414 395.1475 197.7803 387.2139 C
196.7036 385.2422 195.5488 383.2412 194.1855 381.3125 C
195.0669 380.7393 196.0825 380.1367 197.1924 379.5576 C
197.1738 379.6563 197.1318 379.8799 Y
198.3169 380.0898 199.2236 380.8994 200.2271 381.9238 C
201.4717 383.1748 202.8438 384.5283 205.0688 385.1016 C
208.6733 386.0723 213.0938 383.7139 215.8799 382.4648 C
217.0952 381.9092 218.3467 381.3145 219.5864 380.8125 C
218.5508 380.6328 217.4888 380.541 216.4482 380.4063 C
213.5776 380.0303 211.3379 378.6025 209.2783 377.3975 C
207.9946 376.6289 206.7754 375.8672 205.5303 375.6055 C
201.9331 374.6699 194.9302 378.6436 193.1284 379.8926 C
189.2168 375.1045 183.3652 370.8906 173.6064 370.8652 C
173.6064 372.5762 L
186.9375 372.8193 192.1299 380.3506 196.2856 388.0605 C
f1 D
198.8076 378.7646 m
201.2891 377.6514 203.8188 376.9785 205.1206 377.2666 C
206.082 377.4697 207.1274 378.0986 208.3228 378.8311 C
209.833 379.7832 211.623 380.7598 213.6934 381.5176 C
211.2813 382.5742 207.9624 384.1748 205.5034 383.4463 C
203.7617 382.9844 202.6719 381.9268 201.4932 380.7451 C
200.708 379.9854 199.8301 379.2451 198.8076 378.7646 C
f244.8359 397.8408 m
243.7451 397.5 242.6323 397.3564 241.5386 397.3428 C
239.8887 397.3125 238.3579 397.3115 236.7827 396.4336 C
234.5786 395.1221 233.3052 391.7598 232.3672 389.2676 C
234.3423 390.2432 236.3638 390.6953 238.0645 391.1621 C
239.415 391.5078 240.5928 391.8125 241.4434 392.3037 C
242.5815 393 243.8428 395.3369 244.8359 397.8408 C
f235.335 413.1201 m
236.272 413.416 237.2583 413.5313 238.2603 413.5342 C
239.7642 413.5518 241.2661 413.5234 242.5327 414.5605 C
244.3887 416.0068 244.8491 419.3486 244.8594 421.8374 C
243.4668 420.5977 241.7896 419.9868 240.3784 419.4951 C
239.2656 419.1055 238.3374 418.749 237.6831 418.2803 C
236.7939 417.6514 236.0112 415.5361 235.335 413.1201 C
f194.7188 396.3115 m
192.5361 397.5391 190.4995 398.4141 189.418 398.2842 C
188.6206 398.1846 187.7158 397.7451 186.6528 397.2334 C
185.3125 396.5498 183.689 395.8633 181.8281 395.7275 C
183.5938 393.9912 186.2866 391.8906 188.6162 392.2305 C
190.2407 392.4189 191.2959 393.4053 192.3633 394.5098 C
193.0728 395.2246 193.8486 395.8506 194.7188 396.3115 C
f*U
0 D
218.0664 397.3701 m
221.6421 402.5459 217.5347 404.165 215.0347 404.6807 C
213.6206 402.5752 211.8804 398.4844 218.0664 397.3701 C
f224.2056 382.5654 m
224.2471 385.8525 228.2822 388.5029 226.9224 391.3428 C
225.5405 394.21 221.2271 394.6289 218.749 395.7246 C
217.7451 393.2588 215.0498 389.7676 216.0752 386.8369 C
217.1509 383.7949 221.8179 384.9307 224.2056 382.5654 C
f211.4512 387.7764 m
209.5298 387.0908 206.0205 389.0742 204.2637 390.0879 C
205.4409 392.2002 206.4551 396.709 208.3457 397.3779 C
210.2432 398.0322 213.6499 395.3594 216.1948 395.5693 C
214.6182 391.6973 213.3579 388.4463 211.4512 387.7764 C
f173.6064 374.4912 m
176.2852 375.9971 179.3076 379.2432 173.6064 382.4063 C
173.6064 374.4912 L
f173.6064 384.1885 m
175.563 386.1748 179.0913 388.4824 178.9175 391.6426 C
178.7524 394.8057 174.6265 395.3965 173.6064 398.4336 C
173.6064 384.1885 L
f182.8096 389.5322 m
180.9248 389.3633 179.0391 386.46 176.1099 383.459 C
178.6011 382.6885 181.3179 379.2578 183.6025 379.4727 C
185.897 379.6025 187.8901 384.0498 189.3003 385.9355 C
187.625 387.2041 184.6841 389.626 182.8096 389.5322 C
fUu135.7622 387.7764 m
137.6826 387.0908 141.1929 389.0742 142.9492 390.0879 C
141.7715 392.2002 140.7573 396.709 138.8672 397.3779 C
136.9702 398.0322 133.563 395.3594 131.0176 395.5693 C
132.5947 391.6973 133.8555 388.4463 135.7622 387.7764 C
f173.6064 374.4912 m
170.9287 375.9971 167.9058 379.2432 173.6064 382.4063 C
173.6064 374.4912 L
f173.6064 384.1885 m
171.6504 386.1748 168.1221 388.4824 168.2959 391.6426 C
168.4609 394.8057 172.5869 395.3965 173.6064 398.4336 C
173.6064 384.1885 L
f164.4033 389.5322 m
166.2876 389.3633 168.1733 386.46 171.1045 383.459 C
168.6133 382.6885 165.894 379.2578 163.6108 379.4727 C
161.3169 379.6025 159.3228 384.0498 157.9121 385.9365 C
159.5874 387.2041 162.5283 389.626 164.4033 389.5322 C
f*u
107.1519 406.1768 m
109.187 406.8037 111.1963 407.4629 113.1904 408.0293 C
112.9722 409.1025 112.6763 410.3291 112.3359 411.5625 C
112.2808 411.4785 112.1567 411.291 Y
111.2544 411.8447 110.1465 411.8408 108.8398 411.8545 C
107.2446 411.8896 105.3159 411.8525 103.6406 413.2012 C
100.811 415.3477 100.6567 420.2124 100.707 423.001 C
100.6943 424.2158 100.7407 425.4648 100.7988 426.6968 C
102.2104 424.52 L
103.5693 422.5439 105.6304 421.6665 107.5029 421.0532 C
108.6685 420.6504 109.7344 420.2515 110.5503 419.6533 C
112.9233 417.8643 114.3784 409.9395 114.7861 408.459 C
120.686 410.0752 126.3569 410.6006 133.4165 407.6631 C
140.4849 404.7568 144.0957 400.3057 147.146 395.0684 C
148.4692 395.7861 155.1035 400.3789 158.0444 399.9766 C
159.0479 399.8516 160.0776 399.3447 161.1875 398.8047 C
162.9399 397.8887 165.0298 397.124 167.3823 397.5146 C
168.2305 397.6436 169.0811 397.8848 169.9229 398.0693 C
169.0938 397.1758 168.2402 396.2197 167.3735 395.377 C
165.4409 393.4121 161.8877 390.0137 158.3735 390.5342 C
156.2349 390.7695 154.8882 392.1016 153.7456 393.251 C
152.813 394.1836 152.0337 394.9766 150.9941 395.168 C
151.0396 395.3887 151.0601 395.4873 V
149.9517 394.8662 148.877 394.2197 147.9648 393.624 C
148.9727 391.8066 149.9146 389.8633 150.9282 388.0596 C
155.0835 380.3506 160.2778 372.8184 173.6064 372.5762 C
173.6064 370.8652 L
163.8501 370.8906 157.9956 375.1045 154.085 379.8926 C
152.2842 378.6426 145.2817 374.6689 141.6831 375.6055 C
140.4365 375.8672 139.2173 376.6289 137.9351 377.3975 C
135.8755 378.6025 133.6348 380.0303 130.7651 380.4053 C
129.7251 380.541 128.6636 380.6328 127.6284 380.8115 C
128.8677 381.3145 130.1182 381.9092 131.3325 382.4648 C
134.1196 383.7129 138.541 386.0723 142.1436 385.1016 C
144.3691 384.5283 145.7417 383.1748 146.9854 381.9238 C
147.9893 380.8994 148.8965 380.0898 150.0815 379.8799 C
150.0396 379.6563 150.021 379.5576 V
151.1299 380.1367 152.1465 380.7393 153.0273 381.3125 C
151.6641 383.2412 150.5103 385.2422 149.4321 387.2139 C
145.271 395.1475 142.4233 402.2383 132.7612 406.082 C
123.2158 410.2051 116.1377 407.1543 107.6377 404.5625 C
105.4331 403.8564 103.2412 403.3145 100.915 402.9141 C
101.1289 401.8799 101.4155 400.7285 101.7856 399.5273 C
101.8423 399.6104 101.9707 399.7979 Y
102.9448 399.0918 104.2134 399.1045 105.6191 399.0791 C
107.3755 399.0703 109.2817 399.0254 111.2935 397.9111 C
114.4932 395.9893 116.0039 391.2979 117.0469 388.3643 C
118.5151 384.6143 L
117.6704 385.25 116.8062 385.833 115.9922 386.5088 C
113.7461 388.3633 111.0903 388.8232 108.8071 389.4678 C
107.3623 389.8418 105.9849 390.2031 104.8843 390.8398 C
101.7017 392.75 99.5283 400.4609 99.1704 402.666 C
92.9858 401.999 85.8965 403.1807 78.9648 410.0674 C
80.1748 411.2773 L
89.7695 401.9912 98.8125 403.7373 107.1519 406.1768 C
f1 D
102.377 397.8398 m
103.3696 395.3369 104.6333 392.999 105.77 392.3037 C
106.6201 391.8125 107.7974 391.5078 109.1489 391.1621 C
110.8496 390.6943 112.8701 390.2432 114.8452 389.2676 C
113.9082 391.7598 112.6343 395.1211 110.4297 396.4346 C
108.855 397.3115 107.3247 397.3125 105.6753 397.3418 C
104.5811 397.3564 103.4683 397.5 102.377 397.8398 C
f148.4058 378.7646 m
147.3833 379.2441 146.5054 379.9854 145.7212 380.7451 C
144.5415 381.9268 143.4517 382.9844 141.709 383.4463 C
139.251 384.1748 135.9321 382.5742 133.519 381.5176 C
135.5894 380.7598 137.3804 379.7832 138.8906 378.8311 C
140.085 378.0986 141.1304 377.4697 142.0928 377.2666 C
143.396 376.9785 145.9233 377.6514 148.4058 378.7646 C
f152.4937 396.3125 m
153.3638 395.8506 154.1401 395.2246 154.8491 394.5098 C
155.9165 393.4053 156.9727 392.4189 158.5977 392.2305 C
160.9268 391.8906 163.6196 393.9912 165.3853 395.7275 C
163.5259 395.8633 161.9004 396.5498 160.5596 397.2334 C
159.4971 397.7451 158.5938 398.1836 157.7954 398.2832 C
156.7144 398.4141 154.6777 397.5391 152.4937 396.3125 C
f111.8779 413.1211 m
111.2026 415.5352 110.4199 417.6514 109.5298 418.2803 C
108.877 418.748 107.9478 419.1055 106.834 419.4961 C
105.4238 419.9868 103.7476 420.5967 102.3535 421.8369 C
102.3643 419.3477 102.8247 416.0068 104.6812 414.5596 C
105.9468 413.5234 107.4482 413.5527 108.9526 413.5342 C
109.9551 413.5313 110.9404 413.417 111.8779 413.1211 C
f*U
0 D
129.1479 397.3691 m
135.3335 398.4834 133.5923 402.5742 132.1797 404.6807 C
129.6787 404.165 125.5718 402.5459 129.1479 397.3691 C
f123.0093 382.5645 m
125.3945 384.9316 130.0625 383.7949 131.1382 386.8369 C
132.1636 389.7676 129.4673 393.2588 128.4658 395.7236 C
125.9854 394.6289 121.6724 394.21 120.2905 391.3428 C
118.9307 388.5029 122.9653 385.8525 123.0093 382.5645 C
f117.6904 395.2803 m
115.855 396.1699 114.7393 399.9785 114.2476 402 C
116.5405 402.5996 120.4844 405.1396 122.2891 404.2617 C
124.0566 403.3066 124.6318 399.1318 126.5488 397.415 C
122.7236 395.8584 119.4727 394.3242 117.6904 395.2803 C
f81.5288 412.6318 m
84.4868 411.7969 88.916 411.9531 87.1255 418.2285 C
81.5288 412.6318 L
f88.3853 419.4883 m
91.1719 419.5068 95.2944 418.6416 97.4043 421 C
99.5225 423.3545 97.0303 426.6924 98.4585 429.561 C
88.3853 419.4883 L
f98.668 416.7578 m
97.2344 417.9922 93.8267 417.2461 89.6377 417.1992 C
90.8506 414.8877 90.3711 410.5654 92.1196 409.0801 C
93.8247 407.5381 98.4155 409.3223 100.7173 409.624 C
100.4561 411.7402 100.0503 415.4883 98.668 416.7578 C
fUu64.1772 448.793 m
65.0674 446.958 68.876 445.8418 70.8975 445.3501 C
71.4961 447.6436 74.0371 451.5879 73.1597 453.3916 C
72.2041 455.1592 68.0298 455.7344 66.312 457.6523 C
64.7554 453.8262 63.2217 450.5752 64.1772 448.793 C
f81.5288 412.6318 m
80.6953 415.5889 80.8506 420.0186 87.1255 418.2285 C
81.5288 412.6318 L
f88.3853 419.4883 m
88.4043 422.2744 87.5391 426.397 89.8979 428.5068 C
92.252 430.625 95.5898 428.1328 98.4585 429.561 C
88.3853 419.4883 L
f85.6553 429.7705 m
86.8892 428.3374 86.1431 424.9297 86.0977 420.7393 C
83.7861 421.9521 79.4619 421.4746 77.978 423.2222 C
76.4365 424.9268 78.2192 429.5181 78.521 431.8203 C
80.6367 431.5596 84.3857 431.1533 85.6553 429.7705 C
f*u
56.9575 482.0298 m
58.7603 481.0181 60.7041 480.0752 62.5215 479.0684 C
63.1172 479.9795 63.7646 481.0527 64.3848 482.1626 C
64.2861 482.1421 64.0654 482.0967 Y
63.874 483.1372 63.0806 483.9165 62.1489 484.8467 C
60.9995 485.9917 59.667 487.3374 59.4312 489.4756 C
58.9111 492.9888 62.3091 496.5435 64.2744 498.4746 C
65.1172 499.3418 66.0732 500.1953 66.9668 501.0244 C
66.7827 500.1831 66.541 499.3325 66.4121 498.4849 C
66.0215 496.1309 66.7856 494.0435 67.7017 492.29 C
68.2417 491.1812 68.7495 490.1509 68.8745 489.147 C
69.2769 486.2061 64.6831 479.5723 63.9663 478.2471 C
69.2026 475.1987 73.6548 471.5874 76.561 464.5176 C
79.4985 457.4595 78.9717 451.7896 77.3569 445.8872 C
78.8364 445.4819 86.7617 444.0259 88.5513 441.6528 C
89.1489 440.8374 89.5474 439.7715 89.9507 438.6055 C
90.5635 436.7334 91.4424 434.6709 93.4175 433.3125 C
95.5947 431.9009 L
94.3633 431.8428 93.1138 431.7959 91.8994 431.8086 C
89.1099 431.7593 84.2461 431.9121 82.0991 434.7422 C
80.75 436.418 80.7861 438.3477 80.7529 439.9409 C
80.7383 441.25 80.7422 442.3579 80.188 443.2593 C
80.3765 443.3833 80.4604 443.4385 V
79.2275 443.7778 78.0005 444.0747 76.9268 444.2939 C
76.3608 442.2988 75.7007 440.29 75.0747 438.2539 C
72.6348 429.915 70.8896 420.8706 80.1748 411.2773 C
78.9648 410.0674 L
72.0791 416.9971 70.8965 424.0894 71.564 430.2729 C
69.3589 430.6299 61.6484 432.8027 59.7373 435.9868 C
59.1006 437.0884 58.7388 438.4658 58.3652 439.9097 C
57.7207 442.1929 57.2598 444.8491 55.4058 447.0947 C
54.731 447.9082 54.1479 448.772 53.5122 449.6157 C
57.2612 448.1504 L
60.1953 447.1064 64.8872 445.5947 66.8086 442.397 C
67.9229 440.3843 67.9683 438.478 67.9761 436.7227 C
68.0024 435.3159 67.9893 434.0474 68.6958 433.0732 C
68.5078 432.9448 68.4253 432.8882 V
69.6255 432.5186 70.7773 432.2314 71.8115 432.0176 C
72.2114 434.3438 72.7544 436.5352 73.4595 438.7412 C
76.0513 447.2412 79.1025 454.3188 74.9805 463.8623 C
71.1353 473.5264 64.0449 476.374 56.1113 480.5352 C
54.1401 481.6123 52.1382 482.7666 50.21 484.1299 C
49.6372 483.249 49.0337 482.2334 48.4551 481.1235 C
48.5537 481.1421 48.7769 481.1841 Y
48.9878 479.999 49.7969 479.0918 50.8208 478.0889 C
52.0718 476.8438 53.4258 475.4717 53.9995 473.2466 C
54.9697 469.6426 52.6108 465.2222 51.3623 462.4355 C
50.8066 461.2207 50.2119 459.9692 49.71 458.7295 C
49.5308 459.7646 49.439 460.8271 49.3032 461.8677 C
48.9277 464.7383 47.4995 466.978 46.2954 469.0376 C
45.5264 470.3208 44.7646 471.54 44.5024 472.7856 C
43.5674 476.3828 47.5405 483.3857 48.79 485.1875 C
44.002 489.0991 39.7876 494.9507 39.7627 504.709 C
41.4741 504.709 L
41.7163 491.3784 49.248 486.186 56.9575 482.0298 C
f1 D
47.6621 479.5078 m
46.5488 477.0269 45.876 474.4966 46.1641 473.1953 C
46.3672 472.2334 46.9961 471.188 47.7285 469.9932 C
48.6802 468.4829 49.6572 466.6929 50.4146 464.6226 C
51.4722 467.0347 53.0718 470.3535 52.3442 472.8125 C
51.8818 474.5542 50.8242 475.644 49.6426 476.8228 C
48.8833 477.6079 48.1421 478.4858 47.6621 479.5078 C
f66.7378 433.4795 m
66.3979 434.5708 66.2539 435.6836 66.2397 436.7773 C
66.2104 438.4272 66.209 439.9575 65.3315 441.5332 C
64.019 443.7368 60.6567 445.0107 58.165 445.9487 C
59.1406 443.9736 59.5923 441.9521 60.0596 440.2515 C
60.4053 438.9009 60.71 437.7231 61.2017 436.8726 C
61.8975 435.7344 64.2339 434.4727 66.7378 433.4795 C
f82.0181 442.981 m
82.314 442.0439 82.4287 441.0576 82.4312 440.0557 C
82.4492 438.5518 82.4209 437.0493 83.458 435.7827 C
84.9043 433.9272 88.2456 433.4668 90.7344 433.4561 C
89.4951 434.8491 88.8843 436.5264 88.3926 437.937 C
88.0029 439.0503 87.6465 439.9785 87.1772 440.6323 C
86.5488 441.522 84.4336 442.3047 82.0181 442.981 C
f65.2095 483.5972 m
66.4365 485.7798 67.3115 487.8159 67.1812 488.8979 C
67.0815 489.6948 66.6426 490.5996 66.1309 491.6631 C
65.4473 493.0029 64.7612 494.627 64.625 496.4878 C
62.8887 494.7222 60.7886 492.0293 61.1279 489.6997 C
61.3164 488.0752 62.3032 487.02 63.4077 485.9521 C
64.1221 485.2427 64.748 484.4673 65.2095 483.5972 C
f*U
0 D
66.2671 460.249 m
71.4438 456.6738 73.0625 460.7813 73.5786 463.2808 C
71.4722 464.6948 67.3813 466.4351 66.2671 460.249 C
f51.4624 454.1099 m
54.75 454.0684 57.4004 450.0332 60.2402 451.3931 C
63.1079 452.7749 63.5264 457.0884 64.6216 459.5669 C
62.1563 460.5703 58.6655 463.2661 55.7344 462.2407 C
52.6924 461.165 53.8286 456.498 51.4624 454.1099 C
f56.6738 466.8647 m
55.9883 468.7856 57.9722 472.2954 58.9849 474.0518 C
61.0977 472.875 65.6064 471.8608 66.2754 469.9697 C
66.9297 468.0728 64.2573 464.666 64.4663 462.1211 C
60.5952 463.6973 57.3442 464.958 56.6738 466.8647 C
f43.3892 504.709 m
44.894 502.0303 48.1406 499.0083 51.3042 504.709 C
43.3892 504.709 L
f53.0854 504.709 m
55.0718 502.7529 57.3804 499.2246 60.5405 499.3984 C
63.7031 499.5635 64.2939 503.6895 67.3311 504.709 C
53.0854 504.709 L
f58.4297 495.5059 m
58.2607 497.3906 55.3574 499.2769 52.356 502.2061 C
51.5864 499.7148 48.1558 496.9976 48.3701 494.7134 C
48.5 492.4185 52.9473 490.4253 54.8335 489.0151 C
56.1016 490.6909 58.5234 493.6318 58.4297 495.5059 C
fUu56.6738 542.5537 m
55.9883 540.6333 57.9717 537.123 58.9849 535.3662 C
61.0977 536.5444 65.6064 537.5586 66.2749 539.4482 C
66.9297 541.3457 64.2568 544.7524 64.4663 547.2983 C
60.5947 545.7207 57.3438 544.4604 56.6738 542.5537 C
f43.3892 504.709 m
44.894 507.3867 48.1406 510.4102 51.3042 504.709 C
43.3892 504.709 L
f53.0854 504.709 m
55.0718 506.6655 57.3804 510.1938 60.5405 510.02 C
63.7031 509.855 64.2939 505.729 67.3311 504.709 C
53.0854 504.709 L
f58.4297 513.9121 m
58.2607 512.0283 55.3574 510.1421 52.356 507.2114 C
51.5864 509.7026 48.1558 512.4214 48.3701 514.7051 C
48.5 516.9985 52.9473 518.9932 54.8335 520.4038 C
56.1016 518.7285 58.5234 515.7876 58.4297 513.9121 C
f*u
75.0742 571.1641 m
75.7007 569.1289 76.3604 567.1196 76.9268 565.1255 C
78 565.3438 79.2266 565.6396 80.46 565.9795 C
80.3765 566.0352 80.188 566.1592 Y
80.7422 567.061 80.7383 568.1689 80.7515 569.4761 C
80.7866 571.0713 80.7495 573 82.0981 574.6753 C
84.2451 577.5049 89.1094 577.6592 91.8979 577.6089 C
93.1128 577.6216 94.3623 577.5752 95.5938 577.5171 C
93.4175 576.1055 L
91.4414 574.7461 90.5635 572.6855 89.9502 570.813 C
89.5474 569.6475 89.1489 568.5815 88.5508 567.7656 C
86.7617 565.3926 78.8369 563.9375 77.356 563.5298 C
78.9722 557.6299 79.4985 551.959 76.5605 544.8994 C
73.6548 537.8311 69.2026 534.2202 63.9658 531.1699 C
64.6831 529.8467 69.2769 523.2124 68.874 520.2715 C
68.7495 519.2681 68.2417 518.2383 67.7017 517.1284 C
66.7856 515.3755 66.0215 513.2856 66.4121 510.9336 C
66.5405 510.0854 66.7827 509.2349 66.9668 508.3931 C
66.0728 509.2222 65.1177 510.0757 64.2744 510.9419 C
62.3091 512.875 58.9106 516.4277 59.4312 519.9419 C
59.667 522.0806 60.9995 523.4272 62.1484 524.5703 C
63.0806 525.5029 63.874 526.2817 64.0654 527.3213 C
64.2861 527.2764 64.3843 527.2559 V
63.7642 528.3643 63.1172 529.439 62.5215 530.3511 C
60.7036 529.3428 58.7603 528.4009 56.9575 527.3877 C
49.248 523.2324 41.7163 518.0381 41.4741 504.709 C
39.7627 504.709 L
39.7876 514.4658 44.002 520.3203 48.79 524.2305 C
47.5405 526.0317 43.5669 533.0337 44.5024 536.6328 C
44.7646 537.8789 45.5264 539.0981 46.2949 540.3809 C
47.4995 542.4399 48.9277 544.6812 49.3032 547.5508 C
49.4385 548.5908 49.5303 549.6523 49.7095 550.687 C
50.2114 549.4482 50.8062 548.1973 51.3623 546.9834 C
52.6108 544.1963 54.9692 539.7749 53.9995 536.1724 C
53.4258 533.9463 52.0718 532.5742 50.8208 531.3301 C
49.7969 530.3262 48.9878 529.4194 48.7769 528.2344 C
48.5537 528.2764 48.4551 528.2949 V
49.0337 527.1855 49.6372 526.1694 50.21 525.2881 C
52.1382 526.6514 54.1396 527.8052 56.1113 528.8838 C
64.0449 533.0449 71.1353 535.8926 74.9795 545.5547 C
79.1025 555.1001 76.0513 562.1777 73.4595 570.6777 C
72.7534 572.8823 72.2114 575.0747 71.811 577.4009 C
70.7773 577.187 69.626 576.9004 68.4248 576.5303 C
68.5078 576.4736 68.6953 576.3452 Y
67.9893 575.3711 68.002 574.1025 67.9761 572.6963 C
67.9678 570.9404 67.9224 569.0337 66.8086 567.022 C
64.8862 563.8228 60.1948 562.3115 57.2612 561.269 C
53.5112 559.8008 L
54.147 560.6455 54.7305 561.5098 55.4058 562.3232 C
57.2603 564.5698 57.7207 567.2256 58.3647 569.5088 C
58.7388 570.9531 59.1006 572.3311 59.7368 573.4316 C
61.647 576.6138 69.3584 578.7876 71.5635 579.1455 C
70.8965 585.3296 72.0776 592.4194 78.9644 599.3511 C
80.1743 598.1411 L
70.8882 588.5464 72.6343 579.5034 75.0742 571.1641 C
f1 D
66.7373 575.9385 m
64.2339 574.9463 61.896 573.6826 61.2012 572.5459 C
60.71 571.6958 60.4058 570.5181 60.0591 569.167 C
59.5918 567.4663 59.1406 565.4458 58.165 563.4702 C
60.6567 564.4077 64.0186 565.6816 65.3315 567.8857 C
66.209 569.4609 66.21 570.9912 66.2393 572.6406 C
66.2534 573.7349 66.3975 574.8477 66.7373 575.9385 C
f47.6616 529.9102 m
48.1421 530.9326 48.8828 531.8105 49.6426 532.5947 C
50.8242 533.7744 51.8818 534.8643 52.3442 536.6064 C
53.0718 539.0649 51.4717 542.3838 50.415 544.7969 C
49.6572 542.7261 48.6802 540.9355 47.7285 539.4253 C
46.9961 538.231 46.3672 537.1855 46.1641 536.2231 C
45.8755 534.9199 46.5488 532.3926 47.6616 529.9102 C
f65.2095 525.8223 m
64.748 524.9521 64.1221 524.1758 63.4077 523.4668 C
62.3032 522.3994 61.3159 521.3433 61.1279 519.7178 C
60.7886 517.3892 62.8887 514.6963 64.625 512.9307 C
64.7612 514.79 65.4468 516.415 66.1309 517.7559 C
66.6426 518.8188 67.0815 519.7217 67.1812 520.5205 C
67.311 521.6016 66.4365 523.6377 65.2095 525.8223 C
f82.0181 566.438 m
84.4326 567.1133 86.5483 567.896 87.1772 568.7861 C
87.645 569.439 88.0024 570.3682 88.3931 571.4819 C
88.8838 572.8921 89.4937 574.5684 90.7344 575.9624 C
88.2451 575.9517 84.9038 575.4912 83.457 573.6348 C
82.4204 572.3691 82.4497 570.8672 82.4312 569.3633 C
82.4282 568.3608 82.314 567.3755 82.0181 566.438 C
f*U
0 D
66.2666 549.168 m
67.3809 542.9824 71.4722 544.7236 73.5776 546.1362 C
73.0625 548.6372 71.4434 552.7441 66.2666 549.168 C
f51.4619 555.3066 m
53.8286 552.9214 52.6919 548.2534 55.7339 547.1777 C
58.665 546.1523 62.1563 548.8486 64.6211 549.8501 C
63.5264 552.3306 63.1074 556.6436 60.2397 558.0249 C
57.4004 559.3848 54.75 555.3506 51.4619 555.3066 C
f64.1772 560.6255 m
65.0674 562.4609 68.876 563.5767 70.8975 564.0684 C
71.4966 561.7754 74.0376 557.8311 73.1592 556.0269 C
72.2041 554.2593 68.0293 553.6841 66.3125 551.7666 C
64.7554 555.5923 63.2212 558.8433 64.1772 560.6255 C
f81.5288 596.7871 m
80.6943 593.8291 80.8501 589.3999 87.1255 591.1904 C
81.5288 596.7871 L
f88.3853 589.9307 m
88.4038 587.144 87.5386 583.0215 89.8975 580.9116 C
92.2515 578.7935 95.5894 581.2856 98.4585 579.8574 C
88.3853 589.9307 L
f85.6553 579.6479 m
86.8892 581.0815 86.1436 584.4893 86.0967 588.6782 C
83.7852 587.4653 79.4624 587.9443 77.9775 586.1963 C
76.4355 584.4912 78.2192 579.9004 78.521 577.5986 C
80.6372 577.8594 84.3857 578.2656 85.6553 579.6479 C
fUu117.6899 614.1387 m
115.8555 613.2485 114.7388 609.4399 114.2476 607.4185 C
116.5405 606.8198 120.4849 604.2788 122.2886 605.1563 C
124.0566 606.1118 124.6313 610.2861 126.5493 612.0039 C
122.7231 613.5605 119.4722 615.0942 117.6899 614.1387 C
f81.5288 596.7871 m
84.4858 597.6206 88.9155 597.4653 87.1255 591.1904 C
81.5288 596.7871 L
f88.3853 589.9307 m
91.1714 589.9116 95.2939 590.7769 97.4043 588.418 C
99.5225 586.064 97.0298 582.7261 98.4585 579.8574 C
88.3853 589.9307 L
f98.6675 592.6602 m
97.2344 591.4268 93.8267 592.1729 89.6367 592.2183 C
90.8496 594.5298 90.3716 598.854 92.1196 600.3379 C
93.8237 601.8794 98.415 600.0967 100.7173 599.7949 C
100.4565 597.6792 100.0503 593.9302 98.6675 592.6602 C
f*u
150.9272 621.3584 m
149.915 619.5557 148.9727 617.6123 147.9653 615.7944 C
148.8765 615.1987 149.9502 614.5518 151.0596 613.9316 C
151.0396 614.0298 150.9941 614.2505 Y
152.0342 614.4419 152.8135 615.2354 153.7437 616.167 C
154.8887 617.3164 156.2349 618.6489 158.3726 618.8848 C
161.8857 619.4048 165.4404 616.0068 167.3721 614.0415 C
168.2388 613.1982 169.0923 612.2432 169.9219 611.3491 C
169.0801 611.5332 168.23 611.7749 167.3823 611.9038 C
165.0283 612.2944 162.9404 611.5303 161.187 610.6143 C
160.0781 610.0742 159.0483 609.5664 158.0439 609.4414 C
155.103 609.0391 148.4697 613.6328 147.144 614.3496 C
144.0962 609.1133 140.4849 604.6611 133.415 601.7549 C
126.3569 598.8174 120.6865 599.3442 114.7842 600.959 C
114.3789 599.4795 112.9229 591.5542 110.5503 589.7646 C
109.7344 589.167 108.6685 588.7686 107.5024 588.3652 C
105.6304 587.7524 103.5684 586.8735 102.21 584.8984 C
100.7983 582.7212 L
100.7397 583.9526 100.6929 585.2021 100.7056 586.4165 C
100.6563 589.2061 100.8091 594.0698 103.6396 596.2168 C
105.3154 597.5659 107.2451 597.5298 108.8384 597.563 C
110.147 597.5776 111.2549 597.5737 112.1563 598.1279 C
112.2808 597.9395 112.3359 597.8555 V
112.6748 599.0884 112.9722 600.3154 113.1909 601.3892 C
111.1963 601.9551 109.187 602.6152 107.1509 603.2412 C
98.812 605.6812 89.7676 607.4263 80.1743 598.1411 C
78.9644 599.3511 L
85.8945 606.2368 92.9863 607.4194 99.1699 606.752 C
99.5273 608.957 101.7002 616.6675 104.8838 618.5791 C
105.9854 619.2153 107.3628 619.5771 108.8066 619.9507 C
111.0898 620.5952 113.7466 621.0562 115.9922 622.9102 C
116.8052 623.585 117.6689 624.168 118.5132 624.8037 C
117.0474 621.0547 L
116.0034 618.1211 114.4922 613.4287 111.2939 611.5073 C
109.2817 610.3931 107.3755 610.3477 105.6196 610.3398 C
104.2129 610.3135 102.9443 610.3267 101.9702 609.6201 C
101.8423 609.8081 101.7856 609.8906 V
101.416 608.6904 101.1284 607.5386 100.9146 606.5044 C
103.2407 606.1045 105.4321 605.5615 107.6382 604.8564 C
116.1382 602.2646 123.2163 599.2134 132.7593 603.3354 C
142.4238 607.1807 145.2715 614.271 149.4326 622.2046 C
150.5093 624.1758 151.6641 626.1777 153.0273 628.106 C
152.146 628.6787 151.1304 629.2822 150.0205 629.8608 C
150.0391 629.7622 150.0811 629.5391 Y
148.896 629.3281 147.9893 628.519 146.9858 627.4951 C
145.7412 626.2441 144.3691 624.8901 142.144 624.3164 C
138.5396 623.3462 134.1191 625.7051 131.333 626.9536 C
130.1177 627.5093 128.8662 628.104 127.6265 628.606 C
128.6621 628.7852 129.7241 628.877 130.7646 629.0127 C
133.6353 629.3887 135.8755 630.8164 137.9346 632.0205 C
139.2183 632.7896 140.4375 633.5513 141.6826 633.8135 C
145.2798 634.7485 152.2827 630.7754 154.0845 629.5259 C
157.9961 634.314 163.8477 638.5283 173.6064 638.5532 C
173.6064 636.8418 L
160.2754 636.5996 155.083 629.0679 150.9272 621.3584 C
f1 D
148.4053 630.6543 m
145.9238 631.7671 143.394 632.4399 142.0923 632.1519 C
141.1309 631.9492 140.0854 631.3203 138.8901 630.5874 C
137.3799 629.6357 135.5903 628.6592 133.5195 627.9014 C
135.9316 626.8438 139.2505 625.2441 141.7095 625.9717 C
143.4512 626.4341 144.541 627.4917 145.7197 628.6733 C
146.5049 629.4326 147.3828 630.1738 148.4053 630.6543 C
f102.377 611.5781 m
103.4678 611.918 104.5806 612.062 105.6743 612.0762 C
107.3242 612.1055 108.8545 612.1069 110.4302 612.9844 C
112.6338 614.2969 113.9077 617.6592 114.8457 620.1514 C
112.8706 619.1753 110.8491 618.7236 109.1484 618.2568 C
107.7979 617.9106 106.6201 617.606 105.7695 617.1143 C
104.6313 616.4185 103.3696 614.082 102.377 611.5781 C
f111.8779 596.2979 m
110.9409 596.002 109.9546 595.8872 108.9526 595.8848 C
107.4487 595.8667 105.9463 595.8955 104.6802 594.8579 C
102.8242 593.4116 102.3638 590.0703 102.353 587.5811 C
103.7461 588.8208 105.4233 589.4316 106.8345 589.9229 C
107.9473 590.313 108.8755 590.6694 109.5298 591.1387 C
110.4189 591.7671 111.2017 593.8823 111.8779 596.2979 C
f152.4941 613.1064 m
154.6768 611.8794 156.7134 611.0044 157.7949 611.1348 C
158.5923 611.2344 159.4971 611.6733 160.5601 612.1851 C
161.9004 612.8687 163.5239 613.5547 165.3848 613.6909 C
163.6191 615.4272 160.9263 617.5273 158.5967 617.188 C
156.9722 617 155.917 616.0127 154.8496 614.9082 C
154.1401 614.1938 153.3643 613.5679 152.4941 613.1064 C
f*U
0 D
129.1465 612.0488 m
125.5708 606.8721 129.6782 605.2534 132.1782 604.7373 C
133.5923 606.8438 135.3325 610.9346 129.1465 612.0488 C
f123.0073 626.8535 m
122.9658 623.5659 118.9302 620.9155 120.2905 618.0757 C
121.6724 615.208 125.9858 614.7896 128.4639 613.6943 C
129.4678 616.1597 132.1631 619.6504 131.1377 622.582 C
130.062 625.6235 125.395 624.4873 123.0073 626.8535 C
f135.7617 621.6421 m
137.6831 622.3276 141.1924 620.3438 142.9492 619.3311 C
141.772 617.2183 140.7578 612.7095 138.8672 612.0405 C
136.9697 611.3862 133.563 614.0586 131.0181 613.8496 C
132.5947 617.7207 133.855 620.9717 135.7617 621.6421 C
f173.6064 634.9268 m
170.9277 633.4219 167.9053 630.1753 173.6064 627.0117 C
173.6064 634.9268 L
f173.6064 625.2305 m
171.6499 623.2441 168.1216 620.9355 168.2954 617.7754 C
168.4604 614.6133 172.5864 614.022 173.6064 610.9849 C
173.6064 625.2305 L
f164.4033 619.8862 m
166.2881 620.0552 168.1738 622.9585 171.103 625.96 C
168.6118 626.7295 165.895 630.1602 163.6104 629.9458 C
161.3159 629.8159 159.3228 625.3687 157.9126 623.4824 C
159.5879 622.2144 162.5288 619.7925 164.4033 619.8862 C
fUu211.4507 621.6421 m
209.5303 622.3276 206.02 620.3438 204.2637 619.3311 C
205.4414 617.2178 206.4556 612.7095 208.3457 612.041 C
210.2427 611.3862 213.6499 614.0586 216.1953 613.8496 C
214.6182 617.7207 213.3574 620.9722 211.4507 621.6421 C
f173.6064 634.9268 m
176.2842 633.4219 179.3071 630.1753 173.6064 627.0117 C
173.6064 634.9268 L
f173.6064 625.2305 m
175.5625 623.2441 179.0908 620.9355 178.917 617.7754 C
178.752 614.6133 174.626 614.022 173.6064 610.9849 C
173.6064 625.2305 L
f182.8096 619.8862 m
180.9253 620.0552 179.0396 622.9585 176.1084 625.96 C
178.5996 626.7295 181.3188 630.1602 183.6021 629.9458 C
185.896 629.8159 187.8901 625.3687 189.3008 623.4824 C
187.6255 622.2144 184.6846 619.7925 182.8096 619.8862 C
f*u
240.061 603.2417 m
238.0264 602.6152 236.0166 601.9556 234.0225 601.3887 C
234.2407 600.3154 234.5366 599.0894 234.877 597.856 C
234.9321 597.9395 235.0562 598.1279 Y
235.9585 597.5737 237.0664 597.5776 238.373 597.564 C
239.9683 597.5293 241.8975 597.5664 243.5723 596.2173 C
246.4023 594.0708 246.5562 589.2061 246.5059 586.4175 C
246.5186 585.2031 246.4722 583.9536 246.4141 582.7222 C
245.0029 584.8984 L
243.6436 586.8745 241.5825 587.7524 239.71 588.3652 C
238.5444 588.7686 237.479 589.167 236.6626 589.7646 C
234.2896 591.5542 232.8345 599.479 232.4268 600.96 C
226.5269 599.3438 220.856 598.8174 213.7964 601.7554 C
206.728 604.6611 203.1172 609.1133 200.0669 614.3501 C
198.7437 613.6328 192.1099 609.0391 189.1685 609.4414 C
188.165 609.5664 187.1353 610.0742 186.0254 610.6143 C
184.2729 611.5303 182.1831 612.2944 179.8306 611.9038 C
178.9824 611.7754 178.1318 611.5332 177.29 611.3491 C
178.1191 612.2432 178.9727 613.1982 179.8394 614.0415 C
181.772 616.0068 185.3252 619.4053 188.8394 618.8848 C
190.978 618.6489 192.3247 617.3164 193.4673 616.1675 C
194.3999 615.2354 195.1792 614.4419 196.2188 614.2505 C
196.1733 614.0298 196.1528 613.9316 V
197.2612 614.5518 198.3359 615.1987 199.248 615.7944 C
198.2402 617.6123 197.2983 619.5557 196.2847 621.3584 C
192.1294 629.0679 186.9351 636.5996 173.6064 636.8418 C
173.6064 638.5532 L
183.3628 638.5283 189.2173 634.314 193.1279 629.5259 C
194.9287 630.7754 201.9312 634.749 205.5298 633.8135 C
206.7764 633.5508 207.9951 632.7896 209.2778 632.0205 C
211.3374 630.8164 213.5781 629.3882 216.4478 629.0127 C
217.4878 628.8774 218.5493 628.7856 219.5845 628.6064 C
218.3452 628.1045 217.0947 627.5098 215.8804 626.9536 C
213.0933 625.7051 208.6719 623.3467 205.0693 624.3164 C
202.8438 624.8901 201.4712 626.2441 200.2275 627.4951 C
199.2236 628.519 198.3164 629.3281 197.1313 629.5391 C
197.1733 629.7627 197.1919 629.8608 V
196.083 629.2822 195.0664 628.6787 194.1855 628.106 C
195.5488 626.1777 196.7026 624.1763 197.7808 622.2046 C
201.9419 614.2705 204.7896 607.1807 214.4521 603.3364 C
223.9971 599.2134 231.0752 602.2646 239.5752 604.8564 C
241.7798 605.5625 243.9717 606.1045 246.2983 606.5049 C
246.084 607.5386 245.7974 608.6899 245.4272 609.8906 C
245.3706 609.8081 245.2422 609.6206 Y
244.2681 610.3267 242.9995 610.3135 241.5938 610.3398 C
239.8374 610.3477 237.9312 610.3936 235.9194 611.5068 C
232.7197 613.4297 231.209 618.1211 230.166 621.0547 C
228.6978 624.8047 L
229.5425 624.1689 230.4067 623.5854 231.2207 622.9102 C
233.4668 621.0557 236.1226 620.5952 238.4058 619.9512 C
239.8506 619.5767 241.228 619.2153 242.3286 618.5791 C
245.5112 616.6689 247.6846 608.9575 248.0425 606.752 C
254.2271 607.4189 261.3164 606.2383 268.2485 599.3516 C
267.0381 598.1416 L
257.4434 607.4277 248.4004 605.6816 240.061 603.2417 C
f1 D
244.8359 611.5786 m
243.8433 614.082 242.5796 616.4199 241.4429 617.1147 C
240.5928 617.6055 239.4155 617.9102 238.064 618.2568 C
236.3633 618.7236 234.3428 619.1748 232.3677 620.1509 C
233.3047 617.6592 234.5786 614.2969 236.7832 612.9844 C
238.3579 612.1069 239.8882 612.106 241.5376 612.0767 C
242.6318 612.0625 243.7446 611.9185 244.8359 611.5786 C
f198.8071 630.6543 m
199.8296 630.1738 200.7075 629.4331 201.4917 628.6733 C
202.6714 627.4917 203.7612 626.4341 205.5039 625.9717 C
207.9619 625.2441 211.2808 626.8442 213.6938 627.9009 C
211.6235 628.6587 209.8325 629.6357 208.3223 630.5874 C
207.1279 631.3198 206.0825 631.9487 205.1201 632.1519 C
203.8169 632.4404 201.2896 631.7666 198.8071 630.6543 C
f194.7192 613.1064 m
193.8491 613.5679 193.0728 614.1938 192.3638 614.9082 C
191.2964 616.0127 190.2402 617 188.6152 617.188 C
186.2861 617.5273 183.5933 615.4272 181.8276 613.6909 C
183.687 613.5547 185.3125 612.8691 186.6533 612.1846 C
187.7158 611.6733 188.6191 611.2344 189.4175 611.1348 C
190.4985 611.0049 192.5352 611.8794 194.7192 613.1064 C
f235.335 596.2979 m
236.0103 593.8828 236.793 591.7676 237.6831 591.1387 C
238.3359 590.6704 239.2656 590.313 240.3789 589.9229 C
241.7891 589.4316 243.4653 588.8223 244.8594 587.5815 C
244.8486 590.0703 244.3887 593.4121 242.5317 594.8589 C
241.2661 595.8955 239.7646 595.8662 238.2607 595.8843 C
237.2578 595.8877 236.2725 596.002 235.335 596.2979 C
f*U
0 D
218.0649 612.0493 m
211.8794 610.9346 213.6206 606.8438 215.0332 604.7383 C
217.5342 605.2534 221.6411 606.8726 218.0649 612.0493 C
f224.2036 626.854 m
221.8184 624.4873 217.1504 625.624 216.0747 622.582 C
215.0493 619.6509 217.7456 616.1592 218.7471 613.6948 C
221.2275 614.7896 225.5405 615.208 226.9224 618.0762 C
228.2822 620.9155 224.2476 623.5659 224.2036 626.854 C
f229.5225 614.1387 m
231.3579 613.2485 232.4736 609.4399 232.9653 607.4185 C
230.6729 606.8193 226.7285 604.2783 224.9238 605.1563 C
223.1563 606.1118 222.5811 610.2866 220.6641 612.0034 C
224.4893 613.5605 227.7402 615.0947 229.5225 614.1387 C
f265.6841 596.7871 m
262.7261 597.6211 258.2969 597.4653 260.0874 591.1904 C
265.6841 596.7871 L
f258.8276 589.9307 m
256.041 589.9116 251.9189 590.7773 249.8086 588.4185 C
247.6904 586.0645 250.1831 582.7266 248.7544 579.8574 C
258.8276 589.9307 L
f248.5449 592.6606 m
249.979 591.4268 253.3862 592.1724 257.5757 592.2192 C
256.3628 594.5303 256.8418 598.8535 255.0933 600.3384 C
253.3882 601.8799 248.7974 600.0967 246.4956 599.7949 C
246.7568 597.6787 247.1626 593.9302 248.5449 592.6606 C
fUu283.0356 560.6255 m
282.1455 562.4604 278.3369 563.5771 276.3154 564.0684 C
275.7168 561.7749 273.1758 557.8311 274.0532 556.0273 C
275.0088 554.2593 279.1836 553.6841 280.9009 551.7661 C
282.4575 555.5928 283.9912 558.8433 283.0356 560.6255 C
f265.6841 596.7871 m
266.5176 593.8296 266.3623 589.4004 260.0874 591.1904 C
265.6841 596.7871 L
f258.8276 589.9307 m
258.8086 587.1445 259.6738 583.022 257.3154 580.9116 C
254.9609 578.7935 251.623 581.2861 248.7544 579.8574 C
258.8276 589.9307 L
f261.5576 579.6479 m
260.3237 581.0815 261.0698 584.4888 261.1157 588.6792 C
263.4268 587.4663 267.751 587.9443 269.2354 586.1963 C
270.7764 584.4922 268.9937 579.9004 268.6919 577.5981 C
266.5762 577.8594 262.8276 578.2651 261.5576 579.6479 C
f*u
290.2554 527.3887 m
288.4526 528.4004 286.5093 529.3433 284.6914 530.3506 C
284.0957 529.4395 283.4482 528.3657 282.8286 527.2563 C
282.9268 527.2764 283.1475 527.3218 Y
283.3389 526.2813 284.1323 525.5024 285.064 524.5723 C
286.2134 523.4268 287.5459 522.0811 287.7817 519.9434 C
288.3018 516.4297 284.9038 512.8755 282.9385 510.9438 C
282.0957 510.0771 281.1396 509.2231 280.2461 508.394 C
280.4307 509.2354 280.6719 510.0859 280.8008 510.9336 C
281.1914 513.2876 280.4272 515.375 279.5112 517.1289 C
278.9712 518.2378 278.4634 519.2676 278.3389 520.2715 C
277.936 523.2129 282.5298 529.8462 283.2466 531.1719 C
278.0103 534.2197 273.5586 537.8311 270.6519 544.9009 C
267.7144 551.959 268.2412 557.6294 269.856 563.5313 C
268.3765 563.937 260.4512 565.3931 258.6616 567.7656 C
258.0645 568.5815 257.6655 569.647 257.2622 570.8135 C
256.6494 572.6855 255.7705 574.7476 253.7954 576.106 C
251.6182 577.5176 L
252.8496 577.5762 254.0991 577.623 255.3135 577.6104 C
258.103 577.6592 262.9668 577.5063 265.1138 574.6763 C
266.4629 573.0005 266.4268 571.0708 266.46 569.4775 C
266.4746 568.1689 266.4712 567.061 267.0249 566.1592 C
266.8364 566.0352 266.7529 565.98 V
267.9854 565.6411 269.2124 565.3438 270.2861 565.125 C
270.8525 567.1196 271.5122 569.1289 272.1382 571.165 C
274.5786 579.5039 276.3232 588.5479 267.0381 598.1416 C
268.2485 599.3516 L
275.1338 592.4214 276.3164 585.3291 275.6489 579.146 C
277.854 578.7886 285.5645 576.6157 287.4761 573.4316 C
288.1128 572.3301 288.4741 570.9526 288.8477 569.5093 C
289.4922 567.2256 289.9531 564.5693 291.8071 562.3237 C
292.4819 561.5107 293.0654 560.647 293.7007 559.8027 C
289.9517 561.2686 L
287.0181 562.312 282.3262 563.8237 280.4043 567.0215 C
279.29 569.0342 279.2446 570.9404 279.2368 572.6963 C
279.2104 574.1025 279.2236 575.3711 278.5176 576.3452 C
278.7051 576.4736 278.7876 576.5303 V
277.5874 576.8999 276.4355 577.1875 275.4014 577.4014 C
275.0015 575.0752 274.459 572.8833 273.7534 570.6777 C
271.1621 562.1777 268.1104 555.0996 272.2324 545.5566 C
276.0781 535.8921 283.168 533.0444 291.1016 528.8833 C
293.0732 527.8066 295.0747 526.6519 297.0029 525.2886 C
297.5757 526.1699 298.1792 527.1855 298.7578 528.2949 C
298.6592 528.2764 298.436 528.2349 Y
298.2251 529.4194 297.416 530.3267 296.3921 531.3301 C
295.1411 532.5747 293.7871 533.9468 293.2139 536.1719 C
292.2432 539.7759 294.6021 544.1963 295.8506 546.9829 C
296.4067 548.1978 297.001 549.4492 297.5029 550.689 C
297.6821 549.6538 297.7739 548.5918 297.9097 547.5513 C
298.2856 544.6807 299.7129 542.4404 300.918 540.3809 C
301.6865 539.0977 302.4482 537.8784 302.7109 536.6328 C
303.6455 533.0361 299.6719 526.0332 298.4229 524.231 C
303.2109 520.3198 307.4248 514.4678 307.4502 504.7095 C
305.7393 504.7095 L
305.4961 518.04 297.9648 523.2324 290.2554 527.3887 C
f1 D
299.5508 529.9106 m
300.6641 532.3916 301.3369 534.9219 301.0488 536.2231 C
300.8457 537.1851 300.2168 538.2305 299.4844 539.4258 C
298.5327 540.9355 297.5562 542.7256 296.7983 544.7964 C
295.7412 542.3838 294.1411 539.0654 294.8691 536.6064 C
295.3311 534.8647 296.3887 533.7744 297.5703 532.5957 C
298.3301 531.8105 299.0703 530.9331 299.5508 529.9106 C
f280.4751 575.939 m
280.8154 574.8481 280.959 573.7354 280.9731 572.6416 C
281.0024 570.9912 281.0039 569.4609 281.8818 567.8857 C
283.1938 565.6816 286.5562 564.4082 289.0483 563.4697 C
288.0723 565.4453 287.6206 567.4668 287.1538 569.1675 C
286.8076 570.5176 286.5029 571.6953 286.0117 572.5464 C
285.3154 573.6846 282.979 574.9458 280.4751 575.939 C
f265.1953 566.4375 m
264.8989 567.375 264.7842 568.3613 264.7817 569.3633 C
264.7637 570.8672 264.7925 572.3691 263.7554 573.6357 C
262.3086 575.4917 258.9673 575.9521 256.4785 575.9624 C
257.7178 574.5698 258.3286 572.8926 258.8203 571.4814 C
259.21 570.3687 259.5664 569.4404 260.0356 568.7861 C
260.6641 567.897 262.7793 567.1143 265.1953 566.4375 C
f282.0034 525.8218 m
280.7764 523.6387 279.9014 521.6025 280.0317 520.521 C
280.1313 519.7236 280.5703 518.8188 281.082 517.7559 C
281.7656 516.4155 282.4517 514.792 282.5879 512.9307 C
284.3242 514.6968 286.4243 517.3896 286.085 519.7192 C
285.897 521.3433 284.9102 522.3989 283.8052 523.4663 C
283.0908 524.1758 282.4648 524.9517 282.0034 525.8218 C
f*U
0 D
280.9458 549.1694 m
275.769 552.7451 274.1504 548.6377 273.6343 546.1377 C
275.7407 544.7236 279.8315 542.9834 280.9458 549.1694 C
f295.7505 555.3086 m
292.4629 555.3501 289.8125 559.3853 286.9727 558.0254 C
284.105 556.6436 283.6865 552.3301 282.5913 549.8521 C
285.0566 548.8481 288.5479 546.1528 291.479 547.1782 C
294.521 548.2539 293.3848 552.9209 295.7505 555.3086 C
f290.5391 542.5537 m
291.2246 540.6328 289.2407 537.1235 288.228 535.3667 C
286.1152 536.5439 281.6064 537.5581 280.9375 539.4487 C
280.2832 541.3457 282.9556 544.7529 282.7466 547.2979 C
286.6177 545.7212 289.8691 544.4604 290.5391 542.5537 C
f303.8242 504.7095 m
302.3184 507.3882 299.0723 510.4102 295.9087 504.7095 C
303.8242 504.7095 L
f294.1274 504.7095 m
292.1411 506.666 289.8325 510.1943 286.6724 510.0205 C
283.5098 509.855 282.9189 505.7295 279.8818 504.7095 C
294.1274 504.7095 L
f288.7832 513.9126 m
288.9521 512.0278 291.8555 510.1416 294.8569 507.2124 C
295.6265 509.7041 299.0576 512.4209 298.8428 514.7056 C
298.7129 517 294.2656 518.9932 292.3794 520.4033 C
291.1113 518.728 288.6895 515.7871 288.7832 513.9126 C
fUU(Adobe PatternOnPath Brush Tool) 1 0 35 XP
%040302010000803F0000000000000001000000005061747465726E204272
%7573682031
/Adobe_Brushed_Path () XT
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
